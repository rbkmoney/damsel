%%
%% Autogenerated by Thrift Compiler (1.0.0-dev)
%%
%% DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
%%

-module(dmsl_merch_stat_thrift).

-include("dmsl_merch_stat_thrift.hrl").

-export([namespace/0]).
-export([enums/0]).
-export([typedefs/0]).
-export([structs/0]).
-export([services/0]).
-export([typedef_info/1]).
-export([enum_info/1]).
-export([struct_info/1]).
-export([record_name/1]).
-export([functions/1]).
-export([function_info/3]).

-export_type([namespace/0]).
-export_type([typedef_name/0]).
-export_type([enum_name/0]).
-export_type([struct_name/0]).
-export_type([exception_name/0]).
-export_type([service_name/0]).
-export_type([function_name/0]).

-export_type([enum_info/0]).
-export_type([struct_info/0]).

-export_type([
    'DigitalWalletID'/0,
    'PayoutID'/0,
    'PayoutSummary'/0,
    'StatInfo'/0,
    'InvalidRequest'/0
]).
-export_type([
    'OnHoldExpiration'/0,
    'MobileOperator'/0,
    'CryptoCurrency'/0,
    'TerminalPaymentProvider'/0,
    'DigitalWalletProvider'/0,
    'OperationType'/0
]).
-export_type([
    'StatPayment'/0,
    'Payer'/0,
    'RecurrentParentPayment'/0,
    'RecurrentPayer'/0,
    'PaymentResourcePayer'/0,
    'CustomerPayer'/0,
    'InvoicePaymentFlow'/0,
    'InvoicePaymentFlowInstant'/0,
    'InvoicePaymentFlowHold'/0,
    'OperationFailure'/0,
    'OperationTimeout'/0,
    'InvoicePaymentPending'/0,
    'InvoicePaymentProcessed'/0,
    'InvoicePaymentCaptured'/0,
    'InvoicePaymentCancelled'/0,
    'InvoicePaymentRefunded'/0,
    'InvoicePaymentChargedBack'/0,
    'InvoicePaymentFailed'/0,
    'InvoicePaymentStatus'/0,
    'PaymentTool'/0,
    'MobileCommerce'/0,
    'MobilePhone'/0,
    'BankCard'/0,
    'PaymentTerminal'/0,
    'DigitalWallet'/0,
    'RussianBankAccount'/0,
    'InternationalBankAccount'/0,
    'InternationalBankDetails'/0,
    'StatInvoice'/0,
    'EnrichedStatInvoice'/0,
    'InvoiceUnpaid'/0,
    'InvoicePaid'/0,
    'InvoiceCancelled'/0,
    'InvoiceFulfilled'/0,
    'InvoiceStatus'/0,
    'StatCustomer'/0,
    'StatPayout'/0,
    'PayoutSummaryItem'/0,
    'PayoutType'/0,
    'Wallet'/0,
    'PayoutCard'/0,
    'PayoutAccount'/0,
    'RussianPayoutAccount'/0,
    'InternationalPayoutAccount'/0,
    'PayoutStatus'/0,
    'PayoutUnpaid'/0,
    'PayoutPaid'/0,
    'PayoutCancelled'/0,
    'PayoutConfirmed'/0,
    'StatRefund'/0,
    'InvoicePaymentRefundStatus'/0,
    'InvoicePaymentRefundPending'/0,
    'InvoicePaymentRefundSucceeded'/0,
    'InvoicePaymentRefundFailed'/0,
    'StatChargeback'/0,
    'StatRequest'/0,
    'StatResponse'/0,
    'StatResponseData'/0
]).
-export_type([
    'BadToken'/0
]).

-type namespace() :: 'merchstat'.

%%
%% typedefs
%%
-type typedef_name() ::
    'DigitalWalletID' |
    'PayoutID' |
    'PayoutSummary' |
    'StatInfo' |
    'InvalidRequest'.

-type 'DigitalWalletID'() :: binary().
-type 'PayoutID'() :: dmsl_base_thrift:'ID'().
-type 'PayoutSummary'() :: ['PayoutSummaryItem'()].
-type 'StatInfo'() :: #{binary() => binary()}.
-type 'InvalidRequest'() :: dmsl_base_thrift:'InvalidRequest'().

%%
%% enums
%%
-type enum_name() ::
    'OnHoldExpiration' |
    'MobileOperator' |
    'CryptoCurrency' |
    'TerminalPaymentProvider' |
    'DigitalWalletProvider' |
    'OperationType'.

%% enum 'OnHoldExpiration'
-type 'OnHoldExpiration'() ::
    'cancel' |
    'capture'.

%% enum 'MobileOperator'
-type 'MobileOperator'() ::
    'mts' |
    'beeline' |
    'megafone' |
    'tele2' |
    'yota'.

%% enum 'CryptoCurrency'
-type 'CryptoCurrency'() ::
    'bitcoin' |
    'litecoin' |
    'bitcoin_cash' |
    'ripple' |
    'ethereum' |
    'zcash'.

%% enum 'TerminalPaymentProvider'
-type 'TerminalPaymentProvider'() ::
    'euroset' |
    'wechat' |
    'alipay' |
    'zotapay' |
    'qps' |
    'uzcard' |
    'rbs'.

%% enum 'DigitalWalletProvider'
-type 'DigitalWalletProvider'() ::
    'qiwi'.

%% enum 'OperationType'
-type 'OperationType'() ::
    'payment' |
    'refund'.

%%
%% structs, unions and exceptions
%%
-type struct_name() ::
    'StatPayment' |
    'Payer' |
    'RecurrentParentPayment' |
    'RecurrentPayer' |
    'PaymentResourcePayer' |
    'CustomerPayer' |
    'InvoicePaymentFlow' |
    'InvoicePaymentFlowInstant' |
    'InvoicePaymentFlowHold' |
    'OperationFailure' |
    'OperationTimeout' |
    'InvoicePaymentPending' |
    'InvoicePaymentProcessed' |
    'InvoicePaymentCaptured' |
    'InvoicePaymentCancelled' |
    'InvoicePaymentRefunded' |
    'InvoicePaymentChargedBack' |
    'InvoicePaymentFailed' |
    'InvoicePaymentStatus' |
    'PaymentTool' |
    'MobileCommerce' |
    'MobilePhone' |
    'BankCard' |
    'PaymentTerminal' |
    'DigitalWallet' |
    'RussianBankAccount' |
    'InternationalBankAccount' |
    'InternationalBankDetails' |
    'StatInvoice' |
    'EnrichedStatInvoice' |
    'InvoiceUnpaid' |
    'InvoicePaid' |
    'InvoiceCancelled' |
    'InvoiceFulfilled' |
    'InvoiceStatus' |
    'StatCustomer' |
    'StatPayout' |
    'PayoutSummaryItem' |
    'PayoutType' |
    'Wallet' |
    'PayoutCard' |
    'PayoutAccount' |
    'RussianPayoutAccount' |
    'InternationalPayoutAccount' |
    'PayoutStatus' |
    'PayoutUnpaid' |
    'PayoutPaid' |
    'PayoutCancelled' |
    'PayoutConfirmed' |
    'StatRefund' |
    'InvoicePaymentRefundStatus' |
    'InvoicePaymentRefundPending' |
    'InvoicePaymentRefundSucceeded' |
    'InvoicePaymentRefundFailed' |
    'StatChargeback' |
    'StatRequest' |
    'StatResponse' |
    'StatResponseData'.

-type exception_name() ::
    'BadToken'.

%% struct 'StatPayment'
-type 'StatPayment'() :: #'merchstat_StatPayment'{}.

%% union 'Payer'
-type 'Payer'() ::
    {'payment_resource', 'PaymentResourcePayer'()} |
    {'customer', 'CustomerPayer'()} |
    {'recurrent', 'RecurrentPayer'()}.

%% struct 'RecurrentParentPayment'
-type 'RecurrentParentPayment'() :: #'merchstat_RecurrentParentPayment'{}.

%% struct 'RecurrentPayer'
-type 'RecurrentPayer'() :: #'merchstat_RecurrentPayer'{}.

%% struct 'PaymentResourcePayer'
-type 'PaymentResourcePayer'() :: #'merchstat_PaymentResourcePayer'{}.

%% struct 'CustomerPayer'
-type 'CustomerPayer'() :: #'merchstat_CustomerPayer'{}.

%% union 'InvoicePaymentFlow'
-type 'InvoicePaymentFlow'() ::
    {'instant', 'InvoicePaymentFlowInstant'()} |
    {'hold', 'InvoicePaymentFlowHold'()}.

%% struct 'InvoicePaymentFlowInstant'
-type 'InvoicePaymentFlowInstant'() :: #'merchstat_InvoicePaymentFlowInstant'{}.

%% struct 'InvoicePaymentFlowHold'
-type 'InvoicePaymentFlowHold'() :: #'merchstat_InvoicePaymentFlowHold'{}.

%% union 'OperationFailure'
-type 'OperationFailure'() ::
    {'operation_timeout', 'OperationTimeout'()} |
    {'failure', dmsl_domain_thrift:'Failure'()}.

%% struct 'OperationTimeout'
-type 'OperationTimeout'() :: #'merchstat_OperationTimeout'{}.

%% struct 'InvoicePaymentPending'
-type 'InvoicePaymentPending'() :: #'merchstat_InvoicePaymentPending'{}.

%% struct 'InvoicePaymentProcessed'
-type 'InvoicePaymentProcessed'() :: #'merchstat_InvoicePaymentProcessed'{}.

%% struct 'InvoicePaymentCaptured'
-type 'InvoicePaymentCaptured'() :: #'merchstat_InvoicePaymentCaptured'{}.

%% struct 'InvoicePaymentCancelled'
-type 'InvoicePaymentCancelled'() :: #'merchstat_InvoicePaymentCancelled'{}.

%% struct 'InvoicePaymentRefunded'
-type 'InvoicePaymentRefunded'() :: #'merchstat_InvoicePaymentRefunded'{}.

%% struct 'InvoicePaymentChargedBack'
-type 'InvoicePaymentChargedBack'() :: #'merchstat_InvoicePaymentChargedBack'{}.

%% struct 'InvoicePaymentFailed'
-type 'InvoicePaymentFailed'() :: #'merchstat_InvoicePaymentFailed'{}.

%% union 'InvoicePaymentStatus'
-type 'InvoicePaymentStatus'() ::
    {'pending', 'InvoicePaymentPending'()} |
    {'processed', 'InvoicePaymentProcessed'()} |
    {'captured', 'InvoicePaymentCaptured'()} |
    {'cancelled', 'InvoicePaymentCancelled'()} |
    {'refunded', 'InvoicePaymentRefunded'()} |
    {'failed', 'InvoicePaymentFailed'()} |
    {'charged_back', 'InvoicePaymentChargedBack'()}.

%% union 'PaymentTool'
-type 'PaymentTool'() ::
    {'bank_card', 'BankCard'()} |
    {'payment_terminal', 'PaymentTerminal'()} |
    {'digital_wallet', 'DigitalWallet'()} |
    {'crypto_currency', 'CryptoCurrency'()} |
    {'mobile_commerce', 'MobileCommerce'()}.

%% struct 'MobileCommerce'
-type 'MobileCommerce'() :: #'merchstat_MobileCommerce'{}.

%% struct 'MobilePhone'
-type 'MobilePhone'() :: #'merchstat_MobilePhone'{}.

%% struct 'BankCard'
-type 'BankCard'() :: #'merchstat_BankCard'{}.

%% struct 'PaymentTerminal'
-type 'PaymentTerminal'() :: #'merchstat_PaymentTerminal'{}.

%% struct 'DigitalWallet'
-type 'DigitalWallet'() :: #'merchstat_DigitalWallet'{}.

%% struct 'RussianBankAccount'
-type 'RussianBankAccount'() :: #'merchstat_RussianBankAccount'{}.

%% struct 'InternationalBankAccount'
-type 'InternationalBankAccount'() :: #'merchstat_InternationalBankAccount'{}.

%% struct 'InternationalBankDetails'
-type 'InternationalBankDetails'() :: #'merchstat_InternationalBankDetails'{}.

%% struct 'StatInvoice'
-type 'StatInvoice'() :: #'merchstat_StatInvoice'{}.

%% struct 'EnrichedStatInvoice'
-type 'EnrichedStatInvoice'() :: #'merchstat_EnrichedStatInvoice'{}.

%% struct 'InvoiceUnpaid'
-type 'InvoiceUnpaid'() :: #'merchstat_InvoiceUnpaid'{}.

%% struct 'InvoicePaid'
-type 'InvoicePaid'() :: #'merchstat_InvoicePaid'{}.

%% struct 'InvoiceCancelled'
-type 'InvoiceCancelled'() :: #'merchstat_InvoiceCancelled'{}.

%% struct 'InvoiceFulfilled'
-type 'InvoiceFulfilled'() :: #'merchstat_InvoiceFulfilled'{}.

%% union 'InvoiceStatus'
-type 'InvoiceStatus'() ::
    {'unpaid', 'InvoiceUnpaid'()} |
    {'paid', 'InvoicePaid'()} |
    {'cancelled', 'InvoiceCancelled'()} |
    {'fulfilled', 'InvoiceFulfilled'()}.

%% struct 'StatCustomer'
-type 'StatCustomer'() :: #'merchstat_StatCustomer'{}.

%% struct 'StatPayout'
-type 'StatPayout'() :: #'merchstat_StatPayout'{}.

%% struct 'PayoutSummaryItem'
-type 'PayoutSummaryItem'() :: #'merchstat_PayoutSummaryItem'{}.

%% union 'PayoutType'
-type 'PayoutType'() ::
    {'bank_card', 'PayoutCard'()} |
    {'bank_account', 'PayoutAccount'()} |
    {'wallet', 'Wallet'()}.

%% struct 'Wallet'
-type 'Wallet'() :: #'merchstat_Wallet'{}.

%% struct 'PayoutCard'
-type 'PayoutCard'() :: #'merchstat_PayoutCard'{}.

%% union 'PayoutAccount'
-type 'PayoutAccount'() ::
    {'russian_payout_account', 'RussianPayoutAccount'()} |
    {'international_payout_account', 'InternationalPayoutAccount'()}.

%% struct 'RussianPayoutAccount'
-type 'RussianPayoutAccount'() :: #'merchstat_RussianPayoutAccount'{}.

%% struct 'InternationalPayoutAccount'
-type 'InternationalPayoutAccount'() :: #'merchstat_InternationalPayoutAccount'{}.

%% union 'PayoutStatus'
-type 'PayoutStatus'() ::
    {'unpaid', 'PayoutUnpaid'()} |
    {'paid', 'PayoutPaid'()} |
    {'cancelled', 'PayoutCancelled'()} |
    {'confirmed', 'PayoutConfirmed'()}.

%% struct 'PayoutUnpaid'
-type 'PayoutUnpaid'() :: #'merchstat_PayoutUnpaid'{}.

%% struct 'PayoutPaid'
-type 'PayoutPaid'() :: #'merchstat_PayoutPaid'{}.

%% struct 'PayoutCancelled'
-type 'PayoutCancelled'() :: #'merchstat_PayoutCancelled'{}.

%% struct 'PayoutConfirmed'
-type 'PayoutConfirmed'() :: #'merchstat_PayoutConfirmed'{}.

%% struct 'StatRefund'
-type 'StatRefund'() :: #'merchstat_StatRefund'{}.

%% union 'InvoicePaymentRefundStatus'
-type 'InvoicePaymentRefundStatus'() ::
    {'pending', 'InvoicePaymentRefundPending'()} |
    {'succeeded', 'InvoicePaymentRefundSucceeded'()} |
    {'failed', 'InvoicePaymentRefundFailed'()}.

%% struct 'InvoicePaymentRefundPending'
-type 'InvoicePaymentRefundPending'() :: #'merchstat_InvoicePaymentRefundPending'{}.

%% struct 'InvoicePaymentRefundSucceeded'
-type 'InvoicePaymentRefundSucceeded'() :: #'merchstat_InvoicePaymentRefundSucceeded'{}.

%% struct 'InvoicePaymentRefundFailed'
-type 'InvoicePaymentRefundFailed'() :: #'merchstat_InvoicePaymentRefundFailed'{}.

%% struct 'StatChargeback'
-type 'StatChargeback'() :: #'merchstat_StatChargeback'{}.

%% struct 'StatRequest'
-type 'StatRequest'() :: #'merchstat_StatRequest'{}.

%% struct 'StatResponse'
-type 'StatResponse'() :: #'merchstat_StatResponse'{}.

%% union 'StatResponseData'
-type 'StatResponseData'() ::
    {'payments', ['StatPayment'()]} |
    {'invoices', ['StatInvoice'()]} |
    {'customers', ['StatCustomer'()]} |
    {'records', ['StatInfo'()]} |
    {'payouts', ['StatPayout'()]} |
    {'refunds', ['StatRefund'()]} |
    {'enriched_invoices', ['EnrichedStatInvoice'()]} |
    {'chargebacks', ['StatChargeback'()]}.

%% exception 'BadToken'
-type 'BadToken'() :: #'merchstat_BadToken'{}.

%%
%% services and functions
%%
-type service_name() ::
    'MerchantStatistics' |
    'DarkMessiahStatistics'.

-type function_name() ::
    'MerchantStatistics_service_functions'() |
    'DarkMessiahStatistics_service_functions'().

-type 'MerchantStatistics_service_functions'() ::
    'GetPayments' |
    'GetInvoices' |
    'GetCustomers' |
    'GetPayouts' |
    'GetChargebacks' |
    'GetStatistics'.

-export_type(['MerchantStatistics_service_functions'/0]).

-type 'DarkMessiahStatistics_service_functions'() ::
    'GetByQuery'.

-export_type(['DarkMessiahStatistics_service_functions'/0]).


-type struct_flavour() :: struct | exception | union.
-type field_num() :: pos_integer().
-type field_name() :: atom().
-type field_req() :: required | optional | undefined.

-type type_ref() :: {module(), atom()}.
-type field_type() ::
    bool | byte | i16 | i32 | i64 | string | double |
    {enum, type_ref()} |
    {struct, struct_flavour(), type_ref()} |
    {list, field_type()} |
    {set, field_type()} |
    {map, field_type(), field_type()}.

-type struct_field_info() ::
    {field_num(), field_req(), field_type(), field_name(), any()}.
-type struct_info() ::
    {struct, struct_flavour(), [struct_field_info()]}.

-type enum_choice() ::
    'OnHoldExpiration'() |
    'MobileOperator'() |
    'CryptoCurrency'() |
    'TerminalPaymentProvider'() |
    'DigitalWalletProvider'() |
    'OperationType'().

-type enum_field_info() ::
    {enum_choice(), integer()}.
-type enum_info() ::
    {enum, [enum_field_info()]}.

-spec typedefs() -> [typedef_name()].

typedefs() ->
    [
        'DigitalWalletID',
        'PayoutID',
        'PayoutSummary',
        'StatInfo',
        'InvalidRequest'
    ].

-spec enums() -> [enum_name()].

enums() ->
    [
        'OnHoldExpiration',
        'MobileOperator',
        'CryptoCurrency',
        'TerminalPaymentProvider',
        'DigitalWalletProvider',
        'OperationType'
    ].

-spec structs() -> [struct_name()].

structs() ->
    [
        'StatPayment',
        'Payer',
        'RecurrentParentPayment',
        'RecurrentPayer',
        'PaymentResourcePayer',
        'CustomerPayer',
        'InvoicePaymentFlow',
        'InvoicePaymentFlowInstant',
        'InvoicePaymentFlowHold',
        'OperationFailure',
        'OperationTimeout',
        'InvoicePaymentPending',
        'InvoicePaymentProcessed',
        'InvoicePaymentCaptured',
        'InvoicePaymentCancelled',
        'InvoicePaymentRefunded',
        'InvoicePaymentChargedBack',
        'InvoicePaymentFailed',
        'InvoicePaymentStatus',
        'PaymentTool',
        'MobileCommerce',
        'MobilePhone',
        'BankCard',
        'PaymentTerminal',
        'DigitalWallet',
        'RussianBankAccount',
        'InternationalBankAccount',
        'InternationalBankDetails',
        'StatInvoice',
        'EnrichedStatInvoice',
        'InvoiceUnpaid',
        'InvoicePaid',
        'InvoiceCancelled',
        'InvoiceFulfilled',
        'InvoiceStatus',
        'StatCustomer',
        'StatPayout',
        'PayoutSummaryItem',
        'PayoutType',
        'Wallet',
        'PayoutCard',
        'PayoutAccount',
        'RussianPayoutAccount',
        'InternationalPayoutAccount',
        'PayoutStatus',
        'PayoutUnpaid',
        'PayoutPaid',
        'PayoutCancelled',
        'PayoutConfirmed',
        'StatRefund',
        'InvoicePaymentRefundStatus',
        'InvoicePaymentRefundPending',
        'InvoicePaymentRefundSucceeded',
        'InvoicePaymentRefundFailed',
        'StatChargeback',
        'StatRequest',
        'StatResponse',
        'StatResponseData'
    ].

-spec services() -> [service_name()].

services() ->
    [
        'MerchantStatistics',
        'DarkMessiahStatistics'
    ].

-spec namespace() -> namespace().

namespace() ->
    'merchstat'.

-spec typedef_info(typedef_name()) -> field_type() | no_return().

typedef_info('DigitalWalletID') ->
    string;

typedef_info('PayoutID') ->
    string;

typedef_info('PayoutSummary') ->
    {list, {struct, struct, {dmsl_merch_stat_thrift, 'PayoutSummaryItem'}}};

typedef_info('StatInfo') ->
    {map, string, string};

typedef_info('InvalidRequest') ->
    {struct, exception, {dmsl_base_thrift, 'InvalidRequest'}};

typedef_info(_) -> erlang:error(badarg).

-spec enum_info(enum_name()) -> enum_info() | no_return().

enum_info('OnHoldExpiration') ->
    {enum, [
        {'cancel', 0},
        {'capture', 1}
    ]};

enum_info('MobileOperator') ->
    {enum, [
        {'mts', 1},
        {'beeline', 2},
        {'megafone', 3},
        {'tele2', 4},
        {'yota', 5}
    ]};

enum_info('CryptoCurrency') ->
    {enum, [
        {'bitcoin', 0},
        {'litecoin', 1},
        {'bitcoin_cash', 2},
        {'ripple', 3},
        {'ethereum', 4},
        {'zcash', 5}
    ]};

enum_info('TerminalPaymentProvider') ->
    {enum, [
        {'euroset', 0},
        {'wechat', 1},
        {'alipay', 2},
        {'zotapay', 3},
        {'qps', 4},
        {'uzcard', 5},
        {'rbs', 6}
    ]};

enum_info('DigitalWalletProvider') ->
    {enum, [
        {'qiwi', 0}
    ]};

enum_info('OperationType') ->
    {enum, [
        {'payment', 0},
        {'refund', 1}
    ]};

enum_info(_) -> erlang:error(badarg).

-spec struct_info(struct_name() | exception_name()) -> struct_info() | no_return().

struct_info('StatPayment') ->
    {struct, struct, [
        {1, required, string, 'id', undefined},
        {2, required, string, 'invoice_id', undefined},
        {3, required, string, 'owner_id', undefined},
        {4, required, string, 'shop_id', undefined},
        {5, required, string, 'created_at', undefined},
        {6, required, {struct, union, {dmsl_merch_stat_thrift, 'InvoicePaymentStatus'}}, 'status', undefined},
        {7, required, i64, 'amount', undefined},
        {8, required, i64, 'fee', undefined},
        {9, required, string, 'currency_symbolic_code', undefined},
        {10, required, {struct, union, {dmsl_merch_stat_thrift, 'Payer'}}, 'payer', undefined},
        {12, optional, {struct, struct, {dmsl_base_thrift, 'Content'}}, 'context', undefined},
        {13, optional, {struct, struct, {dmsl_geo_ip_thrift, 'LocationInfo'}}, 'location_info', undefined},
        {14, required, {struct, union, {dmsl_merch_stat_thrift, 'InvoicePaymentFlow'}}, 'flow', undefined},
        {15, optional, string, 'short_id', undefined},
        {16, optional, bool, 'make_recurrent', undefined},
        {17, required, i64, 'domain_revision', undefined},
        {18, optional, {struct, struct, {dmsl_domain_thrift, 'InvoiceCart'}}, 'cart', undefined},
        {19, optional, {struct, struct, {dmsl_domain_thrift, 'AdditionalTransactionInfo'}}, 'additional_transaction_info', undefined},
        {20, optional, string, 'external_id', undefined},
        {21, optional, {struct, struct, {dmsl_domain_thrift, 'ProviderRef'}}, 'provider_id', undefined},
        {22, optional, {struct, struct, {dmsl_domain_thrift, 'TerminalRef'}}, 'terminal_id', undefined}
    ]};

struct_info('Payer') ->
    {struct, union, [
        {1, optional, {struct, struct, {dmsl_merch_stat_thrift, 'PaymentResourcePayer'}}, 'payment_resource', undefined},
        {2, optional, {struct, struct, {dmsl_merch_stat_thrift, 'CustomerPayer'}}, 'customer', undefined},
        {3, optional, {struct, struct, {dmsl_merch_stat_thrift, 'RecurrentPayer'}}, 'recurrent', undefined}
    ]};

struct_info('RecurrentParentPayment') ->
    {struct, struct, [
        {1, required, string, 'invoice_id', undefined},
        {2, required, string, 'payment_id', undefined}
    ]};

struct_info('RecurrentPayer') ->
    {struct, struct, [
        {1, required, {struct, union, {dmsl_merch_stat_thrift, 'PaymentTool'}}, 'payment_tool', undefined},
        {2, required, {struct, struct, {dmsl_merch_stat_thrift, 'RecurrentParentPayment'}}, 'recurrent_parent', undefined},
        {3, optional, string, 'phone_number', undefined},
        {4, optional, string, 'email', undefined}
    ]};

struct_info('PaymentResourcePayer') ->
    {struct, struct, [
        {1, required, {struct, union, {dmsl_merch_stat_thrift, 'PaymentTool'}}, 'payment_tool', undefined},
        {2, optional, string, 'ip_address', undefined},
        {3, optional, string, 'fingerprint', undefined},
        {4, optional, string, 'phone_number', undefined},
        {5, optional, string, 'email', undefined},
        {6, optional, string, 'session_id', undefined}
    ]};

struct_info('CustomerPayer') ->
    {struct, struct, [
        {1, required, string, 'customer_id', undefined},
        {2, required, {struct, union, {dmsl_merch_stat_thrift, 'PaymentTool'}}, 'payment_tool', undefined},
        {3, optional, string, 'phone_number', undefined},
        {4, optional, string, 'email', undefined}
    ]};

struct_info('InvoicePaymentFlow') ->
    {struct, union, [
        {1, optional, {struct, struct, {dmsl_merch_stat_thrift, 'InvoicePaymentFlowInstant'}}, 'instant', undefined},
        {2, optional, {struct, struct, {dmsl_merch_stat_thrift, 'InvoicePaymentFlowHold'}}, 'hold', undefined}
    ]};

struct_info('InvoicePaymentFlowInstant') ->
    {struct, struct, []};

struct_info('InvoicePaymentFlowHold') ->
    {struct, struct, [
        {1, required, {enum, {dmsl_merch_stat_thrift, 'OnHoldExpiration'}}, 'on_hold_expiration', undefined},
        {2, required, string, 'held_until', undefined}
    ]};

struct_info('OperationFailure') ->
    {struct, union, [
        {1, optional, {struct, struct, {dmsl_merch_stat_thrift, 'OperationTimeout'}}, 'operation_timeout', undefined},
        {2, optional, {struct, struct, {dmsl_domain_thrift, 'Failure'}}, 'failure', undefined}
    ]};

struct_info('OperationTimeout') ->
    {struct, struct, []};

struct_info('InvoicePaymentPending') ->
    {struct, struct, []};

struct_info('InvoicePaymentProcessed') ->
    {struct, struct, [
        {1, optional, string, 'at', undefined}
    ]};

struct_info('InvoicePaymentCaptured') ->
    {struct, struct, [
        {1, optional, string, 'at', undefined}
    ]};

struct_info('InvoicePaymentCancelled') ->
    {struct, struct, [
        {1, optional, string, 'at', undefined}
    ]};

struct_info('InvoicePaymentRefunded') ->
    {struct, struct, [
        {1, optional, string, 'at', undefined}
    ]};

struct_info('InvoicePaymentChargedBack') ->
    {struct, struct, [
        {1, optional, string, 'at', undefined}
    ]};

struct_info('InvoicePaymentFailed') ->
    {struct, struct, [
        {1, required, {struct, union, {dmsl_merch_stat_thrift, 'OperationFailure'}}, 'failure', undefined},
        {2, optional, string, 'at', undefined}
    ]};

struct_info('InvoicePaymentStatus') ->
    {struct, union, [
        {1, optional, {struct, struct, {dmsl_merch_stat_thrift, 'InvoicePaymentPending'}}, 'pending', undefined},
        {4, optional, {struct, struct, {dmsl_merch_stat_thrift, 'InvoicePaymentProcessed'}}, 'processed', undefined},
        {2, optional, {struct, struct, {dmsl_merch_stat_thrift, 'InvoicePaymentCaptured'}}, 'captured', undefined},
        {5, optional, {struct, struct, {dmsl_merch_stat_thrift, 'InvoicePaymentCancelled'}}, 'cancelled', undefined},
        {6, optional, {struct, struct, {dmsl_merch_stat_thrift, 'InvoicePaymentRefunded'}}, 'refunded', undefined},
        {3, optional, {struct, struct, {dmsl_merch_stat_thrift, 'InvoicePaymentFailed'}}, 'failed', undefined},
        {7, optional, {struct, struct, {dmsl_merch_stat_thrift, 'InvoicePaymentChargedBack'}}, 'charged_back', undefined}
    ]};

struct_info('PaymentTool') ->
    {struct, union, [
        {1, optional, {struct, struct, {dmsl_merch_stat_thrift, 'BankCard'}}, 'bank_card', undefined},
        {2, optional, {struct, struct, {dmsl_merch_stat_thrift, 'PaymentTerminal'}}, 'payment_terminal', undefined},
        {3, optional, {struct, struct, {dmsl_merch_stat_thrift, 'DigitalWallet'}}, 'digital_wallet', undefined},
        {4, optional, {enum, {dmsl_merch_stat_thrift, 'CryptoCurrency'}}, 'crypto_currency', undefined},
        {5, optional, {struct, struct, {dmsl_merch_stat_thrift, 'MobileCommerce'}}, 'mobile_commerce', undefined}
    ]};

struct_info('MobileCommerce') ->
    {struct, struct, [
        {1, required, {enum, {dmsl_merch_stat_thrift, 'MobileOperator'}}, 'operator', undefined},
        {2, required, {struct, struct, {dmsl_merch_stat_thrift, 'MobilePhone'}}, 'phone', undefined}
    ]};

struct_info('MobilePhone') ->
    {struct, struct, [
        {1, required, string, 'cc', undefined},
        {2, required, string, 'ctn', undefined}
    ]};

struct_info('BankCard') ->
    {struct, struct, [
        {1, required, string, 'token', undefined},
        {6, optional, {struct, struct, {dmsl_domain_thrift, 'PaymentSystemRef'}}, 'payment_system', undefined},
        {3, required, string, 'bin', undefined},
        {4, required, string, 'masked_pan', undefined},
        {7, optional, {struct, struct, {dmsl_domain_thrift, 'BankCardTokenServiceRef'}}, 'payment_token', undefined},
        {2, optional, {enum, {dmsl_domain_thrift, 'LegacyBankCardPaymentSystem'}}, 'payment_system_deprecated', undefined},
        {5, optional, {enum, {dmsl_domain_thrift, 'LegacyBankCardTokenProvider'}}, 'token_provider_deprecated', undefined}
    ]};

struct_info('PaymentTerminal') ->
    {struct, struct, [
        {1, required, {enum, {dmsl_merch_stat_thrift, 'TerminalPaymentProvider'}}, 'terminal_type', undefined}
    ]};

struct_info('DigitalWallet') ->
    {struct, struct, [
        {1, required, {enum, {dmsl_merch_stat_thrift, 'DigitalWalletProvider'}}, 'provider', undefined},
        {2, required, string, 'id', undefined}
    ]};

struct_info('RussianBankAccount') ->
    {struct, struct, [
        {1, required, string, 'account', undefined},
        {2, required, string, 'bank_name', undefined},
        {3, required, string, 'bank_post_account', undefined},
        {4, required, string, 'bank_bik', undefined}
    ]};

struct_info('InternationalBankAccount') ->
    {struct, struct, [
        {1, optional, string, 'number', undefined},
        {2, optional, {struct, struct, {dmsl_merch_stat_thrift, 'InternationalBankDetails'}}, 'bank', undefined},
        {3, optional, {struct, struct, {dmsl_merch_stat_thrift, 'InternationalBankAccount'}}, 'correspondent_account', undefined},
        {4, optional, string, 'iban', undefined},
        {5, optional, string, 'account_holder', undefined}
    ]};

struct_info('InternationalBankDetails') ->
    {struct, struct, [
        {1, optional, string, 'bic', undefined},
        {2, optional, {enum, {dmsl_domain_thrift, 'CountryCode'}}, 'country', undefined},
        {3, optional, string, 'name', undefined},
        {4, optional, string, 'address', undefined},
        {5, optional, string, 'aba_rtn', undefined}
    ]};

struct_info('StatInvoice') ->
    {struct, struct, [
        {1, required, string, 'id', undefined},
        {2, required, string, 'owner_id', undefined},
        {3, required, string, 'shop_id', undefined},
        {4, required, string, 'created_at', undefined},
        {5, required, {struct, union, {dmsl_merch_stat_thrift, 'InvoiceStatus'}}, 'status', undefined},
        {6, required, string, 'product', undefined},
        {7, optional, string, 'description', undefined},
        {8, required, string, 'due', undefined},
        {9, required, i64, 'amount', undefined},
        {10, required, string, 'currency_symbolic_code', undefined},
        {11, optional, {struct, struct, {dmsl_base_thrift, 'Content'}}, 'context', undefined},
        {12, optional, {struct, struct, {dmsl_domain_thrift, 'InvoiceCart'}}, 'cart', undefined},
        {13, optional, string, 'external_id', undefined},
        {14, optional, {struct, struct, {dmsl_domain_thrift, 'Allocation'}}, 'allocation', undefined}
    ]};

struct_info('EnrichedStatInvoice') ->
    {struct, struct, [
        {1, required, {struct, struct, {dmsl_merch_stat_thrift, 'StatInvoice'}}, 'invoice', undefined},
        {2, required, {list, {struct, struct, {dmsl_merch_stat_thrift, 'StatPayment'}}}, 'payments', undefined},
        {3, required, {list, {struct, struct, {dmsl_merch_stat_thrift, 'StatRefund'}}}, 'refunds', undefined}
    ]};

struct_info('InvoiceUnpaid') ->
    {struct, struct, []};

struct_info('InvoicePaid') ->
    {struct, struct, [
        {1, optional, string, 'at', undefined}
    ]};

struct_info('InvoiceCancelled') ->
    {struct, struct, [
        {1, required, string, 'details', undefined},
        {2, optional, string, 'at', undefined}
    ]};

struct_info('InvoiceFulfilled') ->
    {struct, struct, [
        {1, required, string, 'details', undefined},
        {2, optional, string, 'at', undefined}
    ]};

struct_info('InvoiceStatus') ->
    {struct, union, [
        {1, optional, {struct, struct, {dmsl_merch_stat_thrift, 'InvoiceUnpaid'}}, 'unpaid', undefined},
        {2, optional, {struct, struct, {dmsl_merch_stat_thrift, 'InvoicePaid'}}, 'paid', undefined},
        {3, optional, {struct, struct, {dmsl_merch_stat_thrift, 'InvoiceCancelled'}}, 'cancelled', undefined},
        {4, optional, {struct, struct, {dmsl_merch_stat_thrift, 'InvoiceFulfilled'}}, 'fulfilled', undefined}
    ]};

struct_info('StatCustomer') ->
    {struct, struct, [
        {1, required, string, 'id', undefined},
        {2, required, string, 'created_at', undefined}
    ]};

struct_info('StatPayout') ->
    {struct, struct, [
        {1, required, string, 'id', undefined},
        {2, required, string, 'party_id', undefined},
        {3, required, string, 'shop_id', undefined},
        {4, required, string, 'created_at', undefined},
        {5, required, {struct, union, {dmsl_merch_stat_thrift, 'PayoutStatus'}}, 'status', undefined},
        {6, required, i64, 'amount', undefined},
        {7, required, i64, 'fee', undefined},
        {8, required, string, 'currency_symbolic_code', undefined},
        {9, required, {struct, union, {dmsl_merch_stat_thrift, 'PayoutType'}}, 'type', undefined},
        {10, optional, {list, {struct, struct, {dmsl_merch_stat_thrift, 'PayoutSummaryItem'}}}, 'summary', undefined}
    ]};

struct_info('PayoutSummaryItem') ->
    {struct, struct, [
        {1, required, i64, 'amount', undefined},
        {2, required, i64, 'fee', undefined},
        {3, required, string, 'currency_symbolic_code', undefined},
        {4, required, string, 'from_time', undefined},
        {5, required, string, 'to_time', undefined},
        {6, required, {enum, {dmsl_merch_stat_thrift, 'OperationType'}}, 'operation_type', undefined},
        {7, required, i32, 'count', undefined}
    ]};

struct_info('PayoutType') ->
    {struct, union, [
        {1, optional, {struct, struct, {dmsl_merch_stat_thrift, 'PayoutCard'}}, 'bank_card', undefined},
        {2, optional, {struct, union, {dmsl_merch_stat_thrift, 'PayoutAccount'}}, 'bank_account', undefined},
        {3, optional, {struct, struct, {dmsl_merch_stat_thrift, 'Wallet'}}, 'wallet', undefined}
    ]};

struct_info('Wallet') ->
    {struct, struct, [
        {1, required, string, 'wallet_id', undefined}
    ]};

struct_info('PayoutCard') ->
    {struct, struct, [
        {1, required, {struct, struct, {dmsl_merch_stat_thrift, 'BankCard'}}, 'card', undefined}
    ]};

struct_info('PayoutAccount') ->
    {struct, union, [
        {1, optional, {struct, struct, {dmsl_merch_stat_thrift, 'RussianPayoutAccount'}}, 'russian_payout_account', undefined},
        {2, optional, {struct, struct, {dmsl_merch_stat_thrift, 'InternationalPayoutAccount'}}, 'international_payout_account', undefined}
    ]};

struct_info('RussianPayoutAccount') ->
    {struct, struct, [
        {1, required, {struct, struct, {dmsl_merch_stat_thrift, 'RussianBankAccount'}}, 'bank_account', undefined},
        {2, required, string, 'inn', undefined},
        {3, required, string, 'purpose', undefined}
    ]};

struct_info('InternationalPayoutAccount') ->
    {struct, struct, [
        {1, required, {struct, struct, {dmsl_merch_stat_thrift, 'InternationalBankAccount'}}, 'bank_account', undefined},
        {2, required, string, 'purpose', undefined}
    ]};

struct_info('PayoutStatus') ->
    {struct, union, [
        {1, optional, {struct, struct, {dmsl_merch_stat_thrift, 'PayoutUnpaid'}}, 'unpaid', undefined},
        {2, optional, {struct, struct, {dmsl_merch_stat_thrift, 'PayoutPaid'}}, 'paid', undefined},
        {3, optional, {struct, struct, {dmsl_merch_stat_thrift, 'PayoutCancelled'}}, 'cancelled', undefined},
        {4, optional, {struct, struct, {dmsl_merch_stat_thrift, 'PayoutConfirmed'}}, 'confirmed', undefined}
    ]};

struct_info('PayoutUnpaid') ->
    {struct, struct, []};

struct_info('PayoutPaid') ->
    {struct, struct, []};

struct_info('PayoutCancelled') ->
    {struct, struct, [
        {1, required, string, 'details', undefined}
    ]};

struct_info('PayoutConfirmed') ->
    {struct, struct, []};

struct_info('StatRefund') ->
    {struct, struct, [
        {1, required, string, 'id', undefined},
        {2, required, string, 'payment_id', undefined},
        {3, required, string, 'invoice_id', undefined},
        {4, required, string, 'owner_id', undefined},
        {5, required, string, 'shop_id', undefined},
        {6, required, {struct, union, {dmsl_merch_stat_thrift, 'InvoicePaymentRefundStatus'}}, 'status', undefined},
        {7, required, string, 'created_at', undefined},
        {8, required, i64, 'amount', undefined},
        {9, required, i64, 'fee', undefined},
        {10, required, string, 'currency_symbolic_code', undefined},
        {11, optional, string, 'reason', undefined},
        {12, optional, {struct, struct, {dmsl_domain_thrift, 'InvoiceCart'}}, 'cart', undefined},
        {13, optional, string, 'external_id', undefined}
    ]};

struct_info('InvoicePaymentRefundStatus') ->
    {struct, union, [
        {1, optional, {struct, struct, {dmsl_merch_stat_thrift, 'InvoicePaymentRefundPending'}}, 'pending', undefined},
        {2, optional, {struct, struct, {dmsl_merch_stat_thrift, 'InvoicePaymentRefundSucceeded'}}, 'succeeded', undefined},
        {3, optional, {struct, struct, {dmsl_merch_stat_thrift, 'InvoicePaymentRefundFailed'}}, 'failed', undefined}
    ]};

struct_info('InvoicePaymentRefundPending') ->
    {struct, struct, []};

struct_info('InvoicePaymentRefundSucceeded') ->
    {struct, struct, [
        {1, required, string, 'at', undefined}
    ]};

struct_info('InvoicePaymentRefundFailed') ->
    {struct, struct, [
        {1, required, {struct, union, {dmsl_merch_stat_thrift, 'OperationFailure'}}, 'failure', undefined},
        {2, required, string, 'at', undefined}
    ]};

struct_info('StatChargeback') ->
    {struct, struct, [
        {1, required, string, 'invoice_id', undefined},
        {2, required, string, 'payment_id', undefined},
        {3, required, string, 'chargeback_id', undefined},
        {4, required, string, 'party_id', undefined},
        {5, required, string, 'shop_id', undefined},
        {6, required, {struct, union, {dmsl_domain_thrift, 'InvoicePaymentChargebackStatus'}}, 'chargeback_status', undefined},
        {7, required, string, 'created_at', undefined},
        {8, optional, {struct, struct, {dmsl_domain_thrift, 'InvoicePaymentChargebackReason'}}, 'chargeback_reason', undefined},
        {10, required, i64, 'levy_amount', undefined},
        {11, required, {struct, struct, {dmsl_domain_thrift, 'Currency'}}, 'levy_currency_code', undefined},
        {12, required, i64, 'amount', undefined},
        {13, required, {struct, struct, {dmsl_domain_thrift, 'Currency'}}, 'currency_code', undefined},
        {14, optional, i64, 'fee', undefined},
        {15, optional, i64, 'provider_fee', undefined},
        {16, optional, i64, 'external_fee', undefined},
        {17, optional, {struct, union, {dmsl_domain_thrift, 'InvoicePaymentChargebackStage'}}, 'stage', undefined},
        {18, optional, {struct, struct, {dmsl_base_thrift, 'Content'}}, 'content', undefined},
        {19, optional, string, 'external_id', undefined}
    ]};

struct_info('StatRequest') ->
    {struct, struct, [
        {1, required, string, 'dsl', undefined},
        {2, optional, string, 'continuation_token', undefined}
    ]};

struct_info('StatResponse') ->
    {struct, struct, [
        {1, required, {struct, union, {dmsl_merch_stat_thrift, 'StatResponseData'}}, 'data', undefined},
        {2, optional, i32, 'total_count', undefined},
        {3, optional, string, 'continuation_token', undefined}
    ]};

struct_info('StatResponseData') ->
    {struct, union, [
        {1, optional, {list, {struct, struct, {dmsl_merch_stat_thrift, 'StatPayment'}}}, 'payments', undefined},
        {2, optional, {list, {struct, struct, {dmsl_merch_stat_thrift, 'StatInvoice'}}}, 'invoices', undefined},
        {3, optional, {list, {struct, struct, {dmsl_merch_stat_thrift, 'StatCustomer'}}}, 'customers', undefined},
        {4, optional, {list, {map, string, string}}, 'records', undefined},
        {5, optional, {list, {struct, struct, {dmsl_merch_stat_thrift, 'StatPayout'}}}, 'payouts', undefined},
        {6, optional, {list, {struct, struct, {dmsl_merch_stat_thrift, 'StatRefund'}}}, 'refunds', undefined},
        {7, optional, {list, {struct, struct, {dmsl_merch_stat_thrift, 'EnrichedStatInvoice'}}}, 'enriched_invoices', undefined},
        {8, optional, {list, {struct, struct, {dmsl_merch_stat_thrift, 'StatChargeback'}}}, 'chargebacks', undefined}
    ]};

struct_info('BadToken') ->
    {struct, exception, [
        {1, undefined, string, 'reason', undefined}
    ]};

struct_info(_) -> erlang:error(badarg).

-spec record_name(struct_name() | exception_name()) -> atom() | no_return().

record_name('StatPayment') ->
    'merchstat_StatPayment';

record_name('RecurrentParentPayment') ->
    'merchstat_RecurrentParentPayment';

record_name('RecurrentPayer') ->
    'merchstat_RecurrentPayer';

record_name('PaymentResourcePayer') ->
    'merchstat_PaymentResourcePayer';

record_name('CustomerPayer') ->
    'merchstat_CustomerPayer';

record_name('InvoicePaymentFlowInstant') ->
    'merchstat_InvoicePaymentFlowInstant';

record_name('InvoicePaymentFlowHold') ->
    'merchstat_InvoicePaymentFlowHold';

record_name('OperationTimeout') ->
    'merchstat_OperationTimeout';

record_name('InvoicePaymentPending') ->
    'merchstat_InvoicePaymentPending';

record_name('InvoicePaymentProcessed') ->
    'merchstat_InvoicePaymentProcessed';

record_name('InvoicePaymentCaptured') ->
    'merchstat_InvoicePaymentCaptured';

record_name('InvoicePaymentCancelled') ->
    'merchstat_InvoicePaymentCancelled';

record_name('InvoicePaymentRefunded') ->
    'merchstat_InvoicePaymentRefunded';

record_name('InvoicePaymentChargedBack') ->
    'merchstat_InvoicePaymentChargedBack';

record_name('InvoicePaymentFailed') ->
    'merchstat_InvoicePaymentFailed';

record_name('MobileCommerce') ->
    'merchstat_MobileCommerce';

record_name('MobilePhone') ->
    'merchstat_MobilePhone';

record_name('BankCard') ->
    'merchstat_BankCard';

record_name('PaymentTerminal') ->
    'merchstat_PaymentTerminal';

record_name('DigitalWallet') ->
    'merchstat_DigitalWallet';

record_name('RussianBankAccount') ->
    'merchstat_RussianBankAccount';

record_name('InternationalBankAccount') ->
    'merchstat_InternationalBankAccount';

record_name('InternationalBankDetails') ->
    'merchstat_InternationalBankDetails';

record_name('StatInvoice') ->
    'merchstat_StatInvoice';

record_name('EnrichedStatInvoice') ->
    'merchstat_EnrichedStatInvoice';

record_name('InvoiceUnpaid') ->
    'merchstat_InvoiceUnpaid';

record_name('InvoicePaid') ->
    'merchstat_InvoicePaid';

record_name('InvoiceCancelled') ->
    'merchstat_InvoiceCancelled';

record_name('InvoiceFulfilled') ->
    'merchstat_InvoiceFulfilled';

record_name('StatCustomer') ->
    'merchstat_StatCustomer';

record_name('StatPayout') ->
    'merchstat_StatPayout';

record_name('PayoutSummaryItem') ->
    'merchstat_PayoutSummaryItem';

record_name('Wallet') ->
    'merchstat_Wallet';

record_name('PayoutCard') ->
    'merchstat_PayoutCard';

record_name('RussianPayoutAccount') ->
    'merchstat_RussianPayoutAccount';

record_name('InternationalPayoutAccount') ->
    'merchstat_InternationalPayoutAccount';

record_name('PayoutUnpaid') ->
    'merchstat_PayoutUnpaid';

record_name('PayoutPaid') ->
    'merchstat_PayoutPaid';

record_name('PayoutCancelled') ->
    'merchstat_PayoutCancelled';

record_name('PayoutConfirmed') ->
    'merchstat_PayoutConfirmed';

record_name('StatRefund') ->
    'merchstat_StatRefund';

record_name('InvoicePaymentRefundPending') ->
    'merchstat_InvoicePaymentRefundPending';

record_name('InvoicePaymentRefundSucceeded') ->
    'merchstat_InvoicePaymentRefundSucceeded';

record_name('InvoicePaymentRefundFailed') ->
    'merchstat_InvoicePaymentRefundFailed';

record_name('StatChargeback') ->
    'merchstat_StatChargeback';

record_name('StatRequest') ->
    'merchstat_StatRequest';

record_name('StatResponse') ->
    'merchstat_StatResponse';

record_name('BadToken') ->
    'merchstat_BadToken';

record_name(_) -> error(badarg).

-spec functions(service_name()) -> [function_name()] | no_return().

functions('MerchantStatistics') ->
    [
        'GetPayments',
        'GetInvoices',
        'GetCustomers',
        'GetPayouts',
        'GetChargebacks',
        'GetStatistics'
    ];

functions('DarkMessiahStatistics') ->
    [
        'GetByQuery'
    ];

functions(_) -> error(badarg).

-spec function_info(service_name(), function_name(), params_type | reply_type | exceptions) ->
    struct_info() | no_return().

function_info('MerchantStatistics', 'GetPayments', params_type) ->
    {struct, struct, [
        {1, undefined, {struct, struct, {dmsl_merch_stat_thrift, 'StatRequest'}}, 'req', undefined}
    ]};
function_info('MerchantStatistics', 'GetPayments', reply_type) ->
    {struct, struct, {dmsl_merch_stat_thrift, 'StatResponse'}};
function_info('MerchantStatistics', 'GetPayments', exceptions) ->
    {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_base_thrift, 'InvalidRequest'}}, 'ex1', undefined},
        {3, undefined, {struct, exception, {dmsl_merch_stat_thrift, 'BadToken'}}, 'ex3', undefined}
    ]};
function_info('MerchantStatistics', 'GetInvoices', params_type) ->
    {struct, struct, [
        {1, undefined, {struct, struct, {dmsl_merch_stat_thrift, 'StatRequest'}}, 'req', undefined}
    ]};
function_info('MerchantStatistics', 'GetInvoices', reply_type) ->
    {struct, struct, {dmsl_merch_stat_thrift, 'StatResponse'}};
function_info('MerchantStatistics', 'GetInvoices', exceptions) ->
    {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_base_thrift, 'InvalidRequest'}}, 'ex1', undefined},
        {3, undefined, {struct, exception, {dmsl_merch_stat_thrift, 'BadToken'}}, 'ex3', undefined}
    ]};
function_info('MerchantStatistics', 'GetCustomers', params_type) ->
    {struct, struct, [
        {1, undefined, {struct, struct, {dmsl_merch_stat_thrift, 'StatRequest'}}, 'req', undefined}
    ]};
function_info('MerchantStatistics', 'GetCustomers', reply_type) ->
    {struct, struct, {dmsl_merch_stat_thrift, 'StatResponse'}};
function_info('MerchantStatistics', 'GetCustomers', exceptions) ->
    {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_base_thrift, 'InvalidRequest'}}, 'ex1', undefined},
        {3, undefined, {struct, exception, {dmsl_merch_stat_thrift, 'BadToken'}}, 'ex3', undefined}
    ]};
function_info('MerchantStatistics', 'GetPayouts', params_type) ->
    {struct, struct, [
        {1, undefined, {struct, struct, {dmsl_merch_stat_thrift, 'StatRequest'}}, 'req', undefined}
    ]};
function_info('MerchantStatistics', 'GetPayouts', reply_type) ->
    {struct, struct, {dmsl_merch_stat_thrift, 'StatResponse'}};
function_info('MerchantStatistics', 'GetPayouts', exceptions) ->
    {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_base_thrift, 'InvalidRequest'}}, 'ex1', undefined},
        {3, undefined, {struct, exception, {dmsl_merch_stat_thrift, 'BadToken'}}, 'ex3', undefined}
    ]};
function_info('MerchantStatistics', 'GetChargebacks', params_type) ->
    {struct, struct, [
        {1, undefined, {struct, struct, {dmsl_merch_stat_thrift, 'StatRequest'}}, 'req', undefined}
    ]};
function_info('MerchantStatistics', 'GetChargebacks', reply_type) ->
    {struct, struct, {dmsl_merch_stat_thrift, 'StatResponse'}};
function_info('MerchantStatistics', 'GetChargebacks', exceptions) ->
    {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_base_thrift, 'InvalidRequest'}}, 'ex1', undefined},
        {3, undefined, {struct, exception, {dmsl_merch_stat_thrift, 'BadToken'}}, 'ex3', undefined}
    ]};
function_info('MerchantStatistics', 'GetStatistics', params_type) ->
    {struct, struct, [
        {1, undefined, {struct, struct, {dmsl_merch_stat_thrift, 'StatRequest'}}, 'req', undefined}
    ]};
function_info('MerchantStatistics', 'GetStatistics', reply_type) ->
    {struct, struct, {dmsl_merch_stat_thrift, 'StatResponse'}};
function_info('MerchantStatistics', 'GetStatistics', exceptions) ->
    {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_base_thrift, 'InvalidRequest'}}, 'ex1', undefined},
        {3, undefined, {struct, exception, {dmsl_merch_stat_thrift, 'BadToken'}}, 'ex3', undefined}
    ]};

function_info('DarkMessiahStatistics', 'GetByQuery', params_type) ->
    {struct, struct, [
        {1, undefined, {struct, struct, {dmsl_merch_stat_thrift, 'StatRequest'}}, 'req', undefined}
    ]};
function_info('DarkMessiahStatistics', 'GetByQuery', reply_type) ->
    {struct, struct, {dmsl_merch_stat_thrift, 'StatResponse'}};
function_info('DarkMessiahStatistics', 'GetByQuery', exceptions) ->
    {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_base_thrift, 'InvalidRequest'}}, 'ex1', undefined},
        {3, undefined, {struct, exception, {dmsl_merch_stat_thrift, 'BadToken'}}, 'ex3', undefined}
    ]};

function_info(_Service, _Function, _InfoType) -> erlang:error(badarg).
