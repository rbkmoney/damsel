%%
%% Autogenerated by Thrift Compiler (1.0.0-dev)
%%
%% DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
%%

-module(dmsl_payment_processing_errors_thrift).

-include("dmsl_payment_processing_errors_thrift.hrl").

-export([namespace/0]).
-export([enums/0]).
-export([typedefs/0]).
-export([structs/0]).
-export([services/0]).
-export([typedef_info/1]).
-export([enum_info/1]).
-export([struct_info/1]).
-export([record_name/1]).
-export([functions/1]).
-export([function_info/3]).

-export_type([namespace/0]).
-export_type([typedef_name/0]).
-export_type([enum_name/0]).
-export_type([struct_name/0]).
-export_type([exception_name/0]).
-export_type([service_name/0]).
-export_type([function_name/0]).

-export_type([enum_info/0]).
-export_type([struct_info/0]).

-export_type([
    'PaymentFailure'/0,
    'AuthorizationFailed'/0,
    'LimitExceeded'/0,
    'PaymentToolRejected'/0,
    'BankCardRejected'/0,
    'GeneralFailure'/0
]).

-type namespace() :: 'payprocerr'.

%%
%% typedefs
%%
-type typedef_name() :: none().


%%
%% enums
%%
-type enum_name() :: none().

%%
%% structs, unions and exceptions
%%
-type struct_name() ::
    'PaymentFailure' |
    'AuthorizationFailed' |
    'LimitExceeded' |
    'PaymentToolRejected' |
    'BankCardRejected' |
    'GeneralFailure'.

-type exception_name() :: none().

%% union 'PaymentFailure'
-type 'PaymentFailure'() ::
    {'reject_by_inspector', 'GeneralFailure'()} |
    {'preauthorization_failure', 'GeneralFailure'()} |
    {'authorization_failure', 'AuthorizationFailed'()}.

%% union 'AuthorizationFailed'
-type 'AuthorizationFailed'() ::
    {'unknown', 'GeneralFailure'()} |
    {'merchant_blocked', 'GeneralFailure'()} |
    {'operation_blocked', 'GeneralFailure'()} |
    {'account_not_found', 'GeneralFailure'()} |
    {'account_blocked', 'GeneralFailure'()} |
    {'account_stolen', 'GeneralFailure'()} |
    {'insufficient_funds', 'GeneralFailure'()} |
    {'account_limit_exceeded', 'LimitExceeded'()} |
    {'provider_limit_exceeded', 'LimitExceeded'()} |
    {'payment_tool_reject', 'PaymentToolRejected'()}.

%% union 'LimitExceeded'
-type 'LimitExceeded'() ::
    {'unknown', 'GeneralFailure'()} |
    {'amount', 'GeneralFailure'()} |
    {'number', 'GeneralFailure'()}.

%% union 'PaymentToolRejected'
-type 'PaymentToolRejected'() ::
    {'bank_card_reject', 'BankCardRejected'()}.

%% union 'BankCardRejected'
-type 'BankCardRejected'() ::
    {'invalid_card_number', 'GeneralFailure'()} |
    {'expired_card', 'GeneralFailure'()} |
    {'invalid_card_holder', 'GeneralFailure'()} |
    {'invalid_cvv', 'GeneralFailure'()} |
    {'card_unsupported', 'GeneralFailure'()} |
    {'issuer_not_found', 'GeneralFailure'()}.

%% struct 'GeneralFailure'
-type 'GeneralFailure'() :: #'payprocerr_GeneralFailure'{}.

%%
%% services and functions
%%
-type service_name() :: none().

-type function_name() :: none().


-type struct_flavour() :: struct | exception | union.
-type field_num() :: pos_integer().
-type field_name() :: atom().
-type field_req() :: required | optional | undefined.

-type type_ref() :: {module(), atom()}.
-type field_type() ::
    bool | byte | i16 | i32 | i64 | string | double |
{enum, type_ref()} |
{struct, struct_flavour(), type_ref()} |
{list, field_type()} |
{set, field_type()} |
{map, field_type(), field_type()}.

-type struct_field_info() ::
    {field_num(), field_req(), field_type(), field_name(), any()}.
-type struct_info() ::
    {struct, struct_flavour(), [struct_field_info()]}.

-type enum_choice() :: none().

-type enum_field_info() ::
    {enum_choice(), integer()}.
-type enum_info() ::
    {enum, [enum_field_info()]}.

-spec typedefs() -> [].

typedefs() ->
    [].

-spec enums() -> [].

enums() ->
    [].

-spec structs() -> [struct_name()].

structs() ->
    [
        'PaymentFailure',
        'AuthorizationFailed',
        'LimitExceeded',
        'PaymentToolRejected',
        'BankCardRejected',
        'GeneralFailure'
    ].

-spec services() -> [].

services() ->
    [].

-spec namespace() -> namespace().

namespace() ->
    'payprocerr'.

-spec typedef_info(_) -> no_return().

typedef_info(_) -> erlang:error(badarg).

-spec enum_info(_) -> no_return().

enum_info(_) -> erlang:error(badarg).

-spec struct_info(struct_name() | exception_name()) -> struct_info() | no_return().

struct_info('PaymentFailure') ->
    {struct, union, [
    {1, optional, {struct, struct, {dmsl_payment_processing_errors_thrift, 'GeneralFailure'}}, 'reject_by_inspector', undefined},
    {2, optional, {struct, struct, {dmsl_payment_processing_errors_thrift, 'GeneralFailure'}}, 'preauthorization_failure', undefined},
    {3, optional, {struct, union, {dmsl_payment_processing_errors_thrift, 'AuthorizationFailed'}}, 'authorization_failure', undefined}
]};

struct_info('AuthorizationFailed') ->
    {struct, union, [
    {1, optional, {struct, struct, {dmsl_payment_processing_errors_thrift, 'GeneralFailure'}}, 'unknown', undefined},
    {2, optional, {struct, struct, {dmsl_payment_processing_errors_thrift, 'GeneralFailure'}}, 'merchant_blocked', undefined},
    {3, optional, {struct, struct, {dmsl_payment_processing_errors_thrift, 'GeneralFailure'}}, 'operation_blocked', undefined},
    {4, optional, {struct, struct, {dmsl_payment_processing_errors_thrift, 'GeneralFailure'}}, 'account_not_found', undefined},
    {5, optional, {struct, struct, {dmsl_payment_processing_errors_thrift, 'GeneralFailure'}}, 'account_blocked', undefined},
    {6, optional, {struct, struct, {dmsl_payment_processing_errors_thrift, 'GeneralFailure'}}, 'account_stolen', undefined},
    {7, optional, {struct, struct, {dmsl_payment_processing_errors_thrift, 'GeneralFailure'}}, 'insufficient_funds', undefined},
    {8, optional, {struct, union, {dmsl_payment_processing_errors_thrift, 'LimitExceeded'}}, 'account_limit_exceeded', undefined},
    {9, optional, {struct, union, {dmsl_payment_processing_errors_thrift, 'LimitExceeded'}}, 'provider_limit_exceeded', undefined},
    {10, optional, {struct, union, {dmsl_payment_processing_errors_thrift, 'PaymentToolRejected'}}, 'payment_tool_reject', undefined}
]};

struct_info('LimitExceeded') ->
    {struct, union, [
    {1, optional, {struct, struct, {dmsl_payment_processing_errors_thrift, 'GeneralFailure'}}, 'unknown', undefined},
    {2, optional, {struct, struct, {dmsl_payment_processing_errors_thrift, 'GeneralFailure'}}, 'amount', undefined},
    {3, optional, {struct, struct, {dmsl_payment_processing_errors_thrift, 'GeneralFailure'}}, 'number', undefined}
]};

struct_info('PaymentToolRejected') ->
    {struct, union, [
    {1, optional, {struct, union, {dmsl_payment_processing_errors_thrift, 'BankCardRejected'}}, 'bank_card_reject', undefined}
]};

struct_info('BankCardRejected') ->
    {struct, union, [
    {2, optional, {struct, struct, {dmsl_payment_processing_errors_thrift, 'GeneralFailure'}}, 'invalid_card_number', undefined},
    {3, optional, {struct, struct, {dmsl_payment_processing_errors_thrift, 'GeneralFailure'}}, 'expired_card', undefined},
    {4, optional, {struct, struct, {dmsl_payment_processing_errors_thrift, 'GeneralFailure'}}, 'invalid_card_holder', undefined},
    {5, optional, {struct, struct, {dmsl_payment_processing_errors_thrift, 'GeneralFailure'}}, 'invalid_cvv', undefined},
    {6, optional, {struct, struct, {dmsl_payment_processing_errors_thrift, 'GeneralFailure'}}, 'card_unsupported', undefined},
    {7, optional, {struct, struct, {dmsl_payment_processing_errors_thrift, 'GeneralFailure'}}, 'issuer_not_found', undefined}
]};

struct_info('GeneralFailure') ->
    {struct, struct, []};

struct_info(_) -> erlang:error(badarg).

-spec record_name(struct_name() | exception_name()) -> atom() | no_return().

record_name('GeneralFailure') ->
    'payprocerr_GeneralFailure';

record_name(_) -> error(badarg).
    
    -spec functions(_) -> no_return().

functions(_) -> error(badarg).

-spec function_info(_,_,_) -> no_return().

function_info(_Service, _Function, _InfoType) -> erlang:error(badarg).
