%%
%% Autogenerated by Thrift Compiler (1.0.0-dev)
%%
%% DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
%%

-module(dmsl_withdrawals_provider_adapter_thrift).

-include("dmsl_withdrawals_provider_adapter_thrift.hrl").

-export([namespace/0]).
-export([enums/0]).
-export([typedefs/0]).
-export([structs/0]).
-export([services/0]).
-export([typedef_info/1]).
-export([enum_info/1]).
-export([struct_info/1]).
-export([record_name/1]).
-export([functions/1]).
-export([function_info/3]).

-export_type([namespace/0]).
-export_type([typedef_name/0]).
-export_type([enum_name/0]).
-export_type([struct_name/0]).
-export_type([exception_name/0]).
-export_type([service_name/0]).
-export_type([function_name/0]).

-export_type([enum_info/0]).
-export_type([struct_info/0]).

-export_type([
    'Failure'/0,
    'Options'/0,
    'InternalState'/0,
    'Destination'/0,
    'Identity'/0
]).
-export_type([
    'Intent'/0,
    'FinishIntent'/0,
    'FinishStatus'/0,
    'Success'/0,
    'SleepIntent'/0,
    'Withdrawal'/0,
    'Cash'/0,
    'ProcessResult'/0
]).

-type namespace() :: 'wthadpt'.

%%
%% typedefs
%%
-type typedef_name() ::
    'Failure' |
    'Options' |
    'InternalState' |
    'Destination' |
    'Identity'.

-type 'Failure'() :: dmsl_domain_thrift:'Failure'().
-type 'Options'() :: dmsl_domain_thrift:'ProxyOptions'().
-type 'InternalState'() :: dmsl_msgpack_thrift:'Value'().
-type 'Destination'() :: dmsl_withdrawals_domain_thrift:'Destination'().
-type 'Identity'() :: dmsl_withdrawals_domain_thrift:'Identity'().

%%
%% enums
%%
-type enum_name() :: none().

%%
%% structs, unions and exceptions
%%
-type struct_name() ::
    'Intent' |
    'FinishIntent' |
    'FinishStatus' |
    'Success' |
    'SleepIntent' |
    'Withdrawal' |
    'Cash' |
    'ProcessResult'.

-type exception_name() :: none().

%% union 'Intent'
-type 'Intent'() ::
    {'finish', 'FinishIntent'()} |
    {'sleep', 'SleepIntent'()}.

%% struct 'FinishIntent'
-type 'FinishIntent'() :: #'wthadpt_FinishIntent'{}.

%% union 'FinishStatus'
-type 'FinishStatus'() ::
    {'success', 'Success'()} |
    {'failure', 'Failure'()}.

%% struct 'Success'
-type 'Success'() :: #'wthadpt_Success'{}.

%% struct 'SleepIntent'
-type 'SleepIntent'() :: #'wthadpt_SleepIntent'{}.

%% struct 'Withdrawal'
-type 'Withdrawal'() :: #'wthadpt_Withdrawal'{}.

%% struct 'Cash'
-type 'Cash'() :: #'wthadpt_Cash'{}.

%% struct 'ProcessResult'
-type 'ProcessResult'() :: #'wthadpt_ProcessResult'{}.

%%
%% services and functions
%%
-type service_name() ::
    'Adapter'.

-type function_name() ::
    'Adapter_service_functions'().

-type 'Adapter_service_functions'() ::
    'ProcessWithdrawal'.

-export_type(['Adapter_service_functions'/0]).


-type struct_flavour() :: struct | exception | union.
-type field_num() :: pos_integer().
-type field_name() :: atom().
-type field_req() :: required | optional | undefined.

-type type_ref() :: {module(), atom()}.
-type field_type() ::
    bool | byte | i16 | i32 | i64 | string | double |
{enum, type_ref()} |
{struct, struct_flavour(), type_ref()} |
{list, field_type()} |
{set, field_type()} |
{map, field_type(), field_type()}.

-type struct_field_info() ::
    {field_num(), field_req(), field_type(), field_name(), any()}.
-type struct_info() ::
    {struct, struct_flavour(), [struct_field_info()]}.

-type enum_choice() :: none().

-type enum_field_info() ::
    {enum_choice(), integer()}.
-type enum_info() ::
    {enum, [enum_field_info()]}.

-spec typedefs() -> [typedef_name()].

typedefs() ->
    [
        'Failure',
        'Options',
        'InternalState',
        'Destination',
        'Identity'
    ].

-spec enums() -> [].

enums() ->
    [].

-spec structs() -> [struct_name()].

structs() ->
    [
        'Intent',
        'FinishIntent',
        'FinishStatus',
        'Success',
        'SleepIntent',
        'Withdrawal',
        'Cash',
        'ProcessResult'
    ].

-spec services() -> [service_name()].

services() ->
    [
        'Adapter'
    ].

-spec namespace() -> namespace().

namespace() ->
    'wthadpt'.

-spec typedef_info(typedef_name()) -> field_type() | no_return().

typedef_info('Failure') ->
    {struct, struct, {dmsl_domain_thrift, 'Failure'}};

typedef_info('Options') ->
    {map, string, string};

typedef_info('InternalState') ->
    {struct, union, {dmsl_msgpack_thrift, 'Value'}};

typedef_info('Destination') ->
    {struct, union, {dmsl_withdrawals_domain_thrift, 'Destination'}};

typedef_info('Identity') ->
    {struct, struct, {dmsl_withdrawals_domain_thrift, 'Identity'}};

typedef_info(_) -> erlang:error(badarg).

-spec enum_info(_) -> no_return().

enum_info(_) -> erlang:error(badarg).

-spec struct_info(struct_name() | exception_name()) -> struct_info() | no_return().

struct_info('Intent') ->
    {struct, union, [
    {1, optional, {struct, struct, {dmsl_withdrawals_provider_adapter_thrift, 'FinishIntent'}}, 'finish', undefined},
    {2, optional, {struct, struct, {dmsl_withdrawals_provider_adapter_thrift, 'SleepIntent'}}, 'sleep', undefined}
]};

struct_info('FinishIntent') ->
    {struct, struct, [
    {1, required, {struct, union, {dmsl_withdrawals_provider_adapter_thrift, 'FinishStatus'}}, 'status', undefined}
]};

struct_info('FinishStatus') ->
    {struct, union, [
    {1, optional, {struct, struct, {dmsl_withdrawals_provider_adapter_thrift, 'Success'}}, 'success', undefined},
    {2, optional, {struct, struct, {dmsl_domain_thrift, 'Failure'}}, 'failure', undefined}
]};

struct_info('Success') ->
    {struct, struct, [
    {1, required, {struct, struct, {dmsl_domain_thrift, 'TransactionInfo'}}, 'trx_info', undefined}
]};

struct_info('SleepIntent') ->
    {struct, struct, [
    {1, required, {struct, union, {dmsl_base_thrift, 'Timer'}}, 'timer', undefined}
]};

struct_info('Withdrawal') ->
    {struct, struct, [
    {1, required, string, 'id', undefined},
    {2, required, {struct, struct, {dmsl_withdrawals_provider_adapter_thrift, 'Cash'}}, 'body', undefined},
    {3, required, {struct, union, {dmsl_withdrawals_domain_thrift, 'Destination'}}, 'destination', undefined},
    {4, optional, {struct, struct, {dmsl_withdrawals_domain_thrift, 'Identity'}}, 'sender', undefined},
    {5, optional, {struct, struct, {dmsl_withdrawals_domain_thrift, 'Identity'}}, 'receiver', undefined}
]};

struct_info('Cash') ->
    {struct, struct, [
    {1, required, i64, 'amount', undefined},
    {2, required, {struct, struct, {dmsl_domain_thrift, 'Currency'}}, 'currency', undefined}
]};

struct_info('ProcessResult') ->
    {struct, struct, [
    {1, required, {struct, union, {dmsl_withdrawals_provider_adapter_thrift, 'Intent'}}, 'intent', undefined},
    {2, optional, {struct, union, {dmsl_msgpack_thrift, 'Value'}}, 'next_state', undefined}
]};

struct_info(_) -> erlang:error(badarg).

-spec record_name(struct_name() | exception_name()) -> atom() | no_return().

record_name('FinishIntent') ->
    'wthadpt_FinishIntent';

record_name('Success') ->
    'wthadpt_Success';

    record_name('SleepIntent') ->
    'wthadpt_SleepIntent';

    record_name('Withdrawal') ->
    'wthadpt_Withdrawal';

    record_name('Cash') ->
    'wthadpt_Cash';

    record_name('ProcessResult') ->
    'wthadpt_ProcessResult';

    record_name(_) -> error(badarg).
    
    -spec functions(service_name()) -> [function_name()] | no_return().

functions('Adapter') ->
    [
        'ProcessWithdrawal'
    ];

functions(_) -> error(badarg).

-spec function_info(service_name(), function_name(), params_type | reply_type | exceptions) ->
    struct_info() | no_return().

function_info('Adapter', 'ProcessWithdrawal', params_type) ->
    {struct, struct, [
    {1, undefined, {struct, struct, {dmsl_withdrawals_provider_adapter_thrift, 'Withdrawal'}}, 'withdrawal', undefined},
    {2, undefined, {struct, union, {dmsl_msgpack_thrift, 'Value'}}, 'state', undefined},
    {3, undefined, {map, string, string}, 'opts', undefined}
]};
function_info('Adapter', 'ProcessWithdrawal', reply_type) ->
        {struct, struct, {dmsl_withdrawals_provider_adapter_thrift, 'ProcessResult'}};
    function_info('Adapter', 'ProcessWithdrawal', exceptions) ->
        {struct, struct, []};

function_info(_Service, _Function, _InfoType) -> erlang:error(badarg).
