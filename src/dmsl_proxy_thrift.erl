%%
%% Autogenerated by Thrift Compiler (1.0.0-dev)
%%
%% DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
%%

-module(dmsl_proxy_thrift).

-include("dmsl_proxy_thrift.hrl").

-export([namespace/0]).
-export([enums/0]).
-export([typedefs/0]).
-export([structs/0]).
-export([services/0]).
-export([typedef_info/1]).
-export([enum_info/1]).
-export([struct_info/1]).
-export([record_name/1]).
-export([functions/1]).
-export([function_info/3]).

-export_type([namespace/0]).
-export_type([typedef_name/0]).
-export_type([enum_name/0]).
-export_type([struct_name/0]).
-export_type([exception_name/0]).
-export_type([service_name/0]).
-export_type([function_name/0]).

-export_type([enum_info/0]).
-export_type([struct_info/0]).

-export_type([
    'ProxyState'/0,
    'Callback'/0,
    'CallbackResponse'/0,
    'CallbackTag'/0
]).
-export_type([
    'Intent'/0,
    'FinishIntent'/0,
    'FinishStatus'/0,
    'Success'/0,
    'Failure'/0,
    'SleepIntent'/0,
    'SuspendIntent'/0
]).

-type namespace() :: ''.

%%
%% typedefs
%%
-type typedef_name() ::
    'ProxyState' |
    'Callback' |
    'CallbackResponse' |
    'CallbackTag'.

-type 'ProxyState'() :: dmsl_base_thrift:'Opaque'().
-type 'Callback'() :: dmsl_base_thrift:'Opaque'().
-type 'CallbackResponse'() :: dmsl_base_thrift:'Opaque'().
-type 'CallbackTag'() :: dmsl_base_thrift:'Tag'().

%%
%% enums
%%
-type enum_name() :: none().

%%
%% structs, unions and exceptions
%%
-type struct_name() ::
    'Intent' |
    'FinishIntent' |
    'FinishStatus' |
    'Success' |
    'Failure' |
    'SleepIntent' |
    'SuspendIntent'.

-type exception_name() :: none().

%% union 'Intent'
-type 'Intent'() ::
    {'finish', 'FinishIntent'()} |
    {'sleep', 'SleepIntent'()} |
    {'suspend', 'SuspendIntent'()}.

%% struct 'FinishIntent'
-type 'FinishIntent'() :: #'FinishIntent'{}.

%% union 'FinishStatus'
-type 'FinishStatus'() ::
    {'success', 'Success'()} |
    {'failure', 'Failure'()}.

%% struct 'Success'
-type 'Success'() :: #'Success'{}.

%% struct 'Failure'
-type 'Failure'() :: #'Failure'{}.

%% struct 'SleepIntent'
-type 'SleepIntent'() :: #'SleepIntent'{}.

%% struct 'SuspendIntent'
-type 'SuspendIntent'() :: #'SuspendIntent'{}.

%%
%% services and functions
%%
-type service_name() :: none().

-type function_name() :: none().


-type struct_flavour() :: struct | exception | union.
-type field_num() :: pos_integer().
-type field_name() :: atom().
-type field_req() :: required | optional | undefined.

-type type_ref() :: {module(), atom()}.
-type field_type() ::
    bool | byte | i16 | i32 | i64 | string | double |
{enum, type_ref()} |
{struct, struct_flavour(), type_ref()} |
{list, field_type()} |
{set, field_type()} |
{map, field_type(), field_type()}.

-type struct_field_info() ::
    {field_num(), field_req(), field_type(), field_name(), any()}.
-type struct_info() ::
    {struct, struct_flavour(), [struct_field_info()]}.

-type enum_choice() :: none().

-type enum_field_info() ::
    {enum_choice(), integer()}.
-type enum_info() ::
    {enum, [enum_field_info()]}.

-spec typedefs() -> [typedef_name()].

typedefs() ->
    [
        'ProxyState',
        'Callback',
        'CallbackResponse',
        'CallbackTag'
    ].

-spec enums() -> [].

enums() ->
    [].

-spec structs() -> [struct_name()].

structs() ->
    [
        'Intent',
        'FinishIntent',
        'FinishStatus',
        'Success',
        'Failure',
        'SleepIntent',
        'SuspendIntent'
    ].

-spec services() -> [].

services() ->
    [].

-spec namespace() -> namespace().

namespace() ->
    ''.

-spec typedef_info(typedef_name()) -> field_type() | no_return().

typedef_info('ProxyState') ->
    string;

typedef_info('Callback') ->
    string;

typedef_info('CallbackResponse') ->
    string;

typedef_info('CallbackTag') ->
    string;

typedef_info(_) -> erlang:error(badarg).

-spec enum_info(_) -> no_return().

enum_info(_) -> erlang:error(badarg).

-spec struct_info(struct_name() | exception_name()) -> struct_info() | no_return().

struct_info('Intent') ->
    {struct, union, [
    {1, optional, {struct, struct, {dmsl_proxy_thrift, 'FinishIntent'}}, 'finish', undefined},
    {2, optional, {struct, struct, {dmsl_proxy_thrift, 'SleepIntent'}}, 'sleep', undefined},
    {3, optional, {struct, struct, {dmsl_proxy_thrift, 'SuspendIntent'}}, 'suspend', undefined}
]};

struct_info('FinishIntent') ->
    {struct, struct, [
    {1, required, {struct, union, {dmsl_proxy_thrift, 'FinishStatus'}}, 'status', undefined}
]};

struct_info('FinishStatus') ->
    {struct, union, [
    {1, optional, {struct, struct, {dmsl_proxy_thrift, 'Success'}}, 'success', undefined},
    {2, optional, {struct, struct, {dmsl_proxy_thrift, 'Failure'}}, 'failure', undefined}
]};

struct_info('Success') ->
    {struct, struct, []};

struct_info('Failure') ->
    {struct, struct, [
    {1, required, string, 'code', undefined},
    {2, optional, string, 'description', undefined}
]};

struct_info('SleepIntent') ->
    {struct, struct, [
    {1, required, {struct, union, {dmsl_base_thrift, 'Timer'}}, 'timer', undefined},
    {2, optional, {struct, union, {dmsl_user_interaction_thrift, 'UserInteraction'}}, 'user_interaction', undefined}
]};

struct_info('SuspendIntent') ->
    {struct, struct, [
    {1, required, string, 'tag', undefined},
    {2, required, {struct, union, {dmsl_base_thrift, 'Timer'}}, 'timeout', undefined},
    {3, optional, {struct, union, {dmsl_user_interaction_thrift, 'UserInteraction'}}, 'user_interaction', undefined}
]};

struct_info(_) -> erlang:error(badarg).

-spec record_name(struct_name() | exception_name()) -> atom() | no_return().

record_name('FinishIntent') ->
    'FinishIntent';

record_name('Success') ->
    'Success';

    record_name('Failure') ->
    'Failure';

    record_name('SleepIntent') ->
    'SleepIntent';

    record_name('SuspendIntent') ->
    'SuspendIntent';

    record_name(_) -> error(badarg).
    
    -spec functions(_) -> no_return().

functions(_) -> error(badarg).

-spec function_info(_,_,_) -> no_return().

function_info(_Service, _Function, _InfoType) -> erlang:error(badarg).
