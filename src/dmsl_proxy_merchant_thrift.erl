%%
%% Autogenerated by Thrift Compiler (1.0.0-dev)
%%
%% DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
%%

-module(dmsl_proxy_merchant_thrift).

-include("dmsl_proxy_merchant_thrift.hrl").

-export([namespace/0]).
-export([enums/0]).
-export([typedefs/0]).
-export([structs/0]).
-export([services/0]).
-export([typedef_info/1]).
-export([enum_info/1]).
-export([struct_info/1]).
-export([record_name/1]).
-export([functions/1]).
-export([function_info/3]).

-export_type([namespace/0]).
-export_type([typedef_name/0]).
-export_type([enum_name/0]).
-export_type([struct_name/0]).
-export_type([exception_name/0]).
-export_type([service_name/0]).
-export_type([function_name/0]).

-export_type([enum_info/0]).
-export_type([struct_info/0]).

-export_type([
    'Context'/0,
    'InvoiceInfo'/0,
    'Party'/0,
    'Shop'/0,
    'Invoice'/0,
    'Cash'/0,
    'Session'/0,
    'InvoiceEvent'/0,
    'InvoiceStatusChanged'/0,
    'InvoicePaid'/0,
    'InvoiceStatus'/0,
    'ProxyResult'/0,
    'Intent'/0,
    'FinishIntent'/0,
    'SleepIntent'/0
]).

-type namespace() :: 'prxmerch'.

%%
%% typedefs
%%
-type typedef_name() :: none().


%%
%% enums
%%
-type enum_name() :: none().

%%
%% structs, unions and exceptions
%%
-type struct_name() ::
    'Context' |
    'InvoiceInfo' |
    'Party' |
    'Shop' |
    'Invoice' |
    'Cash' |
    'Session' |
    'InvoiceEvent' |
    'InvoiceStatusChanged' |
    'InvoicePaid' |
    'InvoiceStatus' |
    'ProxyResult' |
    'Intent' |
    'FinishIntent' |
    'SleepIntent'.

-type exception_name() :: none().

%% struct 'Context'
-type 'Context'() :: #'prxmerch_Context'{}.

%% struct 'InvoiceInfo'
-type 'InvoiceInfo'() :: #'prxmerch_InvoiceInfo'{}.

%% struct 'Party'
-type 'Party'() :: #'prxmerch_Party'{}.

%% struct 'Shop'
-type 'Shop'() :: #'prxmerch_Shop'{}.

%% struct 'Invoice'
-type 'Invoice'() :: #'prxmerch_Invoice'{}.

%% struct 'Cash'
-type 'Cash'() :: #'prxmerch_Cash'{}.

%% struct 'Session'
-type 'Session'() :: #'prxmerch_Session'{}.

%% union 'InvoiceEvent'
-type 'InvoiceEvent'() ::
    {'status_changed', 'InvoiceStatusChanged'()}.

%% struct 'InvoiceStatusChanged'
-type 'InvoiceStatusChanged'() :: #'prxmerch_InvoiceStatusChanged'{}.

%% struct 'InvoicePaid'
-type 'InvoicePaid'() :: #'prxmerch_InvoicePaid'{}.

%% union 'InvoiceStatus'
-type 'InvoiceStatus'() ::
    {'paid', 'InvoicePaid'()}.

%% struct 'ProxyResult'
-type 'ProxyResult'() :: #'prxmerch_ProxyResult'{}.

%% union 'Intent'
-type 'Intent'() ::
    {'finish', 'FinishIntent'()} |
    {'sleep', 'SleepIntent'()}.

%% struct 'FinishIntent'
-type 'FinishIntent'() :: #'prxmerch_FinishIntent'{}.

%% struct 'SleepIntent'
-type 'SleepIntent'() :: #'prxmerch_SleepIntent'{}.

%%
%% services and functions
%%
-type service_name() ::
    'MerchantProxy'.

-type function_name() ::
    'MerchantProxy_service_functions'().

-type 'MerchantProxy_service_functions'() ::
    'HandleInvoiceEvent'.

-export_type(['MerchantProxy_service_functions'/0]).


-type struct_flavour() :: struct | exception | union.
-type field_num() :: pos_integer().
-type field_name() :: atom().
-type field_req() :: required | optional | undefined.

-type type_ref() :: {module(), atom()}.
-type field_type() ::
    bool | byte | i16 | i32 | i64 | string | double |
{enum, type_ref()} |
{struct, struct_flavour(), type_ref()} |
{list, field_type()} |
{set, field_type()} |
{map, field_type(), field_type()}.

-type struct_field_info() ::
    {field_num(), field_req(), field_type(), field_name(), any()}.
-type struct_info() ::
    {struct, struct_flavour(), [struct_field_info()]}.

-type enum_choice() :: none().

-type enum_field_info() ::
    {enum_choice(), integer()}.
-type enum_info() ::
    {enum, [enum_field_info()]}.

-spec typedefs() -> [].

typedefs() ->
    [].

-spec enums() -> [].

enums() ->
    [].

-spec structs() -> [struct_name()].

structs() ->
    [
        'Context',
        'InvoiceInfo',
        'Party',
        'Shop',
        'Invoice',
        'Cash',
        'Session',
        'InvoiceEvent',
        'InvoiceStatusChanged',
        'InvoicePaid',
        'InvoiceStatus',
        'ProxyResult',
        'Intent',
        'FinishIntent',
        'SleepIntent'
    ].

-spec services() -> [service_name()].

services() ->
    [
        'MerchantProxy'
    ].

-spec namespace() -> namespace().

namespace() ->
    'prxmerch'.

-spec typedef_info(_) -> no_return().

typedef_info(_) -> erlang:error(badarg).

-spec enum_info(_) -> no_return().

enum_info(_) -> erlang:error(badarg).

-spec struct_info(struct_name() | exception_name()) -> struct_info() | no_return().

struct_info('Context') ->
    {struct, struct, [
    {1, required, {struct, struct, {dmsl_proxy_merchant_thrift, 'Session'}}, 'session', undefined},
    {2, required, {struct, struct, {dmsl_proxy_merchant_thrift, 'InvoiceInfo'}}, 'invoice', undefined},
    {3, required, {map, string, string}, 'options', undefined}
]};

struct_info('InvoiceInfo') ->
    {struct, struct, [
    {1, required, {struct, struct, {dmsl_proxy_merchant_thrift, 'Party'}}, 'party', undefined},
    {2, required, {struct, struct, {dmsl_proxy_merchant_thrift, 'Shop'}}, 'shop', undefined},
    {3, required, {struct, struct, {dmsl_proxy_merchant_thrift, 'Invoice'}}, 'invoice', undefined}
]};

struct_info('Party') ->
    {struct, struct, [
    {1, required, string, 'id', undefined}
]};

struct_info('Shop') ->
    {struct, struct, [
    {1, required, string, 'id', undefined},
    {2, required, {struct, struct, {dmsl_domain_thrift, 'ShopDetails'}}, 'details', undefined}
]};

struct_info('Invoice') ->
    {struct, struct, [
    {1, required, string, 'id', undefined},
    {2, required, string, 'created_at', undefined},
    {3, required, string, 'due', undefined},
    {4, required, {struct, struct, {dmsl_domain_thrift, 'InvoiceDetails'}}, 'details', undefined},
    {5, required, {struct, struct, {dmsl_proxy_merchant_thrift, 'Cash'}}, 'cost', undefined},
    {6, required, {struct, struct, {dmsl_base_thrift, 'Content'}}, 'context', undefined}
]};

struct_info('Cash') ->
    {struct, struct, [
    {1, required, i64, 'amount', undefined},
    {2, required, {struct, struct, {dmsl_domain_thrift, 'Currency'}}, 'currency', undefined}
]};

struct_info('Session') ->
    {struct, struct, [
    {1, required, {struct, union, {dmsl_proxy_merchant_thrift, 'InvoiceEvent'}}, 'event', undefined},
    {2, optional, string, 'state', undefined}
]};

struct_info('InvoiceEvent') ->
    {struct, union, [
    {1, optional, {struct, struct, {dmsl_proxy_merchant_thrift, 'InvoiceStatusChanged'}}, 'status_changed', undefined}
]};

struct_info('InvoiceStatusChanged') ->
    {struct, struct, [
    {1, required, {struct, union, {dmsl_proxy_merchant_thrift, 'InvoiceStatus'}}, 'status', undefined}
]};

struct_info('InvoicePaid') ->
    {struct, struct, []};

struct_info('InvoiceStatus') ->
    {struct, union, [
    {1, optional, {struct, struct, {dmsl_proxy_merchant_thrift, 'InvoicePaid'}}, 'paid', undefined}
]};

struct_info('ProxyResult') ->
    {struct, struct, [
    {1, required, {struct, union, {dmsl_proxy_merchant_thrift, 'Intent'}}, 'intent', undefined},
    {2, optional, string, 'next_state', undefined}
]};

struct_info('Intent') ->
    {struct, union, [
    {1, optional, {struct, struct, {dmsl_proxy_merchant_thrift, 'FinishIntent'}}, 'finish', undefined},
    {2, optional, {struct, struct, {dmsl_proxy_merchant_thrift, 'SleepIntent'}}, 'sleep', undefined}
]};

struct_info('FinishIntent') ->
    {struct, struct, []};

struct_info('SleepIntent') ->
    {struct, struct, [
    {1, required, {struct, union, {dmsl_base_thrift, 'Timer'}}, 'timer', undefined}
]};

struct_info(_) -> erlang:error(badarg).

-spec record_name(struct_name() | exception_name()) -> atom() | no_return().

record_name('Context') ->
    'prxmerch_Context';

record_name('InvoiceInfo') ->
    'prxmerch_InvoiceInfo';

    record_name('Party') ->
    'prxmerch_Party';

    record_name('Shop') ->
    'prxmerch_Shop';

    record_name('Invoice') ->
    'prxmerch_Invoice';

    record_name('Cash') ->
    'prxmerch_Cash';

    record_name('Session') ->
    'prxmerch_Session';

    record_name('InvoiceStatusChanged') ->
    'prxmerch_InvoiceStatusChanged';

    record_name('InvoicePaid') ->
    'prxmerch_InvoicePaid';

    record_name('ProxyResult') ->
    'prxmerch_ProxyResult';

    record_name('FinishIntent') ->
    'prxmerch_FinishIntent';

    record_name('SleepIntent') ->
    'prxmerch_SleepIntent';

    record_name(_) -> error(badarg).
    
    -spec functions(service_name()) -> [function_name()] | no_return().

functions('MerchantProxy') ->
    [
        'HandleInvoiceEvent'
    ];

functions(_) -> error(badarg).

-spec function_info(service_name(), function_name(), params_type | reply_type | exceptions) ->
    struct_info() | no_return().

function_info('MerchantProxy', 'HandleInvoiceEvent', params_type) ->
    {struct, struct, [
    {1, undefined, {struct, struct, {dmsl_proxy_merchant_thrift, 'Context'}}, 'context', undefined}
]};
function_info('MerchantProxy', 'HandleInvoiceEvent', reply_type) ->
        {struct, struct, {dmsl_proxy_merchant_thrift, 'ProxyResult'}};
    function_info('MerchantProxy', 'HandleInvoiceEvent', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_base_thrift, 'InvalidRequest'}}, 'ex1', undefined}
    ]};

function_info(_Service, _Function, _InfoType) -> erlang:error(badarg).
