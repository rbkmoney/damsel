%%
%% Autogenerated by Thrift Compiler (1.0.0-dev)
%%
%% DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
%%

-module(dmsl_cds_thrift).

-include("dmsl_cds_thrift.hrl").

-export([namespace/0]).
-export([enums/0]).
-export([typedefs/0]).
-export([structs/0]).
-export([services/0]).
-export([typedef_info/1]).
-export([enum_info/1]).
-export([struct_info/1]).
-export([record_name/1]).
-export([functions/1]).
-export([function_info/3]).

-export_type([namespace/0]).
-export_type([typedef_name/0]).
-export_type([enum_name/0]).
-export_type([struct_name/0]).
-export_type([exception_name/0]).
-export_type([service_name/0]).
-export_type([function_name/0]).

-export_type([enum_info/0]).
-export_type([struct_info/0]).

-export_type([
    'MasterKeyShare'/0,
    'MasterKeyShares'/0
]).
-export_type([
    'ExpDate'/0,
    'CardData'/0,
    'PutCardDataResult'/0,
    'Unlocked'/0,
    'UnlockStatus'/0
]).
-export_type([
    'InvalidCardData'/0,
    'CardDataNotFound'/0,
    'NoKeyring'/0,
    'KeyringLocked'/0,
    'KeyringExists'/0
]).

-type namespace() :: ''.

%%
%% typedefs
%%
-type typedef_name() ::
    'MasterKeyShare' |
    'MasterKeyShares'.

-type 'MasterKeyShare'() :: binary().
-type 'MasterKeyShares'() :: ['MasterKeyShare'()].

%%
%% enums
%%
-type enum_name() :: none().

%%
%% structs, unions and exceptions
%%
-type struct_name() ::
    'ExpDate' |
    'CardData' |
    'PutCardDataResult' |
    'Unlocked' |
    'UnlockStatus'.

-type exception_name() ::
    'InvalidCardData' |
    'CardDataNotFound' |
    'NoKeyring' |
    'KeyringLocked' |
    'KeyringExists'.

%% struct 'ExpDate'
-type 'ExpDate'() :: #'ExpDate'{}.

%% struct 'CardData'
-type 'CardData'() :: #'CardData'{}.

%% struct 'PutCardDataResult'
-type 'PutCardDataResult'() :: #'PutCardDataResult'{}.

%% struct 'Unlocked'
-type 'Unlocked'() :: #'Unlocked'{}.

%% union 'UnlockStatus'
-type 'UnlockStatus'() ::
    {'unlocked', 'Unlocked'()} |
    {'more_keys_needed', integer()}.

%% exception 'InvalidCardData'
-type 'InvalidCardData'() :: #'InvalidCardData'{}.

%% exception 'CardDataNotFound'
-type 'CardDataNotFound'() :: #'CardDataNotFound'{}.

%% exception 'NoKeyring'
-type 'NoKeyring'() :: #'NoKeyring'{}.

%% exception 'KeyringLocked'
-type 'KeyringLocked'() :: #'KeyringLocked'{}.

%% exception 'KeyringExists'
-type 'KeyringExists'() :: #'KeyringExists'{}.

%%
%% services and functions
%%
-type service_name() ::
    'Keyring' |
    'Storage'.

-type function_name() ::
    'Keyring_service_functions'() |
    'Storage_service_functions'().

-type 'Keyring_service_functions'() ::
    'Init' |
    'Unlock' |
    'Lock' |
    'Rotate'.

-export_type(['Keyring_service_functions'/0]).

-type 'Storage_service_functions'() ::
    'GetCardData' |
    'GetSessionCardData' |
    'PutCardData'.

-export_type(['Storage_service_functions'/0]).


-type struct_flavour() :: struct | exception | union.
-type field_num() :: pos_integer().
-type field_name() :: atom().
-type field_req() :: required | optional | undefined.

-type type_ref() :: {module(), atom()}.
-type field_type() ::
    bool | byte | i16 | i32 | i64 | string | double |
{enum, type_ref()} |
{struct, struct_flavour(), type_ref()} |
{list, field_type()} |
{set, field_type()} |
{map, field_type(), field_type()}.

-type struct_field_info() ::
    {field_num(), field_req(), field_type(), field_name(), any()}.
-type struct_info() ::
    {struct, struct_flavour(), [struct_field_info()]}.

-type enum_choice() :: none().

-type enum_field_info() ::
    {enum_choice(), integer()}.
-type enum_info() ::
    {enum, [enum_field_info()]}.

-spec typedefs() -> [typedef_name()].

typedefs() ->
    [
        'MasterKeyShare',
        'MasterKeyShares'
    ].

-spec enums() -> [].

enums() ->
    [].

-spec structs() -> [struct_name()].

structs() ->
    [
        'ExpDate',
        'CardData',
        'PutCardDataResult',
        'Unlocked',
        'UnlockStatus'
    ].

-spec services() -> [service_name()].

services() ->
    [
        'Keyring',
        'Storage'
    ].

-spec namespace() -> namespace().

namespace() ->
    ''.

-spec typedef_info(typedef_name()) -> field_type() | no_return().

typedef_info('MasterKeyShare') ->
    string;

typedef_info('MasterKeyShares') ->
    {list, string};

typedef_info(_) -> erlang:error(badarg).

-spec enum_info(_) -> no_return().

enum_info(_) -> erlang:error(badarg).

-spec struct_info(struct_name() | exception_name()) -> struct_info() | no_return().

struct_info('ExpDate') ->
    {struct, struct, [
    {1, required, byte, 'month', undefined},
    {2, required, i16, 'year', undefined}
]};

struct_info('CardData') ->
    {struct, struct, [
    {1, required, string, 'pan', undefined},
    {2, required, {struct, struct, {dmsl_cds_thrift, 'ExpDate'}}, 'exp_date', undefined},
    {3, optional, string, 'cardholder_name', undefined},
    {4, required, string, 'cvv', undefined}
]};

struct_info('PutCardDataResult') ->
    {struct, struct, [
    {1, required, {struct, struct, {dmsl_domain_thrift, 'BankCard'}}, 'bank_card', undefined},
    {2, required, string, 'session_id', undefined}
]};

struct_info('Unlocked') ->
    {struct, struct, []};

struct_info('UnlockStatus') ->
    {struct, union, [
    {1, optional, {struct, struct, {dmsl_cds_thrift, 'Unlocked'}}, 'unlocked', undefined},
    {2, optional, i16, 'more_keys_needed', undefined}
]};

struct_info('InvalidCardData') ->
    {struct, exception, []};

struct_info('CardDataNotFound') ->
    {struct, exception, []};

struct_info('NoKeyring') ->
    {struct, exception, []};

struct_info('KeyringLocked') ->
    {struct, exception, []};

struct_info('KeyringExists') ->
    {struct, exception, []};

struct_info(_) -> erlang:error(badarg).

-spec record_name(struct_name() | exception_name()) -> atom() | no_return().

record_name('ExpDate') ->
    'ExpDate';

record_name('CardData') ->
    'CardData';

    record_name('PutCardDataResult') ->
    'PutCardDataResult';

    record_name('Unlocked') ->
    'Unlocked';

    record_name('InvalidCardData') ->
    'InvalidCardData';

    record_name('CardDataNotFound') ->
    'CardDataNotFound';

    record_name('NoKeyring') ->
    'NoKeyring';

    record_name('KeyringLocked') ->
    'KeyringLocked';

    record_name('KeyringExists') ->
    'KeyringExists';

    record_name(_) -> error(badarg).
    
    -spec functions(service_name()) -> [function_name()] | no_return().

functions('Keyring') ->
    [
        'Init',
        'Unlock',
        'Lock',
        'Rotate'
    ];

functions('Storage') ->
    [
        'GetCardData',
        'GetSessionCardData',
        'PutCardData'
    ];

functions(_) -> error(badarg).

-spec function_info(service_name(), function_name(), params_type | reply_type | exceptions) ->
    struct_info() | no_return().

function_info('Keyring', 'Init', params_type) ->
    {struct, struct, [
    {1, undefined, i16, 'threshold', undefined},
    {2, undefined, i16, 'num_shares', undefined}
]};
function_info('Keyring', 'Init', reply_type) ->
        {list, string};
    function_info('Keyring', 'Init', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_cds_thrift, 'KeyringExists'}}, 'exists', undefined}
    ]};
function_info('Keyring', 'Unlock', params_type) ->
    {struct, struct, [
    {1, undefined, string, 'key_share', undefined}
]};
function_info('Keyring', 'Unlock', reply_type) ->
        {struct, union, {dmsl_cds_thrift, 'UnlockStatus'}};
    function_info('Keyring', 'Unlock', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_cds_thrift, 'NoKeyring'}}, 'no_keyring', undefined}
    ]};
function_info('Keyring', 'Lock', params_type) ->
    {struct, struct, []};
function_info('Keyring', 'Lock', reply_type) ->
        {struct, struct, []};
    function_info('Keyring', 'Lock', exceptions) ->
        {struct, struct, []};
function_info('Keyring', 'Rotate', params_type) ->
    {struct, struct, []};
function_info('Keyring', 'Rotate', reply_type) ->
        {struct, struct, []};
    function_info('Keyring', 'Rotate', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_cds_thrift, 'KeyringLocked'}}, 'locked', undefined}
    ]};

function_info('Storage', 'GetCardData', params_type) ->
    {struct, struct, [
    {1, undefined, string, 'token', undefined}
]};
function_info('Storage', 'GetCardData', reply_type) ->
        {struct, struct, {dmsl_cds_thrift, 'CardData'}};
    function_info('Storage', 'GetCardData', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_cds_thrift, 'CardDataNotFound'}}, 'not_found', undefined}
    ]};
function_info('Storage', 'GetSessionCardData', params_type) ->
    {struct, struct, [
    {1, undefined, string, 'token', undefined},
    {2, undefined, string, 'session_id', undefined}
]};
function_info('Storage', 'GetSessionCardData', reply_type) ->
        {struct, struct, {dmsl_cds_thrift, 'CardData'}};
    function_info('Storage', 'GetSessionCardData', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_cds_thrift, 'CardDataNotFound'}}, 'not_found', undefined}
    ]};
function_info('Storage', 'PutCardData', params_type) ->
    {struct, struct, [
    {1, undefined, {struct, struct, {dmsl_cds_thrift, 'CardData'}}, 'card_data', undefined}
]};
function_info('Storage', 'PutCardData', reply_type) ->
        {struct, struct, {dmsl_cds_thrift, 'PutCardDataResult'}};
    function_info('Storage', 'PutCardData', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_cds_thrift, 'InvalidCardData'}}, 'invalid', undefined}
    ]};

function_info(_Service, _Function, _InfoType) -> erlang:error(badarg).
