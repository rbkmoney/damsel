%%
%% Autogenerated by Thrift Compiler (1.0.0-dev)
%%
%% DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
%%

-module(dmsl_cds_thrift).

-include("dmsl_cds_thrift.hrl").

-export([namespace/0]).
-export([enums/0]).
-export([typedefs/0]).
-export([structs/0]).
-export([services/0]).
-export([typedef_info/1]).
-export([enum_info/1]).
-export([struct_info/1]).
-export([record_name/1]).
-export([functions/1]).
-export([function_info/3]).

-export_type([namespace/0]).
-export_type([typedef_name/0]).
-export_type([enum_name/0]).
-export_type([struct_name/0]).
-export_type([exception_name/0]).
-export_type([service_name/0]).
-export_type([function_name/0]).

-export_type([enum_info/0]).
-export_type([struct_info/0]).

-export_type([
    'SignedMasterKeyShare'/0,
    'ShareholderId'/0,
    'EncryptedMasterKeyShares'/0,
    'Activities'/0,
    'ShareId'/0,
    'ShareSubmitters'/0,
    'Seconds'/0
]).
-export_type([
    'Initialization'/0,
    'Rekeying'/0,
    'Rotation'/0,
    'Unlock'/0,
    'Status'/0
]).
-export_type([
    'EncryptedMasterKeyShare'/0,
    'ExpDate'/0,
    'CardData'/0,
    'PutCardDataResult'/0,
    'PutCardResult'/0,
    'CardSecurityCode'/0,
    'Auth3DS'/0,
    'AuthData'/0,
    'SessionData'/0,
    'Success'/0,
    'KeyringOperationStatus'/0,
    'Activity'/0,
    'RotationState'/0,
    'InitializationState'/0,
    'UnlockState'/0,
    'RekeyingState'/0,
    'ActivitiesState'/0,
    'KeyringState'/0
]).
-export_type([
    'InvalidStatus'/0,
    'InvalidActivity'/0,
    'InvalidCardData'/0,
    'CardDataNotFound'/0,
    'SessionDataNotFound'/0,
    'InvalidArguments'/0,
    'OperationAborted'/0,
    'VerificationFailed'/0
]).

-type namespace() :: ''.

%%
%% typedefs
%%
-type typedef_name() ::
    'SignedMasterKeyShare' |
    'ShareholderId' |
    'EncryptedMasterKeyShares' |
    'Activities' |
    'ShareId' |
    'ShareSubmitters' |
    'Seconds'.

-type 'SignedMasterKeyShare'() :: binary().
-type 'ShareholderId'() :: binary().
-type 'EncryptedMasterKeyShares'() :: ['EncryptedMasterKeyShare'()].
-type 'Activities'() :: ['Activity'()].
-type 'ShareId'() :: integer().
-type 'ShareSubmitters'() :: #{'ShareId'() => 'ShareholderId'()}.
-type 'Seconds'() :: integer().

%%
%% enums
%%
-type enum_name() ::
    'Initialization' |
    'Rekeying' |
    'Rotation' |
    'Unlock' |
    'Status'.

%% enum 'Initialization'
-type 'Initialization'() ::
    'uninitialized' |
    'validation'.

%% enum 'Rekeying'
-type 'Rekeying'() ::
    'uninitialized' |
    'confirmation' |
    'postconfirmation' |
    'validation'.

%% enum 'Rotation'
-type 'Rotation'() ::
    'uninitialized' |
    'validation'.

%% enum 'Unlock'
-type 'Unlock'() ::
    'uninitialized' |
    'validation'.

%% enum 'Status'
-type 'Status'() ::
    'not_initialized' |
    'unlocked' |
    'locked'.

%%
%% structs, unions and exceptions
%%
-type struct_name() ::
    'EncryptedMasterKeyShare' |
    'ExpDate' |
    'CardData' |
    'PutCardDataResult' |
    'PutCardResult' |
    'CardSecurityCode' |
    'Auth3DS' |
    'AuthData' |
    'SessionData' |
    'Success' |
    'KeyringOperationStatus' |
    'Activity' |
    'RotationState' |
    'InitializationState' |
    'UnlockState' |
    'RekeyingState' |
    'ActivitiesState' |
    'KeyringState'.

-type exception_name() ::
    'InvalidStatus' |
    'InvalidActivity' |
    'InvalidCardData' |
    'CardDataNotFound' |
    'SessionDataNotFound' |
    'InvalidArguments' |
    'OperationAborted' |
    'VerificationFailed'.

%% struct 'EncryptedMasterKeyShare'
-type 'EncryptedMasterKeyShare'() :: #'EncryptedMasterKeyShare'{}.

%% struct 'ExpDate'
-type 'ExpDate'() :: #'ExpDate'{}.

%% struct 'CardData'
-type 'CardData'() :: #'CardData'{}.

%% struct 'PutCardDataResult'
-type 'PutCardDataResult'() :: #'PutCardDataResult'{}.

%% struct 'PutCardResult'
-type 'PutCardResult'() :: #'PutCardResult'{}.

%% struct 'CardSecurityCode'
-type 'CardSecurityCode'() :: #'CardSecurityCode'{}.

%% struct 'Auth3DS'
-type 'Auth3DS'() :: #'Auth3DS'{}.

%% union 'AuthData'
-type 'AuthData'() ::
    {'card_security_code', 'CardSecurityCode'()} |
    {'auth_3ds', 'Auth3DS'()}.

%% struct 'SessionData'
-type 'SessionData'() :: #'SessionData'{}.

%% struct 'Success'
-type 'Success'() :: #'Success'{}.

%% union 'KeyringOperationStatus'
-type 'KeyringOperationStatus'() ::
    {'success', 'Success'()} |
    {'more_keys_needed', integer()}.

%% union 'Activity'
-type 'Activity'() ::
    {'initialization', atom()} |
    {'rekeying', atom()} |
    {'rotation', atom()} |
    {'unlock', atom()}.

%% struct 'RotationState'
-type 'RotationState'() :: #'RotationState'{}.

%% struct 'InitializationState'
-type 'InitializationState'() :: #'InitializationState'{}.

%% struct 'UnlockState'
-type 'UnlockState'() :: #'UnlockState'{}.

%% struct 'RekeyingState'
-type 'RekeyingState'() :: #'RekeyingState'{}.

%% struct 'ActivitiesState'
-type 'ActivitiesState'() :: #'ActivitiesState'{}.

%% struct 'KeyringState'
-type 'KeyringState'() :: #'KeyringState'{}.

%% exception 'InvalidStatus'
-type 'InvalidStatus'() :: #'InvalidStatus'{}.

%% exception 'InvalidActivity'
-type 'InvalidActivity'() :: #'InvalidActivity'{}.

%% exception 'InvalidCardData'
-type 'InvalidCardData'() :: #'InvalidCardData'{}.

%% exception 'CardDataNotFound'
-type 'CardDataNotFound'() :: #'CardDataNotFound'{}.

%% exception 'SessionDataNotFound'
-type 'SessionDataNotFound'() :: #'SessionDataNotFound'{}.

%% exception 'InvalidArguments'
-type 'InvalidArguments'() :: #'InvalidArguments'{}.

%% exception 'OperationAborted'
-type 'OperationAborted'() :: #'OperationAborted'{}.

%% exception 'VerificationFailed'
-type 'VerificationFailed'() :: #'VerificationFailed'{}.

%%
%% services and functions
%%
-type service_name() ::
    'Keyring' |
    'Storage'.

-type function_name() ::
    'Keyring_service_functions'() |
    'Storage_service_functions'().

-type 'Keyring_service_functions'() ::
    'StartInit' |
    'ValidateInit' |
    'CancelInit' |
    'StartRekey' |
    'ConfirmRekey' |
    'StartRekeyValidation' |
    'ValidateRekey' |
    'CancelRekey' |
    'GetState' |
    'StartUnlock' |
    'ConfirmUnlock' |
    'CancelUnlock' |
    'Lock' |
    'StartRotate' |
    'ConfirmRotate' |
    'CancelRotate'.

-export_type(['Keyring_service_functions'/0]).

-type 'Storage_service_functions'() ::
    'GetCardData' |
    'GetSessionCardData' |
    'GetSessionData' |
    'PutCardData' |
    'PutCard' |
    'PutSession'.

-export_type(['Storage_service_functions'/0]).


-type struct_flavour() :: struct | exception | union.
-type field_num() :: pos_integer().
-type field_name() :: atom().
-type field_req() :: required | optional | undefined.

-type type_ref() :: {module(), atom()}.
-type field_type() ::
    bool | byte | i16 | i32 | i64 | string | double |
    {enum, type_ref()} |
    {struct, struct_flavour(), type_ref()} |
    {list, field_type()} |
    {set, field_type()} |
    {map, field_type(), field_type()}.

-type struct_field_info() ::
    {field_num(), field_req(), field_type(), field_name(), any()}.
-type struct_info() ::
    {struct, struct_flavour(), [struct_field_info()]}.

-type enum_choice() ::
    'Initialization'() |
    'Rekeying'() |
    'Rotation'() |
    'Unlock'() |
    'Status'().

-type enum_field_info() ::
    {enum_choice(), integer()}.
-type enum_info() ::
    {enum, [enum_field_info()]}.

-spec typedefs() -> [typedef_name()].

typedefs() ->
    [
        'SignedMasterKeyShare',
        'ShareholderId',
        'EncryptedMasterKeyShares',
        'Activities',
        'ShareId',
        'ShareSubmitters',
        'Seconds'
    ].

-spec enums() -> [enum_name()].

enums() ->
    [
        'Initialization',
        'Rekeying',
        'Rotation',
        'Unlock',
        'Status'
    ].

-spec structs() -> [struct_name()].

structs() ->
    [
        'EncryptedMasterKeyShare',
        'ExpDate',
        'CardData',
        'PutCardDataResult',
        'PutCardResult',
        'CardSecurityCode',
        'Auth3DS',
        'AuthData',
        'SessionData',
        'Success',
        'KeyringOperationStatus',
        'Activity',
        'RotationState',
        'InitializationState',
        'UnlockState',
        'RekeyingState',
        'ActivitiesState',
        'KeyringState'
    ].

-spec services() -> [service_name()].

services() ->
    [
        'Keyring',
        'Storage'
    ].

-spec namespace() -> namespace().

namespace() ->
    ''.

-spec typedef_info(typedef_name()) -> field_type() | no_return().

typedef_info('SignedMasterKeyShare') ->
    string;

typedef_info('ShareholderId') ->
    string;

typedef_info('EncryptedMasterKeyShares') ->
    {list, {struct, struct, {dmsl_cds_thrift, 'EncryptedMasterKeyShare'}}};

typedef_info('Activities') ->
    {list, {struct, union, {dmsl_cds_thrift, 'Activity'}}};

typedef_info('ShareId') ->
    i16;

typedef_info('ShareSubmitters') ->
    {map, i16, string};

typedef_info('Seconds') ->
    i32;

typedef_info(_) -> erlang:error(badarg).

-spec enum_info(enum_name()) -> enum_info() | no_return().

enum_info('Initialization') ->
    {enum, [
        {'uninitialized', 0},
        {'validation', 1}
    ]};

enum_info('Rekeying') ->
    {enum, [
        {'uninitialized', 0},
        {'confirmation', 1},
        {'postconfirmation', 2},
        {'validation', 3}
    ]};

enum_info('Rotation') ->
    {enum, [
        {'uninitialized', 0},
        {'validation', 1}
    ]};

enum_info('Unlock') ->
    {enum, [
        {'uninitialized', 0},
        {'validation', 1}
    ]};

enum_info('Status') ->
    {enum, [
        {'not_initialized', 0},
        {'unlocked', 1},
        {'locked', 2}
    ]};

enum_info(_) -> erlang:error(badarg).

-spec struct_info(struct_name() | exception_name()) -> struct_info() | no_return().

struct_info('EncryptedMasterKeyShare') ->
    {struct, struct, [
        {1, required, string, 'id', undefined},
        {2, required, string, 'owner', undefined},
        {3, required, string, 'encrypted_share', undefined}
    ]};

struct_info('ExpDate') ->
    {struct, struct, [
        {1, required, byte, 'month', undefined},
        {2, required, i16, 'year', undefined}
    ]};

struct_info('CardData') ->
    {struct, struct, [
        {1, required, string, 'pan', undefined},
        {2, required, {struct, struct, {dmsl_cds_thrift, 'ExpDate'}}, 'exp_date', undefined},
        {3, optional, string, 'cardholder_name', undefined},
        {4, optional, string, 'cvv', undefined}
    ]};

struct_info('PutCardDataResult') ->
    {struct, struct, [
        {1, required, {struct, struct, {dmsl_domain_thrift, 'BankCard'}}, 'bank_card', undefined},
        {2, required, string, 'session_id', undefined}
    ]};

struct_info('PutCardResult') ->
    {struct, struct, [
        {1, required, {struct, struct, {dmsl_domain_thrift, 'BankCard'}}, 'bank_card', undefined}
    ]};

struct_info('CardSecurityCode') ->
    {struct, struct, [
        {1, required, string, 'value', undefined}
    ]};

struct_info('Auth3DS') ->
    {struct, struct, [
        {1, required, string, 'cryptogram', undefined},
        {2, optional, string, 'eci', undefined}
    ]};

struct_info('AuthData') ->
    {struct, union, [
        {1, optional, {struct, struct, {dmsl_cds_thrift, 'CardSecurityCode'}}, 'card_security_code', undefined},
        {2, optional, {struct, struct, {dmsl_cds_thrift, 'Auth3DS'}}, 'auth_3ds', undefined}
    ]};

struct_info('SessionData') ->
    {struct, struct, [
        {1, required, {struct, union, {dmsl_cds_thrift, 'AuthData'}}, 'auth_data', undefined}
    ]};

struct_info('Success') ->
    {struct, struct, []};

struct_info('KeyringOperationStatus') ->
    {struct, union, [
        {1, optional, {struct, struct, {dmsl_cds_thrift, 'Success'}}, 'success', undefined},
        {2, optional, i16, 'more_keys_needed', undefined}
    ]};

struct_info('Activity') ->
    {struct, union, [
        {1, optional, {enum, {dmsl_cds_thrift, 'Initialization'}}, 'initialization', undefined},
        {2, optional, {enum, {dmsl_cds_thrift, 'Rekeying'}}, 'rekeying', undefined},
        {3, optional, {enum, {dmsl_cds_thrift, 'Rotation'}}, 'rotation', undefined},
        {4, optional, {enum, {dmsl_cds_thrift, 'Unlock'}}, 'unlock', undefined}
    ]};

struct_info('RotationState') ->
    {struct, struct, [
        {1, required, {enum, {dmsl_cds_thrift, 'Rotation'}}, 'phase', undefined},
        {2, optional, i32, 'lifetime', undefined},
        {3, required, {map, i16, string}, 'confirmation_shares', undefined}
    ]};

struct_info('InitializationState') ->
    {struct, struct, [
        {1, required, {enum, {dmsl_cds_thrift, 'Initialization'}}, 'phase', undefined},
        {2, optional, i32, 'lifetime', undefined},
        {3, required, {map, i16, string}, 'validation_shares', undefined}
    ]};

struct_info('UnlockState') ->
    {struct, struct, [
        {1, required, {enum, {dmsl_cds_thrift, 'Unlock'}}, 'phase', undefined},
        {2, optional, i32, 'lifetime', undefined},
        {3, required, {map, i16, string}, 'confirmation_shares', undefined}
    ]};

struct_info('RekeyingState') ->
    {struct, struct, [
        {1, required, {enum, {dmsl_cds_thrift, 'Rekeying'}}, 'phase', undefined},
        {2, optional, i32, 'lifetime', undefined},
        {3, required, {map, i16, string}, 'confirmation_shares', undefined},
        {4, required, {map, i16, string}, 'validation_shares', undefined}
    ]};

struct_info('ActivitiesState') ->
    {struct, struct, [
        {1, required, {struct, struct, {dmsl_cds_thrift, 'InitializationState'}}, 'initialization', undefined},
        {2, required, {struct, struct, {dmsl_cds_thrift, 'RotationState'}}, 'rotation', undefined},
        {3, required, {struct, struct, {dmsl_cds_thrift, 'UnlockState'}}, 'unlock', undefined},
        {4, required, {struct, struct, {dmsl_cds_thrift, 'RekeyingState'}}, 'rekeying', undefined}
    ]};

struct_info('KeyringState') ->
    {struct, struct, [
        {1, required, {enum, {dmsl_cds_thrift, 'Status'}}, 'status', undefined},
        {2, required, {struct, struct, {dmsl_cds_thrift, 'ActivitiesState'}}, 'activities', undefined}
    ]};

struct_info('InvalidStatus') ->
    {struct, exception, [
        {1, required, {enum, {dmsl_cds_thrift, 'Status'}}, 'status', undefined}
    ]};

struct_info('InvalidActivity') ->
    {struct, exception, [
        {1, required, {struct, union, {dmsl_cds_thrift, 'Activity'}}, 'activity', undefined}
    ]};

struct_info('InvalidCardData') ->
    {struct, exception, [
        {1, optional, string, 'reason', undefined}
    ]};

struct_info('CardDataNotFound') ->
    {struct, exception, []};

struct_info('SessionDataNotFound') ->
    {struct, exception, []};

struct_info('InvalidArguments') ->
    {struct, exception, [
        {1, optional, string, 'reason', undefined}
    ]};

struct_info('OperationAborted') ->
    {struct, exception, [
        {1, optional, string, 'reason', undefined}
    ]};

struct_info('VerificationFailed') ->
    {struct, exception, []};

struct_info(_) -> erlang:error(badarg).

-spec record_name(struct_name() | exception_name()) -> atom() | no_return().

record_name('EncryptedMasterKeyShare') ->
    'EncryptedMasterKeyShare';

record_name('ExpDate') ->
    'ExpDate';

record_name('CardData') ->
    'CardData';

record_name('PutCardDataResult') ->
    'PutCardDataResult';

record_name('PutCardResult') ->
    'PutCardResult';

record_name('CardSecurityCode') ->
    'CardSecurityCode';

record_name('Auth3DS') ->
    'Auth3DS';

record_name('SessionData') ->
    'SessionData';

record_name('Success') ->
    'Success';

record_name('RotationState') ->
    'RotationState';

record_name('InitializationState') ->
    'InitializationState';

record_name('UnlockState') ->
    'UnlockState';

record_name('RekeyingState') ->
    'RekeyingState';

record_name('ActivitiesState') ->
    'ActivitiesState';

record_name('KeyringState') ->
    'KeyringState';

record_name('InvalidStatus') ->
    'InvalidStatus';

record_name('InvalidActivity') ->
    'InvalidActivity';

record_name('InvalidCardData') ->
    'InvalidCardData';

record_name('CardDataNotFound') ->
    'CardDataNotFound';

record_name('SessionDataNotFound') ->
    'SessionDataNotFound';

record_name('InvalidArguments') ->
    'InvalidArguments';

record_name('OperationAborted') ->
    'OperationAborted';

record_name('VerificationFailed') ->
    'VerificationFailed';

record_name(_) -> error(badarg).

-spec functions(service_name()) -> [function_name()] | no_return().

functions('Keyring') ->
    [
        'StartInit',
        'ValidateInit',
        'CancelInit',
        'StartRekey',
        'ConfirmRekey',
        'StartRekeyValidation',
        'ValidateRekey',
        'CancelRekey',
        'GetState',
        'StartUnlock',
        'ConfirmUnlock',
        'CancelUnlock',
        'Lock',
        'StartRotate',
        'ConfirmRotate',
        'CancelRotate'
    ];

functions('Storage') ->
    [
        'GetCardData',
        'GetSessionCardData',
        'GetSessionData',
        'PutCardData',
        'PutCard',
        'PutSession'
    ];

functions(_) -> error(badarg).

-spec function_info(service_name(), function_name(), params_type | reply_type | exceptions) ->
    struct_info() | no_return().

function_info('Keyring', 'StartInit', params_type) ->
    {struct, struct, [
        {1, undefined, i16, 'threshold', undefined}
    ]};
function_info('Keyring', 'StartInit', reply_type) ->
    {list, {struct, struct, {dmsl_cds_thrift, 'EncryptedMasterKeyShare'}}};
function_info('Keyring', 'StartInit', exceptions) ->
    {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_cds_thrift, 'InvalidStatus'}}, 'invalid_status', undefined},
        {2, undefined, {struct, exception, {dmsl_cds_thrift, 'InvalidActivity'}}, 'invalid_activity', undefined},
        {3, undefined, {struct, exception, {dmsl_cds_thrift, 'InvalidArguments'}}, 'invalid_args', undefined}
    ]};
function_info('Keyring', 'ValidateInit', params_type) ->
    {struct, struct, [
        {1, undefined, string, 'shareholder_id', undefined},
        {2, undefined, string, 'key_share', undefined}
    ]};
function_info('Keyring', 'ValidateInit', reply_type) ->
    {struct, union, {dmsl_cds_thrift, 'KeyringOperationStatus'}};
function_info('Keyring', 'ValidateInit', exceptions) ->
    {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_cds_thrift, 'InvalidStatus'}}, 'invalid_status', undefined},
        {2, undefined, {struct, exception, {dmsl_cds_thrift, 'InvalidActivity'}}, 'invalid_activity', undefined},
        {3, undefined, {struct, exception, {dmsl_cds_thrift, 'VerificationFailed'}}, 'verification_failed', undefined},
        {4, undefined, {struct, exception, {dmsl_cds_thrift, 'OperationAborted'}}, 'operation_aborted', undefined}
    ]};
function_info('Keyring', 'CancelInit', params_type) ->
    {struct, struct, []};
function_info('Keyring', 'CancelInit', reply_type) ->
    {struct, struct, []};
function_info('Keyring', 'CancelInit', exceptions) ->
    {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_cds_thrift, 'InvalidStatus'}}, 'invalid_status', undefined}
    ]};
function_info('Keyring', 'StartRekey', params_type) ->
    {struct, struct, [
        {1, undefined, i16, 'threshold', undefined}
    ]};
function_info('Keyring', 'StartRekey', reply_type) ->
    {struct, struct, []};
function_info('Keyring', 'StartRekey', exceptions) ->
    {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_cds_thrift, 'InvalidStatus'}}, 'invalid_status', undefined},
        {2, undefined, {struct, exception, {dmsl_cds_thrift, 'InvalidActivity'}}, 'invalid_activity', undefined},
        {3, undefined, {struct, exception, {dmsl_cds_thrift, 'InvalidArguments'}}, 'invalid_args', undefined}
    ]};
function_info('Keyring', 'ConfirmRekey', params_type) ->
    {struct, struct, [
        {1, undefined, string, 'shareholder_id', undefined},
        {2, undefined, string, 'key_share', undefined}
    ]};
function_info('Keyring', 'ConfirmRekey', reply_type) ->
    {struct, union, {dmsl_cds_thrift, 'KeyringOperationStatus'}};
function_info('Keyring', 'ConfirmRekey', exceptions) ->
    {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_cds_thrift, 'InvalidStatus'}}, 'invalid_status', undefined},
        {2, undefined, {struct, exception, {dmsl_cds_thrift, 'InvalidActivity'}}, 'invalid_activity', undefined},
        {3, undefined, {struct, exception, {dmsl_cds_thrift, 'VerificationFailed'}}, 'verification_failed', undefined},
        {4, undefined, {struct, exception, {dmsl_cds_thrift, 'OperationAborted'}}, 'operation_aborted', undefined}
    ]};
function_info('Keyring', 'StartRekeyValidation', params_type) ->
    {struct, struct, []};
function_info('Keyring', 'StartRekeyValidation', reply_type) ->
    {list, {struct, struct, {dmsl_cds_thrift, 'EncryptedMasterKeyShare'}}};
function_info('Keyring', 'StartRekeyValidation', exceptions) ->
    {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_cds_thrift, 'InvalidStatus'}}, 'invalid_status', undefined},
        {2, undefined, {struct, exception, {dmsl_cds_thrift, 'InvalidActivity'}}, 'invalid_activity', undefined}
    ]};
function_info('Keyring', 'ValidateRekey', params_type) ->
    {struct, struct, [
        {1, undefined, string, 'shareholder_id', undefined},
        {2, undefined, string, 'key_share', undefined}
    ]};
function_info('Keyring', 'ValidateRekey', reply_type) ->
    {struct, union, {dmsl_cds_thrift, 'KeyringOperationStatus'}};
function_info('Keyring', 'ValidateRekey', exceptions) ->
    {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_cds_thrift, 'InvalidStatus'}}, 'invalid_status', undefined},
        {2, undefined, {struct, exception, {dmsl_cds_thrift, 'InvalidActivity'}}, 'invalid_activity', undefined},
        {3, undefined, {struct, exception, {dmsl_cds_thrift, 'VerificationFailed'}}, 'verification_failed', undefined},
        {4, undefined, {struct, exception, {dmsl_cds_thrift, 'OperationAborted'}}, 'operation_aborted', undefined}
    ]};
function_info('Keyring', 'CancelRekey', params_type) ->
    {struct, struct, []};
function_info('Keyring', 'CancelRekey', reply_type) ->
    {struct, struct, []};
function_info('Keyring', 'CancelRekey', exceptions) ->
    {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_cds_thrift, 'InvalidStatus'}}, 'invalid_status', undefined}
    ]};
function_info('Keyring', 'GetState', params_type) ->
    {struct, struct, []};
function_info('Keyring', 'GetState', reply_type) ->
    {struct, struct, {dmsl_cds_thrift, 'KeyringState'}};
function_info('Keyring', 'GetState', exceptions) ->
    {struct, struct, []};
function_info('Keyring', 'StartUnlock', params_type) ->
    {struct, struct, []};
function_info('Keyring', 'StartUnlock', reply_type) ->
    {struct, struct, []};
function_info('Keyring', 'StartUnlock', exceptions) ->
    {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_cds_thrift, 'InvalidStatus'}}, 'invalid_status', undefined},
        {2, undefined, {struct, exception, {dmsl_cds_thrift, 'InvalidActivity'}}, 'invalid_activity', undefined}
    ]};
function_info('Keyring', 'ConfirmUnlock', params_type) ->
    {struct, struct, [
        {1, undefined, string, 'shareholder_id', undefined},
        {2, undefined, string, 'key_share', undefined}
    ]};
function_info('Keyring', 'ConfirmUnlock', reply_type) ->
    {struct, union, {dmsl_cds_thrift, 'KeyringOperationStatus'}};
function_info('Keyring', 'ConfirmUnlock', exceptions) ->
    {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_cds_thrift, 'InvalidStatus'}}, 'invalid_status', undefined},
        {2, undefined, {struct, exception, {dmsl_cds_thrift, 'InvalidActivity'}}, 'invalid_activity', undefined},
        {3, undefined, {struct, exception, {dmsl_cds_thrift, 'VerificationFailed'}}, 'verification_failed', undefined},
        {4, undefined, {struct, exception, {dmsl_cds_thrift, 'OperationAborted'}}, 'operation_aborted', undefined}
    ]};
function_info('Keyring', 'CancelUnlock', params_type) ->
    {struct, struct, []};
function_info('Keyring', 'CancelUnlock', reply_type) ->
    {struct, struct, []};
function_info('Keyring', 'CancelUnlock', exceptions) ->
    {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_cds_thrift, 'InvalidStatus'}}, 'invalid_status', undefined}
    ]};
function_info('Keyring', 'Lock', params_type) ->
    {struct, struct, []};
function_info('Keyring', 'Lock', reply_type) ->
    {struct, struct, []};
function_info('Keyring', 'Lock', exceptions) ->
    {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_cds_thrift, 'InvalidStatus'}}, 'invalid_status', undefined}
    ]};
function_info('Keyring', 'StartRotate', params_type) ->
    {struct, struct, []};
function_info('Keyring', 'StartRotate', reply_type) ->
    {struct, struct, []};
function_info('Keyring', 'StartRotate', exceptions) ->
    {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_cds_thrift, 'InvalidStatus'}}, 'invalid_status', undefined},
        {2, undefined, {struct, exception, {dmsl_cds_thrift, 'InvalidActivity'}}, 'invalid_activity', undefined}
    ]};
function_info('Keyring', 'ConfirmRotate', params_type) ->
    {struct, struct, [
        {1, undefined, string, 'shareholder_id', undefined},
        {2, undefined, string, 'key_share', undefined}
    ]};
function_info('Keyring', 'ConfirmRotate', reply_type) ->
    {struct, union, {dmsl_cds_thrift, 'KeyringOperationStatus'}};
function_info('Keyring', 'ConfirmRotate', exceptions) ->
    {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_cds_thrift, 'InvalidStatus'}}, 'invalid_status', undefined},
        {2, undefined, {struct, exception, {dmsl_cds_thrift, 'InvalidActivity'}}, 'invalid_activity', undefined},
        {3, undefined, {struct, exception, {dmsl_cds_thrift, 'VerificationFailed'}}, 'verification_failed', undefined},
        {4, undefined, {struct, exception, {dmsl_cds_thrift, 'OperationAborted'}}, 'operation_aborted', undefined}
    ]};
function_info('Keyring', 'CancelRotate', params_type) ->
    {struct, struct, []};
function_info('Keyring', 'CancelRotate', reply_type) ->
    {struct, struct, []};
function_info('Keyring', 'CancelRotate', exceptions) ->
    {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_cds_thrift, 'InvalidStatus'}}, 'invalid_status', undefined}
    ]};

function_info('Storage', 'GetCardData', params_type) ->
    {struct, struct, [
        {1, undefined, string, 'token', undefined}
    ]};
function_info('Storage', 'GetCardData', reply_type) ->
    {struct, struct, {dmsl_cds_thrift, 'CardData'}};
function_info('Storage', 'GetCardData', exceptions) ->
    {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_cds_thrift, 'CardDataNotFound'}}, 'not_found', undefined}
    ]};
function_info('Storage', 'GetSessionCardData', params_type) ->
    {struct, struct, [
        {1, undefined, string, 'token', undefined},
        {2, undefined, string, 'session_id', undefined}
    ]};
function_info('Storage', 'GetSessionCardData', reply_type) ->
    {struct, struct, {dmsl_cds_thrift, 'CardData'}};
function_info('Storage', 'GetSessionCardData', exceptions) ->
    {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_cds_thrift, 'CardDataNotFound'}}, 'not_found', undefined}
    ]};
function_info('Storage', 'GetSessionData', params_type) ->
    {struct, struct, [
        {1, undefined, string, 'session_id', undefined}
    ]};
function_info('Storage', 'GetSessionData', reply_type) ->
    {struct, struct, {dmsl_cds_thrift, 'SessionData'}};
function_info('Storage', 'GetSessionData', exceptions) ->
    {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_cds_thrift, 'SessionDataNotFound'}}, 'not_found', undefined}
    ]};
function_info('Storage', 'PutCardData', params_type) ->
    {struct, struct, [
        {1, undefined, {struct, struct, {dmsl_cds_thrift, 'CardData'}}, 'card_data', undefined},
        {2, undefined, {struct, struct, {dmsl_cds_thrift, 'SessionData'}}, 'session_data', undefined}
    ]};
function_info('Storage', 'PutCardData', reply_type) ->
    {struct, struct, {dmsl_cds_thrift, 'PutCardDataResult'}};
function_info('Storage', 'PutCardData', exceptions) ->
    {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_cds_thrift, 'InvalidCardData'}}, 'invalid', undefined}
    ]};
function_info('Storage', 'PutCard', params_type) ->
    {struct, struct, [
        {1, undefined, {struct, struct, {dmsl_cds_thrift, 'CardData'}}, 'card_data', undefined}
    ]};
function_info('Storage', 'PutCard', reply_type) ->
    {struct, struct, {dmsl_cds_thrift, 'PutCardResult'}};
function_info('Storage', 'PutCard', exceptions) ->
    {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_cds_thrift, 'InvalidCardData'}}, 'invalid', undefined}
    ]};
function_info('Storage', 'PutSession', params_type) ->
    {struct, struct, [
        {1, undefined, string, 'session_id', undefined},
        {2, undefined, {struct, struct, {dmsl_cds_thrift, 'SessionData'}}, 'session_data', undefined}
    ]};
function_info('Storage', 'PutSession', reply_type) ->
    {struct, struct, []};
function_info('Storage', 'PutSession', exceptions) ->
    {struct, struct, []};

function_info(_Service, _Function, _InfoType) -> erlang:error(badarg).
