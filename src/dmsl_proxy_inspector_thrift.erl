%%
%% Autogenerated by Thrift Compiler (1.0.0-dev)
%%
%% DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
%%

-module(dmsl_proxy_inspector_thrift).

-include("dmsl_proxy_inspector_thrift.hrl").

-export([namespace/0]).
-export([enums/0]).
-export([typedefs/0]).
-export([structs/0]).
-export([services/0]).
-export([typedef_info/1]).
-export([enum_info/1]).
-export([struct_info/1]).
-export([record_name/1]).
-export([functions/1]).
-export([function_info/3]).

-export_type([namespace/0]).
-export_type([typedef_name/0]).
-export_type([enum_name/0]).
-export_type([struct_name/0]).
-export_type([exception_name/0]).
-export_type([service_name/0]).
-export_type([function_name/0]).

-export_type([enum_info/0]).
-export_type([struct_info/0]).

-export_type([
    'Context'/0,
    'PaymentInfo'/0,
    'Party'/0,
    'Shop'/0,
    'InvoicePayment'/0,
    'Invoice'/0
]).

-type namespace() :: 'proxy_inspector'.

%%
%% typedefs
%%
-type typedef_name() :: none().


%%
%% enums
%%
-type enum_name() :: none().

%%
%% structs, unions and exceptions
%%
-type struct_name() ::
    'Context' |
    'PaymentInfo' |
    'Party' |
    'Shop' |
    'InvoicePayment' |
    'Invoice'.

-type exception_name() :: none().

%% struct 'Context'
-type 'Context'() :: #'proxy_inspector_Context'{}.

%% struct 'PaymentInfo'
-type 'PaymentInfo'() :: #'proxy_inspector_PaymentInfo'{}.

%% struct 'Party'
-type 'Party'() :: #'proxy_inspector_Party'{}.

%% struct 'Shop'
-type 'Shop'() :: #'proxy_inspector_Shop'{}.

%% struct 'InvoicePayment'
-type 'InvoicePayment'() :: #'proxy_inspector_InvoicePayment'{}.

%% struct 'Invoice'
-type 'Invoice'() :: #'proxy_inspector_Invoice'{}.

%%
%% services and functions
%%
-type service_name() ::
    'InspectorProxy'.

-type function_name() ::
    'InspectorProxy_service_functions'().

-type 'InspectorProxy_service_functions'() ::
    'InspectPayment'.

-export_type(['InspectorProxy_service_functions'/0]).


-type struct_flavour() :: struct | exception | union.
-type field_num() :: pos_integer().
-type field_name() :: atom().
-type field_req() :: required | optional | undefined.

-type type_ref() :: {module(), atom()}.
-type field_type() ::
    bool | byte | i16 | i32 | i64 | string | double |
    {enum, type_ref()} |
    {struct, struct_flavour(), type_ref()} |
    {list, field_type()} |
    {set, field_type()} |
    {map, field_type(), field_type()}.

-type struct_field_info() ::
    {field_num(), field_req(), field_type(), field_name(), any()}.
-type struct_info() ::
    {struct, struct_flavour(), [struct_field_info()]}.

-type enum_choice() :: none().

-type enum_field_info() ::
    {enum_choice(), integer()}.
-type enum_info() ::
    {enum, [enum_field_info()]}.

-spec typedefs() -> [].

typedefs() ->
    [].

-spec enums() -> [].

enums() ->
    [].

-spec structs() -> [struct_name()].

structs() ->
    [
        'Context',
        'PaymentInfo',
        'Party',
        'Shop',
        'InvoicePayment',
        'Invoice'
    ].

-spec services() -> [service_name()].

services() ->
    [
        'InspectorProxy'
    ].

-spec namespace() -> namespace().

namespace() ->
    'proxy_inspector'.

-spec typedef_info(_) -> no_return().

typedef_info(_) -> erlang:error(badarg).

-spec enum_info(_) -> no_return().

enum_info(_) -> erlang:error(badarg).

-spec struct_info(struct_name() | exception_name()) -> struct_info() | no_return().

struct_info('Context') ->
    {struct, struct, [
        {1, required, {struct, struct, {dmsl_proxy_inspector_thrift, 'PaymentInfo'}}, 'payment', undefined},
        {2, optional, {map, string, string}, 'options', #{}}
    ]};

struct_info('PaymentInfo') ->
    {struct, struct, [
        {1, required, {struct, struct, {dmsl_proxy_inspector_thrift, 'Shop'}}, 'shop', undefined},
        {2, required, {struct, struct, {dmsl_proxy_inspector_thrift, 'InvoicePayment'}}, 'payment', undefined},
        {3, required, {struct, struct, {dmsl_proxy_inspector_thrift, 'Invoice'}}, 'invoice', undefined},
        {4, required, {struct, struct, {dmsl_proxy_inspector_thrift, 'Party'}}, 'party', undefined}
    ]};

struct_info('Party') ->
    {struct, struct, [
        {1, required, string, 'party_id', undefined}
    ]};

struct_info('Shop') ->
    {struct, struct, [
        {1, required, string, 'id', undefined},
        {2, required, {struct, struct, {dmsl_domain_thrift, 'Category'}}, 'category', undefined},
        {3, required, {struct, struct, {dmsl_domain_thrift, 'ShopDetails'}}, 'details', undefined},
        {4, required, {struct, union, {dmsl_domain_thrift, 'ShopLocation'}}, 'location', undefined}
    ]};

struct_info('InvoicePayment') ->
    {struct, struct, [
        {1, required, string, 'id', undefined},
        {2, required, string, 'created_at', undefined},
        {3, required, {struct, union, {dmsl_domain_thrift, 'Payer'}}, 'payer', undefined},
        {4, required, {struct, struct, {dmsl_domain_thrift, 'Cash'}}, 'cost', undefined}
    ]};

struct_info('Invoice') ->
    {struct, struct, [
        {1, required, string, 'id', undefined},
        {2, required, string, 'created_at', undefined},
        {3, required, string, 'due', undefined},
        {4, required, {struct, struct, {dmsl_domain_thrift, 'InvoiceDetails'}}, 'details', undefined}
    ]};

struct_info(_) -> erlang:error(badarg).

-spec record_name(struct_name() | exception_name()) -> atom() | no_return().

record_name('Context') ->
    'proxy_inspector_Context';

record_name('PaymentInfo') ->
    'proxy_inspector_PaymentInfo';

record_name('Party') ->
    'proxy_inspector_Party';

record_name('Shop') ->
    'proxy_inspector_Shop';

record_name('InvoicePayment') ->
    'proxy_inspector_InvoicePayment';

record_name('Invoice') ->
    'proxy_inspector_Invoice';

record_name(_) -> error(badarg).

-spec functions(service_name()) -> [function_name()] | no_return().

functions('InspectorProxy') ->
    [
        'InspectPayment'
    ];

functions(_) -> error(badarg).

-spec function_info(service_name(), function_name(), params_type | reply_type | exceptions) ->
    struct_info() | no_return().

function_info('InspectorProxy', 'InspectPayment', params_type) ->
    {struct, struct, [
        {1, undefined, {struct, struct, {dmsl_proxy_inspector_thrift, 'Context'}}, 'context', undefined}
    ]};
function_info('InspectorProxy', 'InspectPayment', reply_type) ->
    {enum, {dmsl_domain_thrift, 'RiskScore'}};
function_info('InspectorProxy', 'InspectPayment', exceptions) ->
    {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_base_thrift, 'InvalidRequest'}}, 'ex1', undefined}
    ]};

function_info(_Service, _Function, _InfoType) -> erlang:error(badarg).
