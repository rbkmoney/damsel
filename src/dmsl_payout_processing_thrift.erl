%%
%% Autogenerated by Thrift Compiler (1.0.0-dev)
%%
%% DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
%%

-module(dmsl_payout_processing_thrift).

-include("dmsl_payout_processing_thrift.hrl").

-export([namespace/0]).
-export([enums/0]).
-export([typedefs/0]).
-export([structs/0]).
-export([services/0]).
-export([typedef_info/1]).
-export([enum_info/1]).
-export([struct_info/1]).
-export([record_name/1]).
-export([functions/1]).
-export([function_info/3]).

-export_type([namespace/0]).
-export_type([typedef_name/0]).
-export_type([enum_name/0]).
-export_type([struct_name/0]).
-export_type([exception_name/0]).
-export_type([service_name/0]).
-export_type([function_name/0]).

-export_type([enum_info/0]).
-export_type([struct_info/0]).

-export_type([
    'PayoutID'/0,
    'Events'/0,
    'UserID'/0,
    'Metadata'/0,
    'PayoutSummary'/0
]).
-export_type([
    'OperationType'/0,
    'PayoutSearchStatus'/0,
    'PayoutSearchType'/0
]).
-export_type([
    'Event'/0,
    'EventSource'/0,
    'EventPayload'/0,
    'PayoutChange'/0,
    'PayoutCreated'/0,
    'PayoutSummaryItem'/0,
    'Payout'/0,
    'PayoutStatus'/0,
    'PayoutUnpaid'/0,
    'PayoutPaid'/0,
    'PayoutCancelled'/0,
    'PayoutConfirmed'/0,
    'PayoutType'/0,
    'Wallet'/0,
    'PayoutAccount'/0,
    'RussianPayoutAccount'/0,
    'InternationalPayoutAccount'/0,
    'PayoutStatusChanged'/0,
    'EventRange'/0,
    'TimeRange'/0,
    'AmountRange'/0,
    'ShopParams'/0,
    'PayoutParams'/0,
    'GeneratePayoutParams'/0,
    'PayoutSearchCriteria'/0,
    'PayoutSearchRequest'/0,
    'PayoutSearchResponse'/0
]).
-export_type([
    'NoLastEvent'/0,
    'EventNotFound'/0,
    'InvalidPayoutTool'/0,
    'PayoutNotFound'/0,
    'InsufficientFunds'/0,
    'LimitExceeded'/0
]).

-type namespace() :: 'payout_processing'.

%%
%% typedefs
%%
-type typedef_name() ::
    'PayoutID' |
    'Events' |
    'UserID' |
    'Metadata' |
    'PayoutSummary'.

-type 'PayoutID'() :: dmsl_base_thrift:'ID'().
-type 'Events'() :: ['Event'()].
-type 'UserID'() :: dmsl_base_thrift:'ID'().
-type 'Metadata'() :: #{binary() => dmsl_msgpack_thrift:'Value'()}.
-type 'PayoutSummary'() :: ['PayoutSummaryItem'()].

%%
%% enums
%%
-type enum_name() ::
    'OperationType' |
    'PayoutSearchStatus' |
    'PayoutSearchType'.

%% enum 'OperationType'
-type 'OperationType'() ::
    'payment' |
    'refund' |
    'adjustment' |
    'chargeback'.

%% enum 'PayoutSearchStatus'
-type 'PayoutSearchStatus'() ::
    'unpaid' |
    'paid' |
    'cancelled' |
    'confirmed'.

%% enum 'PayoutSearchType'
-type 'PayoutSearchType'() ::
    'bank_account' |
    'wallet'.

%%
%% structs, unions and exceptions
%%
-type struct_name() ::
    'Event' |
    'EventSource' |
    'EventPayload' |
    'PayoutChange' |
    'PayoutCreated' |
    'PayoutSummaryItem' |
    'Payout' |
    'PayoutStatus' |
    'PayoutUnpaid' |
    'PayoutPaid' |
    'PayoutCancelled' |
    'PayoutConfirmed' |
    'PayoutType' |
    'Wallet' |
    'PayoutAccount' |
    'RussianPayoutAccount' |
    'InternationalPayoutAccount' |
    'PayoutStatusChanged' |
    'EventRange' |
    'TimeRange' |
    'AmountRange' |
    'ShopParams' |
    'PayoutParams' |
    'GeneratePayoutParams' |
    'PayoutSearchCriteria' |
    'PayoutSearchRequest' |
    'PayoutSearchResponse'.

-type exception_name() ::
    'NoLastEvent' |
    'EventNotFound' |
    'InvalidPayoutTool' |
    'PayoutNotFound' |
    'InsufficientFunds' |
    'LimitExceeded'.

%% struct 'Event'
-type 'Event'() :: #'payout_processing_Event'{}.

%% union 'EventSource'
-type 'EventSource'() ::
    {'payout_id', 'PayoutID'()}.

%% union 'EventPayload'
-type 'EventPayload'() ::
    {'payout_changes', ['PayoutChange'()]}.

%% union 'PayoutChange'
-type 'PayoutChange'() ::
    {'payout_created', 'PayoutCreated'()} |
    {'payout_status_changed', 'PayoutStatusChanged'()}.

%% struct 'PayoutCreated'
-type 'PayoutCreated'() :: #'payout_processing_PayoutCreated'{}.

%% struct 'PayoutSummaryItem'
-type 'PayoutSummaryItem'() :: #'payout_processing_PayoutSummaryItem'{}.

%% struct 'Payout'
-type 'Payout'() :: #'payout_processing_Payout'{}.

%% union 'PayoutStatus'
-type 'PayoutStatus'() ::
    {'unpaid', 'PayoutUnpaid'()} |
    {'paid', 'PayoutPaid'()} |
    {'cancelled', 'PayoutCancelled'()} |
    {'confirmed', 'PayoutConfirmed'()}.

%% struct 'PayoutUnpaid'
-type 'PayoutUnpaid'() :: #'payout_processing_PayoutUnpaid'{}.

%% struct 'PayoutPaid'
-type 'PayoutPaid'() :: #'payout_processing_PayoutPaid'{}.

%% struct 'PayoutCancelled'
-type 'PayoutCancelled'() :: #'payout_processing_PayoutCancelled'{}.

%% struct 'PayoutConfirmed'
-type 'PayoutConfirmed'() :: #'payout_processing_PayoutConfirmed'{}.

%% union 'PayoutType'
-type 'PayoutType'() ::
    {'bank_account', 'PayoutAccount'()} |
    {'wallet', 'Wallet'()}.

%% struct 'Wallet'
-type 'Wallet'() :: #'payout_processing_Wallet'{}.

%% union 'PayoutAccount'
-type 'PayoutAccount'() ::
    {'russian_payout_account', 'RussianPayoutAccount'()} |
    {'international_payout_account', 'InternationalPayoutAccount'()}.

%% struct 'RussianPayoutAccount'
-type 'RussianPayoutAccount'() :: #'payout_processing_RussianPayoutAccount'{}.

%% struct 'InternationalPayoutAccount'
-type 'InternationalPayoutAccount'() :: #'payout_processing_InternationalPayoutAccount'{}.

%% struct 'PayoutStatusChanged'
-type 'PayoutStatusChanged'() :: #'payout_processing_PayoutStatusChanged'{}.

%% struct 'EventRange'
-type 'EventRange'() :: #'payout_processing_EventRange'{}.

%% struct 'TimeRange'
-type 'TimeRange'() :: #'payout_processing_TimeRange'{}.

%% struct 'AmountRange'
-type 'AmountRange'() :: #'payout_processing_AmountRange'{}.

%% struct 'ShopParams'
-type 'ShopParams'() :: #'payout_processing_ShopParams'{}.

%% struct 'PayoutParams'
-type 'PayoutParams'() :: #'payout_processing_PayoutParams'{}.

%% struct 'GeneratePayoutParams'
-type 'GeneratePayoutParams'() :: #'payout_processing_GeneratePayoutParams'{}.

%% struct 'PayoutSearchCriteria'
-type 'PayoutSearchCriteria'() :: #'payout_processing_PayoutSearchCriteria'{}.

%% struct 'PayoutSearchRequest'
-type 'PayoutSearchRequest'() :: #'payout_processing_PayoutSearchRequest'{}.

%% struct 'PayoutSearchResponse'
-type 'PayoutSearchResponse'() :: #'payout_processing_PayoutSearchResponse'{}.

%% exception 'NoLastEvent'
-type 'NoLastEvent'() :: #'payout_processing_NoLastEvent'{}.

%% exception 'EventNotFound'
-type 'EventNotFound'() :: #'payout_processing_EventNotFound'{}.

%% exception 'InvalidPayoutTool'
-type 'InvalidPayoutTool'() :: #'payout_processing_InvalidPayoutTool'{}.

%% exception 'PayoutNotFound'
-type 'PayoutNotFound'() :: #'payout_processing_PayoutNotFound'{}.

%% exception 'InsufficientFunds'
-type 'InsufficientFunds'() :: #'payout_processing_InsufficientFunds'{}.

%% exception 'LimitExceeded'
-type 'LimitExceeded'() :: #'payout_processing_LimitExceeded'{}.

%%
%% services and functions
%%
-type service_name() ::
    'EventSink' |
    'PayoutManagement'.

-type function_name() ::
    'EventSink_service_functions'() |
    'PayoutManagement_service_functions'().

-type 'EventSink_service_functions'() ::
    'GetEvents' |
    'GetLastEventID'.

-export_type(['EventSink_service_functions'/0]).

-type 'PayoutManagement_service_functions'() ::
    'CreatePayout' |
    'Get' |
    'GetEvents' |
    'GeneratePayouts' |
    'ConfirmPayout' |
    'CancelPayout' |
    'GetPayoutsInfo' |
    'GenerateReport'.

-export_type(['PayoutManagement_service_functions'/0]).


-type struct_flavour() :: struct | exception | union.
-type field_num() :: pos_integer().
-type field_name() :: atom().
-type field_req() :: required | optional | undefined.

-type type_ref() :: {module(), atom()}.
-type field_type() ::
    bool | byte | i16 | i32 | i64 | string | double |
    {enum, type_ref()} |
    {struct, struct_flavour(), type_ref()} |
    {list, field_type()} |
    {set, field_type()} |
    {map, field_type(), field_type()}.

-type struct_field_info() ::
    {field_num(), field_req(), field_type(), field_name(), any()}.
-type struct_info() ::
    {struct, struct_flavour(), [struct_field_info()]}.

-type enum_choice() ::
    'OperationType'() |
    'PayoutSearchStatus'() |
    'PayoutSearchType'().

-type enum_field_info() ::
    {enum_choice(), integer()}.
-type enum_info() ::
    {enum, [enum_field_info()]}.

-spec typedefs() -> [typedef_name()].

typedefs() ->
    [
        'PayoutID',
        'Events',
        'UserID',
        'Metadata',
        'PayoutSummary'
    ].

-spec enums() -> [enum_name()].

enums() ->
    [
        'OperationType',
        'PayoutSearchStatus',
        'PayoutSearchType'
    ].

-spec structs() -> [struct_name()].

structs() ->
    [
        'Event',
        'EventSource',
        'EventPayload',
        'PayoutChange',
        'PayoutCreated',
        'PayoutSummaryItem',
        'Payout',
        'PayoutStatus',
        'PayoutUnpaid',
        'PayoutPaid',
        'PayoutCancelled',
        'PayoutConfirmed',
        'PayoutType',
        'Wallet',
        'PayoutAccount',
        'RussianPayoutAccount',
        'InternationalPayoutAccount',
        'PayoutStatusChanged',
        'EventRange',
        'TimeRange',
        'AmountRange',
        'ShopParams',
        'PayoutParams',
        'GeneratePayoutParams',
        'PayoutSearchCriteria',
        'PayoutSearchRequest',
        'PayoutSearchResponse'
    ].

-spec services() -> [service_name()].

services() ->
    [
        'EventSink',
        'PayoutManagement'
    ].

-spec namespace() -> namespace().

namespace() ->
    'payout_processing'.

-spec typedef_info(typedef_name()) -> field_type() | no_return().

typedef_info('PayoutID') ->
    string;

typedef_info('Events') ->
    {list, {struct, struct, {dmsl_payout_processing_thrift, 'Event'}}};

typedef_info('UserID') ->
    string;

typedef_info('Metadata') ->
    {map, string, {struct, union, {dmsl_msgpack_thrift, 'Value'}}};

typedef_info('PayoutSummary') ->
    {list, {struct, struct, {dmsl_payout_processing_thrift, 'PayoutSummaryItem'}}};

typedef_info(_) -> erlang:error(badarg).

-spec enum_info(enum_name()) -> enum_info() | no_return().

enum_info('OperationType') ->
    {enum, [
        {'payment', 0},
        {'refund', 1},
        {'adjustment', 2},
        {'chargeback', 3}
    ]};

enum_info('PayoutSearchStatus') ->
    {enum, [
        {'unpaid', 0},
        {'paid', 1},
        {'cancelled', 2},
        {'confirmed', 3}
    ]};

enum_info('PayoutSearchType') ->
    {enum, [
        {'bank_account', 0},
        {'wallet', 1}
    ]};

enum_info(_) -> erlang:error(badarg).

-spec struct_info(struct_name() | exception_name()) -> struct_info() | no_return().

struct_info('Event') ->
    {struct, struct, [
        {1, required, i64, 'id', undefined},
        {2, required, string, 'created_at', undefined},
        {3, required, {struct, union, {dmsl_payout_processing_thrift, 'EventSource'}}, 'source', undefined},
        {4, required, {struct, union, {dmsl_payout_processing_thrift, 'EventPayload'}}, 'payload', undefined}
    ]};

struct_info('EventSource') ->
    {struct, union, [
        {1, optional, string, 'payout_id', undefined}
    ]};

struct_info('EventPayload') ->
    {struct, union, [
        {1, optional, {list, {struct, union, {dmsl_payout_processing_thrift, 'PayoutChange'}}}, 'payout_changes', undefined}
    ]};

struct_info('PayoutChange') ->
    {struct, union, [
        {1, optional, {struct, struct, {dmsl_payout_processing_thrift, 'PayoutCreated'}}, 'payout_created', undefined},
        {2, optional, {struct, struct, {dmsl_payout_processing_thrift, 'PayoutStatusChanged'}}, 'payout_status_changed', undefined}
    ]};

struct_info('PayoutCreated') ->
    {struct, struct, [
        {1, required, {struct, struct, {dmsl_payout_processing_thrift, 'Payout'}}, 'payout', undefined}
    ]};

struct_info('PayoutSummaryItem') ->
    {struct, struct, [
        {1, required, i64, 'amount', undefined},
        {2, required, i64, 'fee', undefined},
        {3, required, string, 'currency_symbolic_code', undefined},
        {4, required, string, 'from_time', undefined},
        {5, required, string, 'to_time', undefined},
        {6, required, {enum, {dmsl_payout_processing_thrift, 'OperationType'}}, 'operation_type', undefined},
        {7, required, i32, 'count', undefined}
    ]};

struct_info('Payout') ->
    {struct, struct, [
        {1, required, string, 'id', undefined},
        {2, required, string, 'party_id', undefined},
        {3, required, string, 'shop_id', undefined},
        {9, required, string, 'contract_id', undefined},
        {4, required, string, 'created_at', undefined},
        {5, required, {struct, union, {dmsl_payout_processing_thrift, 'PayoutStatus'}}, 'status', undefined},
        {11, required, i64, 'amount', undefined},
        {12, required, i64, 'fee', undefined},
        {13, required, {struct, struct, {dmsl_domain_thrift, 'CurrencyRef'}}, 'currency', undefined},
        {6, required, {list, {struct, struct, {dmsl_domain_thrift, 'FinalCashFlowPosting'}}}, 'payout_flow', undefined},
        {7, required, {struct, union, {dmsl_payout_processing_thrift, 'PayoutType'}}, 'type', undefined},
        {8, optional, {list, {struct, struct, {dmsl_payout_processing_thrift, 'PayoutSummaryItem'}}}, 'summary', undefined},
        {10, optional, {map, string, {struct, union, {dmsl_msgpack_thrift, 'Value'}}}, 'metadata', undefined}
    ]};

struct_info('PayoutStatus') ->
    {struct, union, [
        {1, optional, {struct, struct, {dmsl_payout_processing_thrift, 'PayoutUnpaid'}}, 'unpaid', undefined},
        {2, optional, {struct, struct, {dmsl_payout_processing_thrift, 'PayoutPaid'}}, 'paid', undefined},
        {3, optional, {struct, struct, {dmsl_payout_processing_thrift, 'PayoutCancelled'}}, 'cancelled', undefined},
        {4, optional, {struct, struct, {dmsl_payout_processing_thrift, 'PayoutConfirmed'}}, 'confirmed', undefined}
    ]};

struct_info('PayoutUnpaid') ->
    {struct, struct, []};

struct_info('PayoutPaid') ->
    {struct, struct, []};

struct_info('PayoutCancelled') ->
    {struct, struct, [
        {2, required, string, 'details', undefined}
    ]};

struct_info('PayoutConfirmed') ->
    {struct, struct, []};

struct_info('PayoutType') ->
    {struct, union, [
        {2, optional, {struct, union, {dmsl_payout_processing_thrift, 'PayoutAccount'}}, 'bank_account', undefined},
        {3, optional, {struct, struct, {dmsl_payout_processing_thrift, 'Wallet'}}, 'wallet', undefined}
    ]};

struct_info('Wallet') ->
    {struct, struct, [
        {1, required, string, 'wallet_id', undefined}
    ]};

struct_info('PayoutAccount') ->
    {struct, union, [
        {1, optional, {struct, struct, {dmsl_payout_processing_thrift, 'RussianPayoutAccount'}}, 'russian_payout_account', undefined},
        {2, optional, {struct, struct, {dmsl_payout_processing_thrift, 'InternationalPayoutAccount'}}, 'international_payout_account', undefined}
    ]};

struct_info('RussianPayoutAccount') ->
    {struct, struct, [
        {1, required, {struct, struct, {dmsl_domain_thrift, 'RussianBankAccount'}}, 'bank_account', undefined},
        {2, required, string, 'inn', undefined},
        {3, required, string, 'purpose', undefined},
        {4, required, {struct, struct, {dmsl_domain_thrift, 'LegalAgreement'}}, 'legal_agreement', undefined}
    ]};

struct_info('InternationalPayoutAccount') ->
    {struct, struct, [
        {1, required, {struct, struct, {dmsl_domain_thrift, 'InternationalBankAccount'}}, 'bank_account', undefined},
        {2, required, {struct, struct, {dmsl_domain_thrift, 'InternationalLegalEntity'}}, 'legal_entity', undefined},
        {3, required, string, 'purpose', undefined},
        {4, required, {struct, struct, {dmsl_domain_thrift, 'LegalAgreement'}}, 'legal_agreement', undefined}
    ]};

struct_info('PayoutStatusChanged') ->
    {struct, struct, [
        {1, required, {struct, union, {dmsl_payout_processing_thrift, 'PayoutStatus'}}, 'status', undefined}
    ]};

struct_info('EventRange') ->
    {struct, struct, [
        {1, optional, i64, 'after', undefined},
        {2, required, i32, 'limit', undefined}
    ]};

struct_info('TimeRange') ->
    {struct, struct, [
        {1, required, string, 'from_time', undefined},
        {2, required, string, 'to_time', undefined}
    ]};

struct_info('AmountRange') ->
    {struct, struct, [
        {1, optional, i64, 'min', undefined},
        {2, optional, i64, 'max', undefined}
    ]};

struct_info('ShopParams') ->
    {struct, struct, [
        {1, required, string, 'party_id', undefined},
        {2, required, string, 'shop_id', undefined}
    ]};

struct_info('PayoutParams') ->
    {struct, struct, [
        {1, required, string, 'payout_id', undefined},
        {2, required, {struct, struct, {dmsl_payout_processing_thrift, 'ShopParams'}}, 'shop', undefined},
        {3, required, string, 'payout_tool_id', undefined},
        {4, required, {struct, struct, {dmsl_domain_thrift, 'Cash'}}, 'amount', undefined},
        {5, optional, {map, string, {struct, union, {dmsl_msgpack_thrift, 'Value'}}}, 'metadata', undefined}
    ]};

struct_info('GeneratePayoutParams') ->
    {struct, struct, [
        {1, required, {struct, struct, {dmsl_payout_processing_thrift, 'TimeRange'}}, 'time_range', undefined},
        {2, required, {struct, struct, {dmsl_payout_processing_thrift, 'ShopParams'}}, 'shop_params', undefined}
    ]};

struct_info('PayoutSearchCriteria') ->
    {struct, struct, [
        {1, optional, {enum, {dmsl_payout_processing_thrift, 'PayoutSearchStatus'}}, 'status', undefined},
        {2, optional, {struct, struct, {dmsl_payout_processing_thrift, 'TimeRange'}}, 'time_range', undefined},
        {3, optional, {list, string}, 'payout_ids', undefined},
        {4, optional, {struct, struct, {dmsl_payout_processing_thrift, 'AmountRange'}}, 'amount_range', undefined},
        {5, optional, {struct, struct, {dmsl_domain_thrift, 'CurrencyRef'}}, 'currency', undefined},
        {6, optional, {enum, {dmsl_payout_processing_thrift, 'PayoutSearchType'}}, 'type', undefined}
    ]};

struct_info('PayoutSearchRequest') ->
    {struct, struct, [
        {1, required, {struct, struct, {dmsl_payout_processing_thrift, 'PayoutSearchCriteria'}}, 'search_criteria', undefined},
        {2, optional, i64, 'from_id', undefined},
        {3, optional, i32, 'size', undefined}
    ]};

struct_info('PayoutSearchResponse') ->
    {struct, struct, [
        {1, required, {list, {struct, struct, {dmsl_payout_processing_thrift, 'Payout'}}}, 'payouts', undefined},
        {2, required, i64, 'last_id', undefined}
    ]};

struct_info('NoLastEvent') ->
    {struct, exception, []};

struct_info('EventNotFound') ->
    {struct, exception, []};

struct_info('InvalidPayoutTool') ->
    {struct, exception, []};

struct_info('PayoutNotFound') ->
    {struct, exception, []};

struct_info('InsufficientFunds') ->
    {struct, exception, []};

struct_info('LimitExceeded') ->
    {struct, exception, []};

struct_info(_) -> erlang:error(badarg).

-spec record_name(struct_name() | exception_name()) -> atom() | no_return().

record_name('Event') ->
    'payout_processing_Event';

record_name('PayoutCreated') ->
    'payout_processing_PayoutCreated';

record_name('PayoutSummaryItem') ->
    'payout_processing_PayoutSummaryItem';

record_name('Payout') ->
    'payout_processing_Payout';

record_name('PayoutUnpaid') ->
    'payout_processing_PayoutUnpaid';

record_name('PayoutPaid') ->
    'payout_processing_PayoutPaid';

record_name('PayoutCancelled') ->
    'payout_processing_PayoutCancelled';

record_name('PayoutConfirmed') ->
    'payout_processing_PayoutConfirmed';

record_name('Wallet') ->
    'payout_processing_Wallet';

record_name('RussianPayoutAccount') ->
    'payout_processing_RussianPayoutAccount';

record_name('InternationalPayoutAccount') ->
    'payout_processing_InternationalPayoutAccount';

record_name('PayoutStatusChanged') ->
    'payout_processing_PayoutStatusChanged';

record_name('EventRange') ->
    'payout_processing_EventRange';

record_name('TimeRange') ->
    'payout_processing_TimeRange';

record_name('AmountRange') ->
    'payout_processing_AmountRange';

record_name('ShopParams') ->
    'payout_processing_ShopParams';

record_name('PayoutParams') ->
    'payout_processing_PayoutParams';

record_name('GeneratePayoutParams') ->
    'payout_processing_GeneratePayoutParams';

record_name('PayoutSearchCriteria') ->
    'payout_processing_PayoutSearchCriteria';

record_name('PayoutSearchRequest') ->
    'payout_processing_PayoutSearchRequest';

record_name('PayoutSearchResponse') ->
    'payout_processing_PayoutSearchResponse';

record_name('NoLastEvent') ->
    'payout_processing_NoLastEvent';

record_name('EventNotFound') ->
    'payout_processing_EventNotFound';

record_name('InvalidPayoutTool') ->
    'payout_processing_InvalidPayoutTool';

record_name('PayoutNotFound') ->
    'payout_processing_PayoutNotFound';

record_name('InsufficientFunds') ->
    'payout_processing_InsufficientFunds';

record_name('LimitExceeded') ->
    'payout_processing_LimitExceeded';

record_name(_) -> error(badarg).

-spec functions(service_name()) -> [function_name()] | no_return().

functions('EventSink') ->
    [
        'GetEvents',
        'GetLastEventID'
    ];

functions('PayoutManagement') ->
    [
        'CreatePayout',
        'Get',
        'GetEvents',
        'GeneratePayouts',
        'ConfirmPayout',
        'CancelPayout',
        'GetPayoutsInfo',
        'GenerateReport'
    ];

functions(_) -> error(badarg).

-spec function_info(service_name(), function_name(), params_type | reply_type | exceptions) ->
    struct_info() | no_return().

function_info('EventSink', 'GetEvents', params_type) ->
    {struct, struct, [
        {1, undefined, {struct, struct, {dmsl_payout_processing_thrift, 'EventRange'}}, 'range', undefined}
    ]};
function_info('EventSink', 'GetEvents', reply_type) ->
    {list, {struct, struct, {dmsl_payout_processing_thrift, 'Event'}}};
function_info('EventSink', 'GetEvents', exceptions) ->
    {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_payout_processing_thrift, 'EventNotFound'}}, 'ex1', undefined},
        {2, undefined, {struct, exception, {dmsl_base_thrift, 'InvalidRequest'}}, 'ex2', undefined}
    ]};
function_info('EventSink', 'GetLastEventID', params_type) ->
    {struct, struct, []};
function_info('EventSink', 'GetLastEventID', reply_type) ->
    i64;
function_info('EventSink', 'GetLastEventID', exceptions) ->
    {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_payout_processing_thrift, 'NoLastEvent'}}, 'ex1', undefined}
    ]};

function_info('PayoutManagement', 'CreatePayout', params_type) ->
    {struct, struct, [
        {1, undefined, {struct, struct, {dmsl_payout_processing_thrift, 'PayoutParams'}}, 'params', undefined}
    ]};
function_info('PayoutManagement', 'CreatePayout', reply_type) ->
    {struct, struct, {dmsl_payout_processing_thrift, 'Payout'}};
function_info('PayoutManagement', 'CreatePayout', exceptions) ->
    {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_payout_processing_thrift, 'InvalidPayoutTool'}}, 'ex1', undefined},
        {2, undefined, {struct, exception, {dmsl_payout_processing_thrift, 'InsufficientFunds'}}, 'ex2', undefined},
        {3, undefined, {struct, exception, {dmsl_base_thrift, 'InvalidRequest'}}, 'ex3', undefined}
    ]};
function_info('PayoutManagement', 'Get', params_type) ->
    {struct, struct, [
        {1, undefined, string, 'payout_id', undefined}
    ]};
function_info('PayoutManagement', 'Get', reply_type) ->
    {struct, struct, {dmsl_payout_processing_thrift, 'Payout'}};
function_info('PayoutManagement', 'Get', exceptions) ->
    {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_payout_processing_thrift, 'PayoutNotFound'}}, 'ex1', undefined}
    ]};
function_info('PayoutManagement', 'GetEvents', params_type) ->
    {struct, struct, [
        {1, undefined, string, 'payout_id', undefined},
        {2, undefined, {struct, struct, {dmsl_payout_processing_thrift, 'EventRange'}}, 'range', undefined}
    ]};
function_info('PayoutManagement', 'GetEvents', reply_type) ->
    {list, {struct, struct, {dmsl_payout_processing_thrift, 'Event'}}};
function_info('PayoutManagement', 'GetEvents', exceptions) ->
    {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_payout_processing_thrift, 'PayoutNotFound'}}, 'ex1', undefined},
        {2, undefined, {struct, exception, {dmsl_payout_processing_thrift, 'EventNotFound'}}, 'ex2', undefined},
        {3, undefined, {struct, exception, {dmsl_base_thrift, 'InvalidRequest'}}, 'ex3', undefined}
    ]};
function_info('PayoutManagement', 'GeneratePayouts', params_type) ->
    {struct, struct, [
        {1, undefined, {struct, struct, {dmsl_payout_processing_thrift, 'GeneratePayoutParams'}}, 'params', undefined}
    ]};
function_info('PayoutManagement', 'GeneratePayouts', reply_type) ->
    {list, string};
function_info('PayoutManagement', 'GeneratePayouts', exceptions) ->
    {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_base_thrift, 'InvalidRequest'}}, 'ex1', undefined}
    ]};
function_info('PayoutManagement', 'ConfirmPayout', params_type) ->
    {struct, struct, [
        {1, undefined, string, 'payout_id', undefined}
    ]};
function_info('PayoutManagement', 'ConfirmPayout', reply_type) ->
    {struct, struct, []};
function_info('PayoutManagement', 'ConfirmPayout', exceptions) ->
    {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_base_thrift, 'InvalidRequest'}}, 'ex1', undefined}
    ]};
function_info('PayoutManagement', 'CancelPayout', params_type) ->
    {struct, struct, [
        {1, undefined, string, 'payout_id', undefined},
        {2, undefined, string, 'details', undefined}
    ]};
function_info('PayoutManagement', 'CancelPayout', reply_type) ->
    {struct, struct, []};
function_info('PayoutManagement', 'CancelPayout', exceptions) ->
    {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_base_thrift, 'InvalidRequest'}}, 'ex1', undefined}
    ]};
function_info('PayoutManagement', 'GetPayoutsInfo', params_type) ->
    {struct, struct, [
        {1, undefined, {struct, struct, {dmsl_payout_processing_thrift, 'PayoutSearchRequest'}}, 'request', undefined}
    ]};
function_info('PayoutManagement', 'GetPayoutsInfo', reply_type) ->
    {struct, struct, {dmsl_payout_processing_thrift, 'PayoutSearchResponse'}};
function_info('PayoutManagement', 'GetPayoutsInfo', exceptions) ->
    {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_base_thrift, 'InvalidRequest'}}, 'ex1', undefined}
    ]};
function_info('PayoutManagement', 'GenerateReport', params_type) ->
    {struct, struct, [
        {1, undefined, {set, string}, 'payout_ids', undefined}
    ]};
function_info('PayoutManagement', 'GenerateReport', reply_type) ->
    {struct, struct, []};
function_info('PayoutManagement', 'GenerateReport', exceptions) ->
    {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_base_thrift, 'InvalidRequest'}}, 'ex1', undefined}
    ]};

function_info(_Service, _Function, _InfoType) -> erlang:error(badarg).
