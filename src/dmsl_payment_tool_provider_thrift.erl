%%
%% Autogenerated by Thrift Compiler (1.0.0-dev)
%%
%% DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
%%

-module(dmsl_payment_tool_provider_thrift).

-include("dmsl_payment_tool_provider_thrift.hrl").

-export([namespace/0]).
-export([enums/0]).
-export([typedefs/0]).
-export([structs/0]).
-export([services/0]).
-export([typedef_info/1]).
-export([enum_info/1]).
-export([struct_info/1]).
-export([record_name/1]).
-export([functions/1]).
-export([function_info/3]).

-export_type([namespace/0]).
-export_type([typedef_name/0]).
-export_type([enum_name/0]).
-export_type([struct_name/0]).
-export_type([exception_name/0]).
-export_type([service_name/0]).
-export_type([function_name/0]).

-export_type([enum_info/0]).
-export_type([struct_info/0]).

-export_type([
    'CardClass'/0
]).
-export_type([
    'WrappedPaymentTool'/0,
    'PaymentRequest'/0,
    'ApplePayRequest'/0,
    'SamsungPayRequest'/0,
    'GooglePayRequest'/0,
    'UnwrappedPaymentTool'/0,
    'PaymentDetails'/0,
    'ApplePayDetails'/0,
    'SamsungPayDetails'/0,
    'GooglePayDetails'/0,
    'CardInfo'/0,
    'CardPaymentData'/0,
    'TokenizedCard'/0,
    'Card'/0,
    'ExpDate'/0,
    'AuthData'/0,
    'Auth3DS'/0
]).

-type namespace() :: 'paytoolprv'.

%%
%% typedefs
%%
-type typedef_name() :: none().


%%
%% enums
%%
-type enum_name() ::
    'CardClass'.

%% enum 'CardClass'
-type 'CardClass'() ::
    'credit' |
    'debit' |
    'prepaid' |
    'store' |
    'unknown'.

%%
%% structs, unions and exceptions
%%
-type struct_name() ::
    'WrappedPaymentTool' |
    'PaymentRequest' |
    'ApplePayRequest' |
    'SamsungPayRequest' |
    'GooglePayRequest' |
    'UnwrappedPaymentTool' |
    'PaymentDetails' |
    'ApplePayDetails' |
    'SamsungPayDetails' |
    'GooglePayDetails' |
    'CardInfo' |
    'CardPaymentData' |
    'TokenizedCard' |
    'Card' |
    'ExpDate' |
    'AuthData' |
    'Auth3DS'.

-type exception_name() :: none().

%% struct 'WrappedPaymentTool'
-type 'WrappedPaymentTool'() :: #'paytoolprv_WrappedPaymentTool'{}.

%% union 'PaymentRequest'
-type 'PaymentRequest'() ::
    {'apple', 'ApplePayRequest'()} |
    {'samsung', 'SamsungPayRequest'()} |
    {'google', 'GooglePayRequest'()}.

%% struct 'ApplePayRequest'
-type 'ApplePayRequest'() :: #'paytoolprv_ApplePayRequest'{}.

%% struct 'SamsungPayRequest'
-type 'SamsungPayRequest'() :: #'paytoolprv_SamsungPayRequest'{}.

%% struct 'GooglePayRequest'
-type 'GooglePayRequest'() :: #'paytoolprv_GooglePayRequest'{}.

%% struct 'UnwrappedPaymentTool'
-type 'UnwrappedPaymentTool'() :: #'paytoolprv_UnwrappedPaymentTool'{}.

%% union 'PaymentDetails'
-type 'PaymentDetails'() ::
    {'apple', 'ApplePayDetails'()} |
    {'samsung', 'SamsungPayDetails'()} |
    {'google', 'GooglePayDetails'()}.

%% struct 'ApplePayDetails'
-type 'ApplePayDetails'() :: #'paytoolprv_ApplePayDetails'{}.

%% struct 'SamsungPayDetails'
-type 'SamsungPayDetails'() :: #'paytoolprv_SamsungPayDetails'{}.

%% struct 'GooglePayDetails'
-type 'GooglePayDetails'() :: #'paytoolprv_GooglePayDetails'{}.

%% struct 'CardInfo'
-type 'CardInfo'() :: #'paytoolprv_CardInfo'{}.

%% union 'CardPaymentData'
-type 'CardPaymentData'() ::
    {'tokenized_card', 'TokenizedCard'()} |
    {'card', 'Card'()}.

%% struct 'TokenizedCard'
-type 'TokenizedCard'() :: #'paytoolprv_TokenizedCard'{}.

%% struct 'Card'
-type 'Card'() :: #'paytoolprv_Card'{}.

%% struct 'ExpDate'
-type 'ExpDate'() :: #'paytoolprv_ExpDate'{}.

%% union 'AuthData'
-type 'AuthData'() ::
    {'auth_3ds', 'Auth3DS'()}.

%% struct 'Auth3DS'
-type 'Auth3DS'() :: #'paytoolprv_Auth3DS'{}.

%%
%% services and functions
%%
-type service_name() ::
    'PaymentToolProvider'.

-type function_name() ::
    'PaymentToolProvider_service_functions'().

-type 'PaymentToolProvider_service_functions'() ::
    'Unwrap'.

-export_type(['PaymentToolProvider_service_functions'/0]).


-type struct_flavour() :: struct | exception | union.
-type field_num() :: pos_integer().
-type field_name() :: atom().
-type field_req() :: required | optional | undefined.

-type type_ref() :: {module(), atom()}.
-type field_type() ::
    bool | byte | i16 | i32 | i64 | string | double |
    {enum, type_ref()} |
    {struct, struct_flavour(), type_ref()} |
    {list, field_type()} |
    {set, field_type()} |
    {map, field_type(), field_type()}.

-type struct_field_info() ::
    {field_num(), field_req(), field_type(), field_name(), any()}.
-type struct_info() ::
    {struct, struct_flavour(), [struct_field_info()]}.

-type enum_choice() ::
    'CardClass'().

-type enum_field_info() ::
    {enum_choice(), integer()}.
-type enum_info() ::
    {enum, [enum_field_info()]}.

-spec typedefs() -> [].

typedefs() ->
    [].

-spec enums() -> [enum_name()].

enums() ->
    [
        'CardClass'
    ].

-spec structs() -> [struct_name()].

structs() ->
    [
        'WrappedPaymentTool',
        'PaymentRequest',
        'ApplePayRequest',
        'SamsungPayRequest',
        'GooglePayRequest',
        'UnwrappedPaymentTool',
        'PaymentDetails',
        'ApplePayDetails',
        'SamsungPayDetails',
        'GooglePayDetails',
        'CardInfo',
        'CardPaymentData',
        'TokenizedCard',
        'Card',
        'ExpDate',
        'AuthData',
        'Auth3DS'
    ].

-spec services() -> [service_name()].

services() ->
    [
        'PaymentToolProvider'
    ].

-spec namespace() -> namespace().

namespace() ->
    'paytoolprv'.

-spec typedef_info(_) -> no_return().

typedef_info(_) -> erlang:error(badarg).

-spec enum_info(enum_name()) -> enum_info() | no_return().

enum_info('CardClass') ->
    {enum, [
        {'credit', 0},
        {'debit', 1},
        {'prepaid', 2},
        {'store', 3},
        {'unknown', 4}
    ]};

enum_info(_) -> erlang:error(badarg).

-spec struct_info(struct_name() | exception_name()) -> struct_info() | no_return().

struct_info('WrappedPaymentTool') ->
    {struct, struct, [
        {1, required, {struct, union, {dmsl_payment_tool_provider_thrift, 'PaymentRequest'}}, 'request', undefined}
    ]};

struct_info('PaymentRequest') ->
    {struct, union, [
        {1, optional, {struct, struct, {dmsl_payment_tool_provider_thrift, 'ApplePayRequest'}}, 'apple', undefined},
        {2, optional, {struct, struct, {dmsl_payment_tool_provider_thrift, 'SamsungPayRequest'}}, 'samsung', undefined},
        {3, optional, {struct, struct, {dmsl_payment_tool_provider_thrift, 'GooglePayRequest'}}, 'google', undefined}
    ]};

struct_info('ApplePayRequest') ->
    {struct, struct, [
        {1, required, string, 'merchant_id', undefined},
        {2, required, {struct, struct, {dmsl_base_thrift, 'Content'}}, 'payment_token', undefined}
    ]};

struct_info('SamsungPayRequest') ->
    {struct, struct, [
        {1, required, string, 'service_id', undefined},
        {2, required, string, 'reference_id', undefined}
    ]};

struct_info('GooglePayRequest') ->
    {struct, struct, [
        {1, required, string, 'gateway_merchant_id', undefined},
        {2, required, {struct, struct, {dmsl_base_thrift, 'Content'}}, 'payment_token', undefined}
    ]};

struct_info('UnwrappedPaymentTool') ->
    {struct, struct, [
        {1, required, {struct, struct, {dmsl_payment_tool_provider_thrift, 'CardInfo'}}, 'card_info', undefined},
        {2, required, {struct, union, {dmsl_payment_tool_provider_thrift, 'CardPaymentData'}}, 'payment_data', undefined},
        {3, required, {struct, union, {dmsl_payment_tool_provider_thrift, 'PaymentDetails'}}, 'details', undefined},
        {4, optional, string, 'valid_until', undefined}
    ]};

struct_info('PaymentDetails') ->
    {struct, union, [
        {1, optional, {struct, struct, {dmsl_payment_tool_provider_thrift, 'ApplePayDetails'}}, 'apple', undefined},
        {2, optional, {struct, struct, {dmsl_payment_tool_provider_thrift, 'SamsungPayDetails'}}, 'samsung', undefined},
        {3, optional, {struct, struct, {dmsl_payment_tool_provider_thrift, 'GooglePayDetails'}}, 'google', undefined}
    ]};

struct_info('ApplePayDetails') ->
    {struct, struct, [
        {1, required, string, 'transaction_id', undefined},
        {2, required, i64, 'amount', undefined},
        {3, required, i16, 'currency_numeric_code', undefined},
        {4, required, string, 'device_id', undefined}
    ]};

struct_info('SamsungPayDetails') ->
    {struct, struct, [
        {1, optional, string, 'device_id', undefined}
    ]};

struct_info('GooglePayDetails') ->
    {struct, struct, [
        {1, required, string, 'message_id', undefined},
        {2, required, string, 'message_expiration', undefined}
    ]};

struct_info('CardInfo') ->
    {struct, struct, [
        {1, optional, string, 'display_name', undefined},
        {2, optional, string, 'cardholder_name', undefined},
        {3, optional, string, 'last_4_digits', undefined},
        {4, optional, {enum, {dmsl_payment_tool_provider_thrift, 'CardClass'}}, 'card_class', undefined},
        {5, optional, {enum, {dmsl_domain_thrift, 'BankCardPaymentSystem'}}, 'payment_system', undefined}
    ]};

struct_info('CardPaymentData') ->
    {struct, union, [
        {1, optional, {struct, struct, {dmsl_payment_tool_provider_thrift, 'TokenizedCard'}}, 'tokenized_card', undefined},
        {2, optional, {struct, struct, {dmsl_payment_tool_provider_thrift, 'Card'}}, 'card', undefined}
    ]};

struct_info('TokenizedCard') ->
    {struct, struct, [
        {1, required, string, 'dpan', undefined},
        {2, required, {struct, struct, {dmsl_payment_tool_provider_thrift, 'ExpDate'}}, 'exp_date', undefined},
        {3, required, {struct, union, {dmsl_payment_tool_provider_thrift, 'AuthData'}}, 'auth_data', undefined}
    ]};

struct_info('Card') ->
    {struct, struct, [
        {1, required, string, 'pan', undefined},
        {2, required, {struct, struct, {dmsl_payment_tool_provider_thrift, 'ExpDate'}}, 'exp_date', undefined}
    ]};

struct_info('ExpDate') ->
    {struct, struct, [
        {1, required, byte, 'month', undefined},
        {2, required, i16, 'year', undefined}
    ]};

struct_info('AuthData') ->
    {struct, union, [
        {1, optional, {struct, struct, {dmsl_payment_tool_provider_thrift, 'Auth3DS'}}, 'auth_3ds', undefined}
    ]};

struct_info('Auth3DS') ->
    {struct, struct, [
        {1, required, string, 'cryptogram', undefined},
        {2, optional, string, 'eci', undefined}
    ]};

struct_info(_) -> erlang:error(badarg).

-spec record_name(struct_name() | exception_name()) -> atom() | no_return().

record_name('WrappedPaymentTool') ->
    'paytoolprv_WrappedPaymentTool';

record_name('ApplePayRequest') ->
    'paytoolprv_ApplePayRequest';

record_name('SamsungPayRequest') ->
    'paytoolprv_SamsungPayRequest';

record_name('GooglePayRequest') ->
    'paytoolprv_GooglePayRequest';

record_name('UnwrappedPaymentTool') ->
    'paytoolprv_UnwrappedPaymentTool';

record_name('ApplePayDetails') ->
    'paytoolprv_ApplePayDetails';

record_name('SamsungPayDetails') ->
    'paytoolprv_SamsungPayDetails';

record_name('GooglePayDetails') ->
    'paytoolprv_GooglePayDetails';

record_name('CardInfo') ->
    'paytoolprv_CardInfo';

record_name('TokenizedCard') ->
    'paytoolprv_TokenizedCard';

record_name('Card') ->
    'paytoolprv_Card';

record_name('ExpDate') ->
    'paytoolprv_ExpDate';

record_name('Auth3DS') ->
    'paytoolprv_Auth3DS';

record_name(_) -> error(badarg).

-spec functions(service_name()) -> [function_name()] | no_return().

functions('PaymentToolProvider') ->
    [
        'Unwrap'
    ];

functions(_) -> error(badarg).

-spec function_info(service_name(), function_name(), params_type | reply_type | exceptions) ->
    struct_info() | no_return().

function_info('PaymentToolProvider', 'Unwrap', params_type) ->
    {struct, struct, [
        {1, undefined, {struct, struct, {dmsl_payment_tool_provider_thrift, 'WrappedPaymentTool'}}, 'payment_tool', undefined}
    ]};
function_info('PaymentToolProvider', 'Unwrap', reply_type) ->
    {struct, struct, {dmsl_payment_tool_provider_thrift, 'UnwrappedPaymentTool'}};
function_info('PaymentToolProvider', 'Unwrap', exceptions) ->
    {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_base_thrift, 'InvalidRequest'}}, 'ex1', undefined}
    ]};

function_info(_Service, _Function, _InfoType) -> erlang:error(badarg).
