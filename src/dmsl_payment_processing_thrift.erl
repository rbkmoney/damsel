%%
%% Autogenerated by Thrift Compiler (1.0.0-dev)
%%
%% DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
%%

-module(dmsl_payment_processing_thrift).

-include("dmsl_payment_processing_thrift.hrl").

-export([namespace/0]).
-export([enums/0]).
-export([typedefs/0]).
-export([structs/0]).
-export([services/0]).
-export([typedef_info/1]).
-export([enum_info/1]).
-export([struct_info/1]).
-export([record_name/1]).
-export([functions/1]).
-export([function_info/3]).

-export_type([namespace/0]).
-export_type([typedef_name/0]).
-export_type([enum_name/0]).
-export_type([struct_name/0]).
-export_type([exception_name/0]).
-export_type([service_name/0]).
-export_type([function_name/0]).

-export_type([enum_info/0]).
-export_type([struct_info/0]).

-export_type([
    'UserID'/0,
    'Events'/0,
    'InvoicePaymentRefund'/0,
    'InvoicePaymentAdjustment'/0,
    'CustomerID'/0,
    'Metadata'/0,
    'CustomerBindingID'/0,
    'DisposablePaymentResource'/0,
    'RecurrentPaymentToolID'/0,
    'RecurrentPaymentToolEvents'/0,
    'PartyID'/0,
    'ShopID'/0,
    'ContractID'/0,
    'ContractorID'/0,
    'PayoutToolID'/0,
    'WalletID'/0,
    'ContractTemplateRef'/0,
    'PaymentInstitutionRef'/0,
    'PartyChangeset'/0,
    'ClaimID'/0,
    'ClaimRevision'/0,
    'ClaimEffects'/0
]).
-export_type([
    'UserInfo'/0,
    'UserType'/0,
    'InternalUser'/0,
    'ExternalUser'/0,
    'ServiceUser'/0,
    'Event'/0,
    'EventSource'/0,
    'EventPayload'/0,
    'InvoiceChange'/0,
    'InvoiceTemplateChange'/0,
    'InvoiceCreated'/0,
    'InvoiceStatusChanged'/0,
    'InvoicePaymentChange'/0,
    'InvoicePaymentChangePayload'/0,
    'InvoicePaymentStarted'/0,
    'InvoicePaymentStatusChanged'/0,
    'InvoicePaymentSessionChange'/0,
    'SessionChangePayload'/0,
    'SessionStarted'/0,
    'SessionFinished'/0,
    'SessionSuspended'/0,
    'SessionActivated'/0,
    'SessionResult'/0,
    'SessionSucceeded'/0,
    'SessionFailed'/0,
    'InvoiceTemplateCreated'/0,
    'InvoiceTemplateUpdated'/0,
    'InvoiceTemplateDeleted'/0,
    'SessionTransactionBound'/0,
    'SessionProxyStateChanged'/0,
    'SessionInteractionRequested'/0,
    'InvoicePaymentRefundChange'/0,
    'InvoicePaymentRefundChangePayload'/0,
    'InvoicePaymentRefundCreated'/0,
    'InvoicePaymentRefundStatusChanged'/0,
    'InvoicePaymentAdjustmentChange'/0,
    'InvoicePaymentAdjustmentChangePayload'/0,
    'InvoicePaymentAdjustmentCreated'/0,
    'InvoicePaymentAdjustmentStatusChanged'/0,
    'EventRange'/0,
    'InvoiceParams'/0,
    'InvoiceWithTemplateParams'/0,
    'InvoiceTemplateCreateParams'/0,
    'InvoiceTemplateUpdateParams'/0,
    'InvoicePaymentParams'/0,
    'PayerParams'/0,
    'PaymentResourcePayerParams'/0,
    'CustomerPayerParams'/0,
    'InvoicePaymentParamsFlow'/0,
    'InvoicePaymentParamsFlowInstant'/0,
    'InvoicePaymentParamsFlowHold'/0,
    'Invoice'/0,
    'InvoicePayment'/0,
    'InvoicePaymentRefundParams'/0,
    'InvoicePaymentAdjustmentParams'/0,
    'InvalidStatus'/0,
    'CustomerParams'/0,
    'Customer'/0,
    'CustomerStatus'/0,
    'CustomerUnready'/0,
    'CustomerReady'/0,
    'CustomerChange'/0,
    'CustomerCreated'/0,
    'CustomerDeleted'/0,
    'CustomerStatusChanged'/0,
    'CustomerBindingChanged'/0,
    'CustomerBindingParams'/0,
    'CustomerBinding'/0,
    'CustomerBindingStatus'/0,
    'CustomerBindingPending'/0,
    'CustomerBindingSucceeded'/0,
    'CustomerBindingFailed'/0,
    'CustomerBindingChangePayload'/0,
    'CustomerBindingStarted'/0,
    'CustomerBindingStatusChanged'/0,
    'CustomerBindingInteractionRequested'/0,
    'RecurrentPaymentTool'/0,
    'RecurrentPaymentToolParams'/0,
    'RecurrentPaymentToolCreated'/0,
    'RecurrentPaymentToolAcquired'/0,
    'RecurrentPaymentToolAbandoned'/0,
    'RecurrentPaymentToolFailed'/0,
    'RecurrentPaymentToolStatus'/0,
    'RecurrentPaymentToolEvent'/0,
    'RecurrentPaymentToolSessionChange'/0,
    'RecurrentPaymentToolChange'/0,
    'RecurrentPaymentToolHasCreated'/0,
    'RecurrentPaymentToolHasAcquired'/0,
    'RecurrentPaymentToolHasAbandoned'/0,
    'RecurrentPaymentToolHasFailed'/0,
    'Varset'/0,
    'PartyParams'/0,
    'PayoutToolParams'/0,
    'ShopParams'/0,
    'ShopAccountParams'/0,
    'ContractParams'/0,
    'ContractAdjustmentParams'/0,
    'PartyModification'/0,
    'ContractorModificationUnit'/0,
    'ContractorModification'/0,
    'ContractorIdentityDocumentsModification'/0,
    'ContractModificationUnit'/0,
    'ContractModification'/0,
    'ContractTermination'/0,
    'ContractAdjustmentModificationUnit'/0,
    'ContractAdjustmentModification'/0,
    'PayoutToolModificationUnit'/0,
    'PayoutToolModification'/0,
    'ShopModificationUnit'/0,
    'ShopModification'/0,
    'ShopContractModification'/0,
    'ScheduleModification'/0,
    'ProxyModification'/0,
    'WalletModificationUnit'/0,
    'WalletModification'/0,
    'WalletParams'/0,
    'WalletAccountParams'/0,
    'Claim'/0,
    'ClaimStatus'/0,
    'ClaimPending'/0,
    'ClaimAccepted'/0,
    'ClaimDenied'/0,
    'ClaimRevoked'/0,
    'ClaimEffect'/0,
    'ContractEffectUnit'/0,
    'ContractEffect'/0,
    'ShopEffectUnit'/0,
    'ShopEffect'/0,
    'ShopContractChanged'/0,
    'ScheduleChanged'/0,
    'ContractorEffectUnit'/0,
    'ContractorEffect'/0,
    'ContractorIdentityDocumentsChanged'/0,
    'WalletEffectUnit'/0,
    'WalletEffect'/0,
    'ShopProxyChanged'/0,
    'AccountState'/0,
    'PartyChange'/0,
    'PartyCreated'/0,
    'ShopBlocking'/0,
    'ShopSuspension'/0,
    'WalletBlocking'/0,
    'WalletSuspension'/0,
    'ClaimStatusChanged'/0,
    'ClaimUpdated'/0,
    'PartyMetaSet'/0,
    'PartyRevisionChanged'/0,
    'PartyRevisionParam'/0,
    'PayoutParams'/0,
    'InvalidChangesetReason'/0,
    'ContractStatusInvalid'/0,
    'ShopStatusInvalid'/0,
    'ContractTermsViolated'/0
]).
-export_type([
    'PartyNotFound'/0,
    'PartyNotExistsYet'/0,
    'InvalidPartyRevision'/0,
    'ShopNotFound'/0,
    'WalletNotFound'/0,
    'InvalidPartyStatus'/0,
    'InvalidShopStatus'/0,
    'InvalidWalletStatus'/0,
    'InvalidContractStatus'/0,
    'InvalidUser'/0,
    'InvoiceNotFound'/0,
    'InvoicePaymentNotFound'/0,
    'InvoicePaymentRefundNotFound'/0,
    'InvoicePaymentAdjustmentNotFound'/0,
    'EventNotFound'/0,
    'OperationNotPermitted'/0,
    'InsufficientAccountBalance'/0,
    'InvoicePaymentPending'/0,
    'InvoicePaymentRefundPending'/0,
    'InvoicePaymentAdjustmentPending'/0,
    'InvalidInvoiceStatus'/0,
    'InvalidPaymentStatus'/0,
    'InvalidPaymentAdjustmentStatus'/0,
    'InvoiceTemplateNotFound'/0,
    'InvoiceTemplateRemoved'/0,
    'InvoicePaymentAmountExceeded'/0,
    'InconsistentRefundCurrency'/0,
    'InvalidCustomerStatus'/0,
    'CustomerNotFound'/0,
    'InvalidPaymentTool'/0,
    'InvalidBinding'/0,
    'BindingNotFound'/0,
    'RecurrentPaymentToolNotFound'/0,
    'InvalidPaymentMethod'/0,
    'InvalidRecurrentPaymentToolStatus'/0,
    'NoLastEvent'/0,
    'PartyExists'/0,
    'ContractNotFound'/0,
    'ClaimNotFound'/0,
    'InvalidClaimRevision'/0,
    'InvalidClaimStatus'/0,
    'ChangesetConflict'/0,
    'InvalidChangeset'/0,
    'AccountNotFound'/0,
    'ShopAccountNotFound'/0,
    'PartyMetaNamespaceNotFound'/0,
    'PaymentInstitutionNotFound'/0,
    'ContractTemplateNotFound'/0
]).

-type namespace() :: 'payproc'.

%%
%% typedefs
%%
-type typedef_name() ::
    'UserID' |
    'Events' |
    'InvoicePaymentRefund' |
    'InvoicePaymentAdjustment' |
    'CustomerID' |
    'Metadata' |
    'CustomerBindingID' |
    'DisposablePaymentResource' |
    'RecurrentPaymentToolID' |
    'RecurrentPaymentToolEvents' |
    'PartyID' |
    'ShopID' |
    'ContractID' |
    'ContractorID' |
    'PayoutToolID' |
    'WalletID' |
    'ContractTemplateRef' |
    'PaymentInstitutionRef' |
    'PartyChangeset' |
    'ClaimID' |
    'ClaimRevision' |
    'ClaimEffects'.

-type 'UserID'() :: dmsl_base_thrift:'ID'().
-type 'Events'() :: ['Event'()].
-type 'InvoicePaymentRefund'() :: dmsl_domain_thrift:'InvoicePaymentRefund'().
-type 'InvoicePaymentAdjustment'() :: dmsl_domain_thrift:'InvoicePaymentAdjustment'().
-type 'CustomerID'() :: dmsl_domain_thrift:'CustomerID'().
-type 'Metadata'() :: dmsl_domain_thrift:'Metadata'().
-type 'CustomerBindingID'() :: dmsl_domain_thrift:'CustomerBindingID'().
-type 'DisposablePaymentResource'() :: dmsl_domain_thrift:'DisposablePaymentResource'().
-type 'RecurrentPaymentToolID'() :: dmsl_domain_thrift:'RecurrentPaymentToolID'().
-type 'RecurrentPaymentToolEvents'() :: ['RecurrentPaymentToolEvent'()].
-type 'PartyID'() :: dmsl_domain_thrift:'PartyID'().
-type 'ShopID'() :: dmsl_domain_thrift:'ShopID'().
-type 'ContractID'() :: dmsl_domain_thrift:'ContractID'().
-type 'ContractorID'() :: dmsl_domain_thrift:'ContractorID'().
-type 'PayoutToolID'() :: dmsl_domain_thrift:'PayoutToolID'().
-type 'WalletID'() :: dmsl_domain_thrift:'WalletID'().
-type 'ContractTemplateRef'() :: dmsl_domain_thrift:'ContractTemplateRef'().
-type 'PaymentInstitutionRef'() :: dmsl_domain_thrift:'PaymentInstitutionRef'().
-type 'PartyChangeset'() :: ['PartyModification'()].
-type 'ClaimID'() :: integer().
-type 'ClaimRevision'() :: integer().
-type 'ClaimEffects'() :: ['ClaimEffect'()].

%%
%% enums
%%
-type enum_name() :: none().

%%
%% structs, unions and exceptions
%%
-type struct_name() ::
    'UserInfo' |
    'UserType' |
    'InternalUser' |
    'ExternalUser' |
    'ServiceUser' |
    'Event' |
    'EventSource' |
    'EventPayload' |
    'InvoiceChange' |
    'InvoiceTemplateChange' |
    'InvoiceCreated' |
    'InvoiceStatusChanged' |
    'InvoicePaymentChange' |
    'InvoicePaymentChangePayload' |
    'InvoicePaymentStarted' |
    'InvoicePaymentStatusChanged' |
    'InvoicePaymentSessionChange' |
    'SessionChangePayload' |
    'SessionStarted' |
    'SessionFinished' |
    'SessionSuspended' |
    'SessionActivated' |
    'SessionResult' |
    'SessionSucceeded' |
    'SessionFailed' |
    'InvoiceTemplateCreated' |
    'InvoiceTemplateUpdated' |
    'InvoiceTemplateDeleted' |
    'SessionTransactionBound' |
    'SessionProxyStateChanged' |
    'SessionInteractionRequested' |
    'InvoicePaymentRefundChange' |
    'InvoicePaymentRefundChangePayload' |
    'InvoicePaymentRefundCreated' |
    'InvoicePaymentRefundStatusChanged' |
    'InvoicePaymentAdjustmentChange' |
    'InvoicePaymentAdjustmentChangePayload' |
    'InvoicePaymentAdjustmentCreated' |
    'InvoicePaymentAdjustmentStatusChanged' |
    'EventRange' |
    'InvoiceParams' |
    'InvoiceWithTemplateParams' |
    'InvoiceTemplateCreateParams' |
    'InvoiceTemplateUpdateParams' |
    'InvoicePaymentParams' |
    'PayerParams' |
    'PaymentResourcePayerParams' |
    'CustomerPayerParams' |
    'InvoicePaymentParamsFlow' |
    'InvoicePaymentParamsFlowInstant' |
    'InvoicePaymentParamsFlowHold' |
    'Invoice' |
    'InvoicePayment' |
    'InvoicePaymentRefundParams' |
    'InvoicePaymentAdjustmentParams' |
    'InvalidStatus' |
    'CustomerParams' |
    'Customer' |
    'CustomerStatus' |
    'CustomerUnready' |
    'CustomerReady' |
    'CustomerChange' |
    'CustomerCreated' |
    'CustomerDeleted' |
    'CustomerStatusChanged' |
    'CustomerBindingChanged' |
    'CustomerBindingParams' |
    'CustomerBinding' |
    'CustomerBindingStatus' |
    'CustomerBindingPending' |
    'CustomerBindingSucceeded' |
    'CustomerBindingFailed' |
    'CustomerBindingChangePayload' |
    'CustomerBindingStarted' |
    'CustomerBindingStatusChanged' |
    'CustomerBindingInteractionRequested' |
    'RecurrentPaymentTool' |
    'RecurrentPaymentToolParams' |
    'RecurrentPaymentToolCreated' |
    'RecurrentPaymentToolAcquired' |
    'RecurrentPaymentToolAbandoned' |
    'RecurrentPaymentToolFailed' |
    'RecurrentPaymentToolStatus' |
    'RecurrentPaymentToolEvent' |
    'RecurrentPaymentToolSessionChange' |
    'RecurrentPaymentToolChange' |
    'RecurrentPaymentToolHasCreated' |
    'RecurrentPaymentToolHasAcquired' |
    'RecurrentPaymentToolHasAbandoned' |
    'RecurrentPaymentToolHasFailed' |
    'Varset' |
    'PartyParams' |
    'PayoutToolParams' |
    'ShopParams' |
    'ShopAccountParams' |
    'ContractParams' |
    'ContractAdjustmentParams' |
    'PartyModification' |
    'ContractorModificationUnit' |
    'ContractorModification' |
    'ContractorIdentityDocumentsModification' |
    'ContractModificationUnit' |
    'ContractModification' |
    'ContractTermination' |
    'ContractAdjustmentModificationUnit' |
    'ContractAdjustmentModification' |
    'PayoutToolModificationUnit' |
    'PayoutToolModification' |
    'ShopModificationUnit' |
    'ShopModification' |
    'ShopContractModification' |
    'ScheduleModification' |
    'ProxyModification' |
    'WalletModificationUnit' |
    'WalletModification' |
    'WalletParams' |
    'WalletAccountParams' |
    'Claim' |
    'ClaimStatus' |
    'ClaimPending' |
    'ClaimAccepted' |
    'ClaimDenied' |
    'ClaimRevoked' |
    'ClaimEffect' |
    'ContractEffectUnit' |
    'ContractEffect' |
    'ShopEffectUnit' |
    'ShopEffect' |
    'ShopContractChanged' |
    'ScheduleChanged' |
    'ContractorEffectUnit' |
    'ContractorEffect' |
    'ContractorIdentityDocumentsChanged' |
    'WalletEffectUnit' |
    'WalletEffect' |
    'ShopProxyChanged' |
    'AccountState' |
    'PartyChange' |
    'PartyCreated' |
    'ShopBlocking' |
    'ShopSuspension' |
    'WalletBlocking' |
    'WalletSuspension' |
    'ClaimStatusChanged' |
    'ClaimUpdated' |
    'PartyMetaSet' |
    'PartyRevisionChanged' |
    'PartyRevisionParam' |
    'PayoutParams' |
    'InvalidChangesetReason' |
    'ContractStatusInvalid' |
    'ShopStatusInvalid' |
    'ContractTermsViolated'.

-type exception_name() ::
    'PartyNotFound' |
    'PartyNotExistsYet' |
    'InvalidPartyRevision' |
    'ShopNotFound' |
    'WalletNotFound' |
    'InvalidPartyStatus' |
    'InvalidShopStatus' |
    'InvalidWalletStatus' |
    'InvalidContractStatus' |
    'InvalidUser' |
    'InvoiceNotFound' |
    'InvoicePaymentNotFound' |
    'InvoicePaymentRefundNotFound' |
    'InvoicePaymentAdjustmentNotFound' |
    'EventNotFound' |
    'OperationNotPermitted' |
    'InsufficientAccountBalance' |
    'InvoicePaymentPending' |
    'InvoicePaymentRefundPending' |
    'InvoicePaymentAdjustmentPending' |
    'InvalidInvoiceStatus' |
    'InvalidPaymentStatus' |
    'InvalidPaymentAdjustmentStatus' |
    'InvoiceTemplateNotFound' |
    'InvoiceTemplateRemoved' |
    'InvoicePaymentAmountExceeded' |
    'InconsistentRefundCurrency' |
    'InvalidCustomerStatus' |
    'CustomerNotFound' |
    'InvalidPaymentTool' |
    'InvalidBinding' |
    'BindingNotFound' |
    'RecurrentPaymentToolNotFound' |
    'InvalidPaymentMethod' |
    'InvalidRecurrentPaymentToolStatus' |
    'NoLastEvent' |
    'PartyExists' |
    'ContractNotFound' |
    'ClaimNotFound' |
    'InvalidClaimRevision' |
    'InvalidClaimStatus' |
    'ChangesetConflict' |
    'InvalidChangeset' |
    'AccountNotFound' |
    'ShopAccountNotFound' |
    'PartyMetaNamespaceNotFound' |
    'PaymentInstitutionNotFound' |
    'ContractTemplateNotFound'.

%% struct 'UserInfo'
-type 'UserInfo'() :: #'payproc_UserInfo'{}.

%% union 'UserType'
-type 'UserType'() ::
    {'internal_user', 'InternalUser'()} |
    {'external_user', 'ExternalUser'()} |
    {'service_user', 'ServiceUser'()}.

%% struct 'InternalUser'
-type 'InternalUser'() :: #'payproc_InternalUser'{}.

%% struct 'ExternalUser'
-type 'ExternalUser'() :: #'payproc_ExternalUser'{}.

%% struct 'ServiceUser'
-type 'ServiceUser'() :: #'payproc_ServiceUser'{}.

%% struct 'Event'
-type 'Event'() :: #'payproc_Event'{}.

%% union 'EventSource'
-type 'EventSource'() ::
    {'invoice_id', dmsl_domain_thrift:'InvoiceID'()} |
    {'party_id', dmsl_domain_thrift:'PartyID'()} |
    {'invoice_template_id', dmsl_domain_thrift:'InvoiceTemplateID'()} |
    {'customer_id', dmsl_domain_thrift:'CustomerID'()}.

%% union 'EventPayload'
-type 'EventPayload'() ::
    {'invoice_changes', ['InvoiceChange'()]} |
    {'party_changes', ['PartyChange'()]} |
    {'invoice_template_changes', ['InvoiceTemplateChange'()]} |
    {'customer_changes', ['CustomerChange'()]}.

%% union 'InvoiceChange'
-type 'InvoiceChange'() ::
    {'invoice_created', 'InvoiceCreated'()} |
    {'invoice_status_changed', 'InvoiceStatusChanged'()} |
    {'invoice_payment_change', 'InvoicePaymentChange'()}.

%% union 'InvoiceTemplateChange'
-type 'InvoiceTemplateChange'() ::
    {'invoice_template_created', 'InvoiceTemplateCreated'()} |
    {'invoice_template_updated', 'InvoiceTemplateUpdated'()} |
    {'invoice_template_deleted', 'InvoiceTemplateDeleted'()}.

%% struct 'InvoiceCreated'
-type 'InvoiceCreated'() :: #'payproc_InvoiceCreated'{}.

%% struct 'InvoiceStatusChanged'
-type 'InvoiceStatusChanged'() :: #'payproc_InvoiceStatusChanged'{}.

%% struct 'InvoicePaymentChange'
-type 'InvoicePaymentChange'() :: #'payproc_InvoicePaymentChange'{}.

%% union 'InvoicePaymentChangePayload'
-type 'InvoicePaymentChangePayload'() ::
    {'invoice_payment_started', 'InvoicePaymentStarted'()} |
    {'invoice_payment_status_changed', 'InvoicePaymentStatusChanged'()} |
    {'invoice_payment_session_change', 'InvoicePaymentSessionChange'()} |
    {'invoice_payment_refund_change', 'InvoicePaymentRefundChange'()} |
    {'invoice_payment_adjustment_change', 'InvoicePaymentAdjustmentChange'()}.

%% struct 'InvoicePaymentStarted'
-type 'InvoicePaymentStarted'() :: #'payproc_InvoicePaymentStarted'{}.

%% struct 'InvoicePaymentStatusChanged'
-type 'InvoicePaymentStatusChanged'() :: #'payproc_InvoicePaymentStatusChanged'{}.

%% struct 'InvoicePaymentSessionChange'
-type 'InvoicePaymentSessionChange'() :: #'payproc_InvoicePaymentSessionChange'{}.

%% union 'SessionChangePayload'
-type 'SessionChangePayload'() ::
    {'session_started', 'SessionStarted'()} |
    {'session_finished', 'SessionFinished'()} |
    {'session_suspended', 'SessionSuspended'()} |
    {'session_activated', 'SessionActivated'()} |
    {'session_transaction_bound', 'SessionTransactionBound'()} |
    {'session_proxy_state_changed', 'SessionProxyStateChanged'()} |
    {'session_interaction_requested', 'SessionInteractionRequested'()}.

%% struct 'SessionStarted'
-type 'SessionStarted'() :: #'payproc_SessionStarted'{}.

%% struct 'SessionFinished'
-type 'SessionFinished'() :: #'payproc_SessionFinished'{}.

%% struct 'SessionSuspended'
-type 'SessionSuspended'() :: #'payproc_SessionSuspended'{}.

%% struct 'SessionActivated'
-type 'SessionActivated'() :: #'payproc_SessionActivated'{}.

%% union 'SessionResult'
-type 'SessionResult'() ::
    {'succeeded', 'SessionSucceeded'()} |
    {'failed', 'SessionFailed'()}.

%% struct 'SessionSucceeded'
-type 'SessionSucceeded'() :: #'payproc_SessionSucceeded'{}.

%% struct 'SessionFailed'
-type 'SessionFailed'() :: #'payproc_SessionFailed'{}.

%% struct 'InvoiceTemplateCreated'
-type 'InvoiceTemplateCreated'() :: #'payproc_InvoiceTemplateCreated'{}.

%% struct 'InvoiceTemplateUpdated'
-type 'InvoiceTemplateUpdated'() :: #'payproc_InvoiceTemplateUpdated'{}.

%% struct 'InvoiceTemplateDeleted'
-type 'InvoiceTemplateDeleted'() :: #'payproc_InvoiceTemplateDeleted'{}.

%% struct 'SessionTransactionBound'
-type 'SessionTransactionBound'() :: #'payproc_SessionTransactionBound'{}.

%% struct 'SessionProxyStateChanged'
-type 'SessionProxyStateChanged'() :: #'payproc_SessionProxyStateChanged'{}.

%% struct 'SessionInteractionRequested'
-type 'SessionInteractionRequested'() :: #'payproc_SessionInteractionRequested'{}.

%% struct 'InvoicePaymentRefundChange'
-type 'InvoicePaymentRefundChange'() :: #'payproc_InvoicePaymentRefundChange'{}.

%% union 'InvoicePaymentRefundChangePayload'
-type 'InvoicePaymentRefundChangePayload'() ::
    {'invoice_payment_refund_created', 'InvoicePaymentRefundCreated'()} |
    {'invoice_payment_refund_status_changed', 'InvoicePaymentRefundStatusChanged'()} |
    {'invoice_payment_session_change', 'InvoicePaymentSessionChange'()}.

%% struct 'InvoicePaymentRefundCreated'
-type 'InvoicePaymentRefundCreated'() :: #'payproc_InvoicePaymentRefundCreated'{}.

%% struct 'InvoicePaymentRefundStatusChanged'
-type 'InvoicePaymentRefundStatusChanged'() :: #'payproc_InvoicePaymentRefundStatusChanged'{}.

%% struct 'InvoicePaymentAdjustmentChange'
-type 'InvoicePaymentAdjustmentChange'() :: #'payproc_InvoicePaymentAdjustmentChange'{}.

%% union 'InvoicePaymentAdjustmentChangePayload'
-type 'InvoicePaymentAdjustmentChangePayload'() ::
    {'invoice_payment_adjustment_created', 'InvoicePaymentAdjustmentCreated'()} |
    {'invoice_payment_adjustment_status_changed', 'InvoicePaymentAdjustmentStatusChanged'()}.

%% struct 'InvoicePaymentAdjustmentCreated'
-type 'InvoicePaymentAdjustmentCreated'() :: #'payproc_InvoicePaymentAdjustmentCreated'{}.

%% struct 'InvoicePaymentAdjustmentStatusChanged'
-type 'InvoicePaymentAdjustmentStatusChanged'() :: #'payproc_InvoicePaymentAdjustmentStatusChanged'{}.

%% struct 'EventRange'
-type 'EventRange'() :: #'payproc_EventRange'{}.

%% struct 'InvoiceParams'
-type 'InvoiceParams'() :: #'payproc_InvoiceParams'{}.

%% struct 'InvoiceWithTemplateParams'
-type 'InvoiceWithTemplateParams'() :: #'payproc_InvoiceWithTemplateParams'{}.

%% struct 'InvoiceTemplateCreateParams'
-type 'InvoiceTemplateCreateParams'() :: #'payproc_InvoiceTemplateCreateParams'{}.

%% struct 'InvoiceTemplateUpdateParams'
-type 'InvoiceTemplateUpdateParams'() :: #'payproc_InvoiceTemplateUpdateParams'{}.

%% struct 'InvoicePaymentParams'
-type 'InvoicePaymentParams'() :: #'payproc_InvoicePaymentParams'{}.

%% union 'PayerParams'
-type 'PayerParams'() ::
    {'payment_resource', 'PaymentResourcePayerParams'()} |
    {'customer', 'CustomerPayerParams'()}.

%% struct 'PaymentResourcePayerParams'
-type 'PaymentResourcePayerParams'() :: #'payproc_PaymentResourcePayerParams'{}.

%% struct 'CustomerPayerParams'
-type 'CustomerPayerParams'() :: #'payproc_CustomerPayerParams'{}.

%% union 'InvoicePaymentParamsFlow'
-type 'InvoicePaymentParamsFlow'() ::
    {'instant', 'InvoicePaymentParamsFlowInstant'()} |
    {'hold', 'InvoicePaymentParamsFlowHold'()}.

%% struct 'InvoicePaymentParamsFlowInstant'
-type 'InvoicePaymentParamsFlowInstant'() :: #'payproc_InvoicePaymentParamsFlowInstant'{}.

%% struct 'InvoicePaymentParamsFlowHold'
-type 'InvoicePaymentParamsFlowHold'() :: #'payproc_InvoicePaymentParamsFlowHold'{}.

%% struct 'Invoice'
-type 'Invoice'() :: #'payproc_Invoice'{}.

%% struct 'InvoicePayment'
-type 'InvoicePayment'() :: #'payproc_InvoicePayment'{}.

%% struct 'InvoicePaymentRefundParams'
-type 'InvoicePaymentRefundParams'() :: #'payproc_InvoicePaymentRefundParams'{}.

%% struct 'InvoicePaymentAdjustmentParams'
-type 'InvoicePaymentAdjustmentParams'() :: #'payproc_InvoicePaymentAdjustmentParams'{}.

%% union 'InvalidStatus'
-type 'InvalidStatus'() ::
    {'blocking', dmsl_domain_thrift:'Blocking'()} |
    {'suspension', dmsl_domain_thrift:'Suspension'()}.

%% struct 'CustomerParams'
-type 'CustomerParams'() :: #'payproc_CustomerParams'{}.

%% struct 'Customer'
-type 'Customer'() :: #'payproc_Customer'{}.

%% union 'CustomerStatus'
-type 'CustomerStatus'() ::
    {'unready', 'CustomerUnready'()} |
    {'ready', 'CustomerReady'()}.

%% struct 'CustomerUnready'
-type 'CustomerUnready'() :: #'payproc_CustomerUnready'{}.

%% struct 'CustomerReady'
-type 'CustomerReady'() :: #'payproc_CustomerReady'{}.

%% union 'CustomerChange'
-type 'CustomerChange'() ::
    {'customer_created', 'CustomerCreated'()} |
    {'customer_deleted', 'CustomerDeleted'()} |
    {'customer_status_changed', 'CustomerStatusChanged'()} |
    {'customer_binding_changed', 'CustomerBindingChanged'()}.

%% struct 'CustomerCreated'
-type 'CustomerCreated'() :: #'payproc_CustomerCreated'{}.

%% struct 'CustomerDeleted'
-type 'CustomerDeleted'() :: #'payproc_CustomerDeleted'{}.

%% struct 'CustomerStatusChanged'
-type 'CustomerStatusChanged'() :: #'payproc_CustomerStatusChanged'{}.

%% struct 'CustomerBindingChanged'
-type 'CustomerBindingChanged'() :: #'payproc_CustomerBindingChanged'{}.

%% struct 'CustomerBindingParams'
-type 'CustomerBindingParams'() :: #'payproc_CustomerBindingParams'{}.

%% struct 'CustomerBinding'
-type 'CustomerBinding'() :: #'payproc_CustomerBinding'{}.

%% union 'CustomerBindingStatus'
-type 'CustomerBindingStatus'() ::
    {'pending', 'CustomerBindingPending'()} |
    {'succeeded', 'CustomerBindingSucceeded'()} |
    {'failed', 'CustomerBindingFailed'()}.

%% struct 'CustomerBindingPending'
-type 'CustomerBindingPending'() :: #'payproc_CustomerBindingPending'{}.

%% struct 'CustomerBindingSucceeded'
-type 'CustomerBindingSucceeded'() :: #'payproc_CustomerBindingSucceeded'{}.

%% struct 'CustomerBindingFailed'
-type 'CustomerBindingFailed'() :: #'payproc_CustomerBindingFailed'{}.

%% union 'CustomerBindingChangePayload'
-type 'CustomerBindingChangePayload'() ::
    {'started', 'CustomerBindingStarted'()} |
    {'status_changed', 'CustomerBindingStatusChanged'()} |
    {'interaction_requested', 'CustomerBindingInteractionRequested'()}.

%% struct 'CustomerBindingStarted'
-type 'CustomerBindingStarted'() :: #'payproc_CustomerBindingStarted'{}.

%% struct 'CustomerBindingStatusChanged'
-type 'CustomerBindingStatusChanged'() :: #'payproc_CustomerBindingStatusChanged'{}.

%% struct 'CustomerBindingInteractionRequested'
-type 'CustomerBindingInteractionRequested'() :: #'payproc_CustomerBindingInteractionRequested'{}.

%% struct 'RecurrentPaymentTool'
-type 'RecurrentPaymentTool'() :: #'payproc_RecurrentPaymentTool'{}.

%% struct 'RecurrentPaymentToolParams'
-type 'RecurrentPaymentToolParams'() :: #'payproc_RecurrentPaymentToolParams'{}.

%% struct 'RecurrentPaymentToolCreated'
-type 'RecurrentPaymentToolCreated'() :: #'payproc_RecurrentPaymentToolCreated'{}.

%% struct 'RecurrentPaymentToolAcquired'
-type 'RecurrentPaymentToolAcquired'() :: #'payproc_RecurrentPaymentToolAcquired'{}.

%% struct 'RecurrentPaymentToolAbandoned'
-type 'RecurrentPaymentToolAbandoned'() :: #'payproc_RecurrentPaymentToolAbandoned'{}.

%% struct 'RecurrentPaymentToolFailed'
-type 'RecurrentPaymentToolFailed'() :: #'payproc_RecurrentPaymentToolFailed'{}.

%% union 'RecurrentPaymentToolStatus'
-type 'RecurrentPaymentToolStatus'() ::
    {'created', 'RecurrentPaymentToolCreated'()} |
    {'acquired', 'RecurrentPaymentToolAcquired'()} |
    {'abandoned', 'RecurrentPaymentToolAbandoned'()} |
    {'failed', 'RecurrentPaymentToolFailed'()}.

%% struct 'RecurrentPaymentToolEvent'
-type 'RecurrentPaymentToolEvent'() :: #'payproc_RecurrentPaymentToolEvent'{}.

%% struct 'RecurrentPaymentToolSessionChange'
-type 'RecurrentPaymentToolSessionChange'() :: #'payproc_RecurrentPaymentToolSessionChange'{}.

%% union 'RecurrentPaymentToolChange'
-type 'RecurrentPaymentToolChange'() ::
    {'rec_payment_tool_created', 'RecurrentPaymentToolHasCreated'()} |
    {'rec_payment_tool_acquired', 'RecurrentPaymentToolHasAcquired'()} |
    {'rec_payment_tool_abandoned', 'RecurrentPaymentToolHasAbandoned'()} |
    {'rec_payment_tool_failed', 'RecurrentPaymentToolHasFailed'()} |
    {'rec_payment_tool_session_changed', 'RecurrentPaymentToolSessionChange'()}.

%% struct 'RecurrentPaymentToolHasCreated'
-type 'RecurrentPaymentToolHasCreated'() :: #'payproc_RecurrentPaymentToolHasCreated'{}.

%% struct 'RecurrentPaymentToolHasAcquired'
-type 'RecurrentPaymentToolHasAcquired'() :: #'payproc_RecurrentPaymentToolHasAcquired'{}.

%% struct 'RecurrentPaymentToolHasAbandoned'
-type 'RecurrentPaymentToolHasAbandoned'() :: #'payproc_RecurrentPaymentToolHasAbandoned'{}.

%% struct 'RecurrentPaymentToolHasFailed'
-type 'RecurrentPaymentToolHasFailed'() :: #'payproc_RecurrentPaymentToolHasFailed'{}.

%% struct 'Varset'
-type 'Varset'() :: #'payproc_Varset'{}.

%% struct 'PartyParams'
-type 'PartyParams'() :: #'payproc_PartyParams'{}.

%% struct 'PayoutToolParams'
-type 'PayoutToolParams'() :: #'payproc_PayoutToolParams'{}.

%% struct 'ShopParams'
-type 'ShopParams'() :: #'payproc_ShopParams'{}.

%% struct 'ShopAccountParams'
-type 'ShopAccountParams'() :: #'payproc_ShopAccountParams'{}.

%% struct 'ContractParams'
-type 'ContractParams'() :: #'payproc_ContractParams'{}.

%% struct 'ContractAdjustmentParams'
-type 'ContractAdjustmentParams'() :: #'payproc_ContractAdjustmentParams'{}.

%% union 'PartyModification'
-type 'PartyModification'() ::
    {'contractor_modification', 'ContractorModificationUnit'()} |
    {'contract_modification', 'ContractModificationUnit'()} |
    {'shop_modification', 'ShopModificationUnit'()} |
    {'wallet_modification', 'WalletModificationUnit'()}.

%% struct 'ContractorModificationUnit'
-type 'ContractorModificationUnit'() :: #'payproc_ContractorModificationUnit'{}.

%% union 'ContractorModification'
-type 'ContractorModification'() ::
    {'creation', dmsl_domain_thrift:'Contractor'()} |
    {'identification_level_modification', atom()} |
    {'identity_documents_modification', 'ContractorIdentityDocumentsModification'()}.

%% struct 'ContractorIdentityDocumentsModification'
-type 'ContractorIdentityDocumentsModification'() :: #'payproc_ContractorIdentityDocumentsModification'{}.

%% struct 'ContractModificationUnit'
-type 'ContractModificationUnit'() :: #'payproc_ContractModificationUnit'{}.

%% union 'ContractModification'
-type 'ContractModification'() ::
    {'creation', 'ContractParams'()} |
    {'termination', 'ContractTermination'()} |
    {'adjustment_modification', 'ContractAdjustmentModificationUnit'()} |
    {'payout_tool_modification', 'PayoutToolModificationUnit'()} |
    {'legal_agreement_binding', dmsl_domain_thrift:'LegalAgreement'()} |
    {'contractor_modification', 'ContractorID'()}.

%% struct 'ContractTermination'
-type 'ContractTermination'() :: #'payproc_ContractTermination'{}.

%% struct 'ContractAdjustmentModificationUnit'
-type 'ContractAdjustmentModificationUnit'() :: #'payproc_ContractAdjustmentModificationUnit'{}.

%% union 'ContractAdjustmentModification'
-type 'ContractAdjustmentModification'() ::
    {'creation', 'ContractAdjustmentParams'()}.

%% struct 'PayoutToolModificationUnit'
-type 'PayoutToolModificationUnit'() :: #'payproc_PayoutToolModificationUnit'{}.

%% union 'PayoutToolModification'
-type 'PayoutToolModification'() ::
    {'creation', 'PayoutToolParams'()}.

%% struct 'ShopModificationUnit'
-type 'ShopModificationUnit'() :: #'payproc_ShopModificationUnit'{}.

%% union 'ShopModification'
-type 'ShopModification'() ::
    {'creation', 'ShopParams'()} |
    {'category_modification', dmsl_domain_thrift:'CategoryRef'()} |
    {'details_modification', dmsl_domain_thrift:'ShopDetails'()} |
    {'contract_modification', 'ShopContractModification'()} |
    {'payout_tool_modification', dmsl_domain_thrift:'PayoutToolID'()} |
    {'location_modification', dmsl_domain_thrift:'ShopLocation'()} |
    {'shop_account_creation', 'ShopAccountParams'()} |
    {'payout_schedule_modification', 'ScheduleModification'()} |
    {'proxy_modification', 'ProxyModification'()}.

%% struct 'ShopContractModification'
-type 'ShopContractModification'() :: #'payproc_ShopContractModification'{}.

%% struct 'ScheduleModification'
-type 'ScheduleModification'() :: #'payproc_ScheduleModification'{}.

%% struct 'ProxyModification'
-type 'ProxyModification'() :: #'payproc_ProxyModification'{}.

%% struct 'WalletModificationUnit'
-type 'WalletModificationUnit'() :: #'payproc_WalletModificationUnit'{}.

%% union 'WalletModification'
-type 'WalletModification'() ::
    {'creation', 'WalletParams'()} |
    {'account_creation', 'WalletAccountParams'()}.

%% struct 'WalletParams'
-type 'WalletParams'() :: #'payproc_WalletParams'{}.

%% struct 'WalletAccountParams'
-type 'WalletAccountParams'() :: #'payproc_WalletAccountParams'{}.

%% struct 'Claim'
-type 'Claim'() :: #'payproc_Claim'{}.

%% union 'ClaimStatus'
-type 'ClaimStatus'() ::
    {'pending', 'ClaimPending'()} |
    {'accepted', 'ClaimAccepted'()} |
    {'denied', 'ClaimDenied'()} |
    {'revoked', 'ClaimRevoked'()}.

%% struct 'ClaimPending'
-type 'ClaimPending'() :: #'payproc_ClaimPending'{}.

%% struct 'ClaimAccepted'
-type 'ClaimAccepted'() :: #'payproc_ClaimAccepted'{}.

%% struct 'ClaimDenied'
-type 'ClaimDenied'() :: #'payproc_ClaimDenied'{}.

%% struct 'ClaimRevoked'
-type 'ClaimRevoked'() :: #'payproc_ClaimRevoked'{}.

%% union 'ClaimEffect'
-type 'ClaimEffect'() ::
    {'contract_effect', 'ContractEffectUnit'()} |
    {'shop_effect', 'ShopEffectUnit'()} |
    {'contractor_effect', 'ContractorEffectUnit'()} |
    {'wallet_effect', 'WalletEffectUnit'()}.

%% struct 'ContractEffectUnit'
-type 'ContractEffectUnit'() :: #'payproc_ContractEffectUnit'{}.

%% union 'ContractEffect'
-type 'ContractEffect'() ::
    {'created', dmsl_domain_thrift:'Contract'()} |
    {'status_changed', dmsl_domain_thrift:'ContractStatus'()} |
    {'adjustment_created', dmsl_domain_thrift:'ContractAdjustment'()} |
    {'payout_tool_created', dmsl_domain_thrift:'PayoutTool'()} |
    {'legal_agreement_bound', dmsl_domain_thrift:'LegalAgreement'()} |
    {'contractor_changed', 'ContractorID'()}.

%% struct 'ShopEffectUnit'
-type 'ShopEffectUnit'() :: #'payproc_ShopEffectUnit'{}.

%% union 'ShopEffect'
-type 'ShopEffect'() ::
    {'created', dmsl_domain_thrift:'Shop'()} |
    {'category_changed', dmsl_domain_thrift:'CategoryRef'()} |
    {'details_changed', dmsl_domain_thrift:'ShopDetails'()} |
    {'contract_changed', 'ShopContractChanged'()} |
    {'payout_tool_changed', dmsl_domain_thrift:'PayoutToolID'()} |
    {'location_changed', dmsl_domain_thrift:'ShopLocation'()} |
    {'account_created', dmsl_domain_thrift:'ShopAccount'()} |
    {'payout_schedule_changed', 'ScheduleChanged'()} |
    {'proxy_changed', 'ShopProxyChanged'()}.

%% struct 'ShopContractChanged'
-type 'ShopContractChanged'() :: #'payproc_ShopContractChanged'{}.

%% struct 'ScheduleChanged'
-type 'ScheduleChanged'() :: #'payproc_ScheduleChanged'{}.

%% struct 'ContractorEffectUnit'
-type 'ContractorEffectUnit'() :: #'payproc_ContractorEffectUnit'{}.

%% union 'ContractorEffect'
-type 'ContractorEffect'() ::
    {'created', dmsl_domain_thrift:'PartyContractor'()} |
    {'identification_level_changed', atom()} |
    {'identity_documents_changed', 'ContractorIdentityDocumentsChanged'()}.

%% struct 'ContractorIdentityDocumentsChanged'
-type 'ContractorIdentityDocumentsChanged'() :: #'payproc_ContractorIdentityDocumentsChanged'{}.

%% struct 'WalletEffectUnit'
-type 'WalletEffectUnit'() :: #'payproc_WalletEffectUnit'{}.

%% union 'WalletEffect'
-type 'WalletEffect'() ::
    {'created', dmsl_domain_thrift:'Wallet'()} |
    {'account_created', dmsl_domain_thrift:'WalletAccount'()}.

%% struct 'ShopProxyChanged'
-type 'ShopProxyChanged'() :: #'payproc_ShopProxyChanged'{}.

%% struct 'AccountState'
-type 'AccountState'() :: #'payproc_AccountState'{}.

%% union 'PartyChange'
-type 'PartyChange'() ::
    {'party_created', 'PartyCreated'()} |
    {'party_blocking', dmsl_domain_thrift:'Blocking'()} |
    {'party_suspension', dmsl_domain_thrift:'Suspension'()} |
    {'shop_blocking', 'ShopBlocking'()} |
    {'shop_suspension', 'ShopSuspension'()} |
    {'wallet_blocking', 'WalletBlocking'()} |
    {'wallet_suspension', 'WalletSuspension'()} |
    {'claim_created', 'Claim'()} |
    {'claim_status_changed', 'ClaimStatusChanged'()} |
    {'claim_updated', 'ClaimUpdated'()} |
    {'party_meta_set', 'PartyMetaSet'()} |
    {'party_meta_removed', dmsl_domain_thrift:'PartyMetaNamespace'()} |
    {'revision_changed', 'PartyRevisionChanged'()}.

%% struct 'PartyCreated'
-type 'PartyCreated'() :: #'payproc_PartyCreated'{}.

%% struct 'ShopBlocking'
-type 'ShopBlocking'() :: #'payproc_ShopBlocking'{}.

%% struct 'ShopSuspension'
-type 'ShopSuspension'() :: #'payproc_ShopSuspension'{}.

%% struct 'WalletBlocking'
-type 'WalletBlocking'() :: #'payproc_WalletBlocking'{}.

%% struct 'WalletSuspension'
-type 'WalletSuspension'() :: #'payproc_WalletSuspension'{}.

%% struct 'ClaimStatusChanged'
-type 'ClaimStatusChanged'() :: #'payproc_ClaimStatusChanged'{}.

%% struct 'ClaimUpdated'
-type 'ClaimUpdated'() :: #'payproc_ClaimUpdated'{}.

%% struct 'PartyMetaSet'
-type 'PartyMetaSet'() :: #'payproc_PartyMetaSet'{}.

%% struct 'PartyRevisionChanged'
-type 'PartyRevisionChanged'() :: #'payproc_PartyRevisionChanged'{}.

%% union 'PartyRevisionParam'
-type 'PartyRevisionParam'() ::
    {'timestamp', dmsl_base_thrift:'Timestamp'()} |
    {'revision', dmsl_domain_thrift:'PartyRevision'()}.

%% struct 'PayoutParams'
-type 'PayoutParams'() :: #'payproc_PayoutParams'{}.

%% union 'InvalidChangesetReason'
-type 'InvalidChangesetReason'() ::
    {'contract_not_exists', 'ContractID'()} |
    {'contract_already_exists', 'ContractID'()} |
    {'contract_status_invalid', 'ContractStatusInvalid'()} |
    {'contract_adjustment_already_exists', dmsl_domain_thrift:'ContractAdjustmentID'()} |
    {'payout_tool_not_exists', dmsl_domain_thrift:'PayoutToolID'()} |
    {'payout_tool_already_exists', dmsl_domain_thrift:'PayoutToolID'()} |
    {'shop_not_exists', 'ShopID'()} |
    {'shop_already_exists', 'ShopID'()} |
    {'shop_status_invalid', 'ShopStatusInvalid'()} |
    {'contract_terms_violated', 'ContractTermsViolated'()}.

%% struct 'ContractStatusInvalid'
-type 'ContractStatusInvalid'() :: #'payproc_ContractStatusInvalid'{}.

%% struct 'ShopStatusInvalid'
-type 'ShopStatusInvalid'() :: #'payproc_ShopStatusInvalid'{}.

%% struct 'ContractTermsViolated'
-type 'ContractTermsViolated'() :: #'payproc_ContractTermsViolated'{}.

%% exception 'PartyNotFound'
-type 'PartyNotFound'() :: #'payproc_PartyNotFound'{}.

%% exception 'PartyNotExistsYet'
-type 'PartyNotExistsYet'() :: #'payproc_PartyNotExistsYet'{}.

%% exception 'InvalidPartyRevision'
-type 'InvalidPartyRevision'() :: #'payproc_InvalidPartyRevision'{}.

%% exception 'ShopNotFound'
-type 'ShopNotFound'() :: #'payproc_ShopNotFound'{}.

%% exception 'WalletNotFound'
-type 'WalletNotFound'() :: #'payproc_WalletNotFound'{}.

%% exception 'InvalidPartyStatus'
-type 'InvalidPartyStatus'() :: #'payproc_InvalidPartyStatus'{}.

%% exception 'InvalidShopStatus'
-type 'InvalidShopStatus'() :: #'payproc_InvalidShopStatus'{}.

%% exception 'InvalidWalletStatus'
-type 'InvalidWalletStatus'() :: #'payproc_InvalidWalletStatus'{}.

%% exception 'InvalidContractStatus'
-type 'InvalidContractStatus'() :: #'payproc_InvalidContractStatus'{}.

%% exception 'InvalidUser'
-type 'InvalidUser'() :: #'payproc_InvalidUser'{}.

%% exception 'InvoiceNotFound'
-type 'InvoiceNotFound'() :: #'payproc_InvoiceNotFound'{}.

%% exception 'InvoicePaymentNotFound'
-type 'InvoicePaymentNotFound'() :: #'payproc_InvoicePaymentNotFound'{}.

%% exception 'InvoicePaymentRefundNotFound'
-type 'InvoicePaymentRefundNotFound'() :: #'payproc_InvoicePaymentRefundNotFound'{}.

%% exception 'InvoicePaymentAdjustmentNotFound'
-type 'InvoicePaymentAdjustmentNotFound'() :: #'payproc_InvoicePaymentAdjustmentNotFound'{}.

%% exception 'EventNotFound'
-type 'EventNotFound'() :: #'payproc_EventNotFound'{}.

%% exception 'OperationNotPermitted'
-type 'OperationNotPermitted'() :: #'payproc_OperationNotPermitted'{}.

%% exception 'InsufficientAccountBalance'
-type 'InsufficientAccountBalance'() :: #'payproc_InsufficientAccountBalance'{}.

%% exception 'InvoicePaymentPending'
-type 'InvoicePaymentPending'() :: #'payproc_InvoicePaymentPending'{}.

%% exception 'InvoicePaymentRefundPending'
-type 'InvoicePaymentRefundPending'() :: #'payproc_InvoicePaymentRefundPending'{}.

%% exception 'InvoicePaymentAdjustmentPending'
-type 'InvoicePaymentAdjustmentPending'() :: #'payproc_InvoicePaymentAdjustmentPending'{}.

%% exception 'InvalidInvoiceStatus'
-type 'InvalidInvoiceStatus'() :: #'payproc_InvalidInvoiceStatus'{}.

%% exception 'InvalidPaymentStatus'
-type 'InvalidPaymentStatus'() :: #'payproc_InvalidPaymentStatus'{}.

%% exception 'InvalidPaymentAdjustmentStatus'
-type 'InvalidPaymentAdjustmentStatus'() :: #'payproc_InvalidPaymentAdjustmentStatus'{}.

%% exception 'InvoiceTemplateNotFound'
-type 'InvoiceTemplateNotFound'() :: #'payproc_InvoiceTemplateNotFound'{}.

%% exception 'InvoiceTemplateRemoved'
-type 'InvoiceTemplateRemoved'() :: #'payproc_InvoiceTemplateRemoved'{}.

%% exception 'InvoicePaymentAmountExceeded'
-type 'InvoicePaymentAmountExceeded'() :: #'payproc_InvoicePaymentAmountExceeded'{}.

%% exception 'InconsistentRefundCurrency'
-type 'InconsistentRefundCurrency'() :: #'payproc_InconsistentRefundCurrency'{}.

%% exception 'InvalidCustomerStatus'
-type 'InvalidCustomerStatus'() :: #'payproc_InvalidCustomerStatus'{}.

%% exception 'CustomerNotFound'
-type 'CustomerNotFound'() :: #'payproc_CustomerNotFound'{}.

%% exception 'InvalidPaymentTool'
-type 'InvalidPaymentTool'() :: #'payproc_InvalidPaymentTool'{}.

%% exception 'InvalidBinding'
-type 'InvalidBinding'() :: #'payproc_InvalidBinding'{}.

%% exception 'BindingNotFound'
-type 'BindingNotFound'() :: #'payproc_BindingNotFound'{}.

%% exception 'RecurrentPaymentToolNotFound'
-type 'RecurrentPaymentToolNotFound'() :: #'payproc_RecurrentPaymentToolNotFound'{}.

%% exception 'InvalidPaymentMethod'
-type 'InvalidPaymentMethod'() :: #'payproc_InvalidPaymentMethod'{}.

%% exception 'InvalidRecurrentPaymentToolStatus'
-type 'InvalidRecurrentPaymentToolStatus'() :: #'payproc_InvalidRecurrentPaymentToolStatus'{}.

%% exception 'NoLastEvent'
-type 'NoLastEvent'() :: #'payproc_NoLastEvent'{}.

%% exception 'PartyExists'
-type 'PartyExists'() :: #'payproc_PartyExists'{}.

%% exception 'ContractNotFound'
-type 'ContractNotFound'() :: #'payproc_ContractNotFound'{}.

%% exception 'ClaimNotFound'
-type 'ClaimNotFound'() :: #'payproc_ClaimNotFound'{}.

%% exception 'InvalidClaimRevision'
-type 'InvalidClaimRevision'() :: #'payproc_InvalidClaimRevision'{}.

%% exception 'InvalidClaimStatus'
-type 'InvalidClaimStatus'() :: #'payproc_InvalidClaimStatus'{}.

%% exception 'ChangesetConflict'
-type 'ChangesetConflict'() :: #'payproc_ChangesetConflict'{}.

%% exception 'InvalidChangeset'
-type 'InvalidChangeset'() :: #'payproc_InvalidChangeset'{}.

%% exception 'AccountNotFound'
-type 'AccountNotFound'() :: #'payproc_AccountNotFound'{}.

%% exception 'ShopAccountNotFound'
-type 'ShopAccountNotFound'() :: #'payproc_ShopAccountNotFound'{}.

%% exception 'PartyMetaNamespaceNotFound'
-type 'PartyMetaNamespaceNotFound'() :: #'payproc_PartyMetaNamespaceNotFound'{}.

%% exception 'PaymentInstitutionNotFound'
-type 'PaymentInstitutionNotFound'() :: #'payproc_PaymentInstitutionNotFound'{}.

%% exception 'ContractTemplateNotFound'
-type 'ContractTemplateNotFound'() :: #'payproc_ContractTemplateNotFound'{}.

%%
%% services and functions
%%
-type service_name() ::
    'Invoicing' |
    'InvoiceTemplating' |
    'CustomerManagement' |
    'RecurrentPaymentTools' |
    'RecurrentPaymentToolEventSink' |
    'PartyManagement' |
    'EventSink'.

-type function_name() ::
    'Invoicing_service_functions'() |
    'InvoiceTemplating_service_functions'() |
    'CustomerManagement_service_functions'() |
    'RecurrentPaymentTools_service_functions'() |
    'RecurrentPaymentToolEventSink_service_functions'() |
    'PartyManagement_service_functions'() |
    'EventSink_service_functions'().

-type 'Invoicing_service_functions'() ::
    'Create' |
    'CreateWithTemplate' |
    'Get' |
    'GetEvents' |
    'ComputeTerms' |
    'StartPayment' |
    'GetPayment' |
    'CancelPayment' |
    'CapturePayment' |
    'CreatePaymentAdjustment' |
    'GetPaymentAdjustment' |
    'CapturePaymentAdjustment' |
    'CancelPaymentAdjustment' |
    'RefundPayment' |
    'GetPaymentRefund' |
    'Fulfill' |
    'Rescind' |
    'Repair'.

-export_type(['Invoicing_service_functions'/0]).

-type 'InvoiceTemplating_service_functions'() ::
    'Create' |
    'Get' |
    'Update' |
    'Delete' |
    'ComputeTerms'.

-export_type(['InvoiceTemplating_service_functions'/0]).

-type 'CustomerManagement_service_functions'() ::
    'Create' |
    'Get' |
    'Delete' |
    'StartBinding' |
    'GetActiveBinding' |
    'GetEvents'.

-export_type(['CustomerManagement_service_functions'/0]).

-type 'RecurrentPaymentTools_service_functions'() ::
    'Create' |
    'Abandon' |
    'Get' |
    'GetEvents'.

-export_type(['RecurrentPaymentTools_service_functions'/0]).

-type 'RecurrentPaymentToolEventSink_service_functions'() ::
    'GetEvents' |
    'GetLastEventID'.

-export_type(['RecurrentPaymentToolEventSink_service_functions'/0]).

-type 'PartyManagement_service_functions'() ::
    'Create' |
    'Get' |
    'Checkout' |
    'Suspend' |
    'Activate' |
    'Block' |
    'Unblock' |
    'GetMeta' |
    'GetMetaData' |
    'SetMetaData' |
    'RemoveMetaData' |
    'GetContract' |
    'ComputeContractTerms' |
    'GetShop' |
    'SuspendShop' |
    'ActivateShop' |
    'BlockShop' |
    'UnblockShop' |
    'ComputeShopTerms' |
    'GetWallet' |
    'SuspendWallet' |
    'ActivateWallet' |
    'BlockWallet' |
    'UnblockWallet' |
    'CreateClaim' |
    'GetClaim' |
    'GetClaims' |
    'AcceptClaim' |
    'UpdateClaim' |
    'DenyClaim' |
    'RevokeClaim' |
    'GetEvents' |
    'GetShopAccount' |
    'GetAccountState' |
    'ComputePaymentInstitutionTerms' |
    'ComputePayoutCashFlow'.

-export_type(['PartyManagement_service_functions'/0]).

-type 'EventSink_service_functions'() ::
    'GetEvents' |
    'GetLastEventID'.

-export_type(['EventSink_service_functions'/0]).


-type struct_flavour() :: struct | exception | union.
-type field_num() :: pos_integer().
-type field_name() :: atom().
-type field_req() :: required | optional | undefined.

-type type_ref() :: {module(), atom()}.
-type field_type() ::
    bool | byte | i16 | i32 | i64 | string | double |
{enum, type_ref()} |
{struct, struct_flavour(), type_ref()} |
{list, field_type()} |
{set, field_type()} |
{map, field_type(), field_type()}.

-type struct_field_info() ::
    {field_num(), field_req(), field_type(), field_name(), any()}.
-type struct_info() ::
    {struct, struct_flavour(), [struct_field_info()]}.

-type enum_choice() :: none().

-type enum_field_info() ::
    {enum_choice(), integer()}.
-type enum_info() ::
    {enum, [enum_field_info()]}.

-spec typedefs() -> [typedef_name()].

typedefs() ->
    [
        'UserID',
        'Events',
        'InvoicePaymentRefund',
        'InvoicePaymentAdjustment',
        'CustomerID',
        'Metadata',
        'CustomerBindingID',
        'DisposablePaymentResource',
        'RecurrentPaymentToolID',
        'RecurrentPaymentToolEvents',
        'PartyID',
        'ShopID',
        'ContractID',
        'ContractorID',
        'PayoutToolID',
        'WalletID',
        'ContractTemplateRef',
        'PaymentInstitutionRef',
        'PartyChangeset',
        'ClaimID',
        'ClaimRevision',
        'ClaimEffects'
    ].

-spec enums() -> [].

enums() ->
    [].

-spec structs() -> [struct_name()].

structs() ->
    [
        'UserInfo',
        'UserType',
        'InternalUser',
        'ExternalUser',
        'ServiceUser',
        'Event',
        'EventSource',
        'EventPayload',
        'InvoiceChange',
        'InvoiceTemplateChange',
        'InvoiceCreated',
        'InvoiceStatusChanged',
        'InvoicePaymentChange',
        'InvoicePaymentChangePayload',
        'InvoicePaymentStarted',
        'InvoicePaymentStatusChanged',
        'InvoicePaymentSessionChange',
        'SessionChangePayload',
        'SessionStarted',
        'SessionFinished',
        'SessionSuspended',
        'SessionActivated',
        'SessionResult',
        'SessionSucceeded',
        'SessionFailed',
        'InvoiceTemplateCreated',
        'InvoiceTemplateUpdated',
        'InvoiceTemplateDeleted',
        'SessionTransactionBound',
        'SessionProxyStateChanged',
        'SessionInteractionRequested',
        'InvoicePaymentRefundChange',
        'InvoicePaymentRefundChangePayload',
        'InvoicePaymentRefundCreated',
        'InvoicePaymentRefundStatusChanged',
        'InvoicePaymentAdjustmentChange',
        'InvoicePaymentAdjustmentChangePayload',
        'InvoicePaymentAdjustmentCreated',
        'InvoicePaymentAdjustmentStatusChanged',
        'EventRange',
        'InvoiceParams',
        'InvoiceWithTemplateParams',
        'InvoiceTemplateCreateParams',
        'InvoiceTemplateUpdateParams',
        'InvoicePaymentParams',
        'PayerParams',
        'PaymentResourcePayerParams',
        'CustomerPayerParams',
        'InvoicePaymentParamsFlow',
        'InvoicePaymentParamsFlowInstant',
        'InvoicePaymentParamsFlowHold',
        'Invoice',
        'InvoicePayment',
        'InvoicePaymentRefundParams',
        'InvoicePaymentAdjustmentParams',
        'InvalidStatus',
        'CustomerParams',
        'Customer',
        'CustomerStatus',
        'CustomerUnready',
        'CustomerReady',
        'CustomerChange',
        'CustomerCreated',
        'CustomerDeleted',
        'CustomerStatusChanged',
        'CustomerBindingChanged',
        'CustomerBindingParams',
        'CustomerBinding',
        'CustomerBindingStatus',
        'CustomerBindingPending',
        'CustomerBindingSucceeded',
        'CustomerBindingFailed',
        'CustomerBindingChangePayload',
        'CustomerBindingStarted',
        'CustomerBindingStatusChanged',
        'CustomerBindingInteractionRequested',
        'RecurrentPaymentTool',
        'RecurrentPaymentToolParams',
        'RecurrentPaymentToolCreated',
        'RecurrentPaymentToolAcquired',
        'RecurrentPaymentToolAbandoned',
        'RecurrentPaymentToolFailed',
        'RecurrentPaymentToolStatus',
        'RecurrentPaymentToolEvent',
        'RecurrentPaymentToolSessionChange',
        'RecurrentPaymentToolChange',
        'RecurrentPaymentToolHasCreated',
        'RecurrentPaymentToolHasAcquired',
        'RecurrentPaymentToolHasAbandoned',
        'RecurrentPaymentToolHasFailed',
        'Varset',
        'PartyParams',
        'PayoutToolParams',
        'ShopParams',
        'ShopAccountParams',
        'ContractParams',
        'ContractAdjustmentParams',
        'PartyModification',
        'ContractorModificationUnit',
        'ContractorModification',
        'ContractorIdentityDocumentsModification',
        'ContractModificationUnit',
        'ContractModification',
        'ContractTermination',
        'ContractAdjustmentModificationUnit',
        'ContractAdjustmentModification',
        'PayoutToolModificationUnit',
        'PayoutToolModification',
        'ShopModificationUnit',
        'ShopModification',
        'ShopContractModification',
        'ScheduleModification',
        'ProxyModification',
        'WalletModificationUnit',
        'WalletModification',
        'WalletParams',
        'WalletAccountParams',
        'Claim',
        'ClaimStatus',
        'ClaimPending',
        'ClaimAccepted',
        'ClaimDenied',
        'ClaimRevoked',
        'ClaimEffect',
        'ContractEffectUnit',
        'ContractEffect',
        'ShopEffectUnit',
        'ShopEffect',
        'ShopContractChanged',
        'ScheduleChanged',
        'ContractorEffectUnit',
        'ContractorEffect',
        'ContractorIdentityDocumentsChanged',
        'WalletEffectUnit',
        'WalletEffect',
        'ShopProxyChanged',
        'AccountState',
        'PartyChange',
        'PartyCreated',
        'ShopBlocking',
        'ShopSuspension',
        'WalletBlocking',
        'WalletSuspension',
        'ClaimStatusChanged',
        'ClaimUpdated',
        'PartyMetaSet',
        'PartyRevisionChanged',
        'PartyRevisionParam',
        'PayoutParams',
        'InvalidChangesetReason',
        'ContractStatusInvalid',
        'ShopStatusInvalid',
        'ContractTermsViolated'
    ].

-spec services() -> [service_name()].

services() ->
    [
        'Invoicing',
        'InvoiceTemplating',
        'CustomerManagement',
        'RecurrentPaymentTools',
        'RecurrentPaymentToolEventSink',
        'PartyManagement',
        'EventSink'
    ].

-spec namespace() -> namespace().

namespace() ->
    'payproc'.

-spec typedef_info(typedef_name()) -> field_type() | no_return().

typedef_info('UserID') ->
    string;

typedef_info('Events') ->
    {list, {struct, struct, {dmsl_payment_processing_thrift, 'Event'}}};

typedef_info('InvoicePaymentRefund') ->
    {struct, struct, {dmsl_domain_thrift, 'InvoicePaymentRefund'}};

typedef_info('InvoicePaymentAdjustment') ->
    {struct, struct, {dmsl_domain_thrift, 'InvoicePaymentAdjustment'}};

typedef_info('CustomerID') ->
    string;

typedef_info('Metadata') ->
    {struct, union, {dmsl_json_thrift, 'Value'}};

typedef_info('CustomerBindingID') ->
    string;

typedef_info('DisposablePaymentResource') ->
    {struct, struct, {dmsl_domain_thrift, 'DisposablePaymentResource'}};

typedef_info('RecurrentPaymentToolID') ->
    string;

typedef_info('RecurrentPaymentToolEvents') ->
    {list, {struct, struct, {dmsl_payment_processing_thrift, 'RecurrentPaymentToolEvent'}}};

typedef_info('PartyID') ->
    string;

typedef_info('ShopID') ->
    string;

typedef_info('ContractID') ->
    string;

typedef_info('ContractorID') ->
    string;

typedef_info('PayoutToolID') ->
    string;

typedef_info('WalletID') ->
    string;

typedef_info('ContractTemplateRef') ->
    {struct, struct, {dmsl_domain_thrift, 'ContractTemplateRef'}};

typedef_info('PaymentInstitutionRef') ->
    {struct, struct, {dmsl_domain_thrift, 'PaymentInstitutionRef'}};

typedef_info('PartyChangeset') ->
    {list, {struct, union, {dmsl_payment_processing_thrift, 'PartyModification'}}};

typedef_info('ClaimID') ->
    i64;

typedef_info('ClaimRevision') ->
    i32;

typedef_info('ClaimEffects') ->
    {list, {struct, union, {dmsl_payment_processing_thrift, 'ClaimEffect'}}};

typedef_info(_) -> erlang:error(badarg).

-spec enum_info(_) -> no_return().

enum_info(_) -> erlang:error(badarg).

-spec struct_info(struct_name() | exception_name()) -> struct_info() | no_return().

struct_info('UserInfo') ->
    {struct, struct, [
    {1, required, string, 'id', undefined},
    {2, required, {struct, union, {dmsl_payment_processing_thrift, 'UserType'}}, 'type', undefined}
]};

struct_info('UserType') ->
    {struct, union, [
    {1, optional, {struct, struct, {dmsl_payment_processing_thrift, 'InternalUser'}}, 'internal_user', undefined},
    {2, optional, {struct, struct, {dmsl_payment_processing_thrift, 'ExternalUser'}}, 'external_user', undefined},
    {3, optional, {struct, struct, {dmsl_payment_processing_thrift, 'ServiceUser'}}, 'service_user', undefined}
]};

struct_info('InternalUser') ->
    {struct, struct, []};

struct_info('ExternalUser') ->
    {struct, struct, []};

struct_info('ServiceUser') ->
    {struct, struct, []};

struct_info('Event') ->
    {struct, struct, [
    {1, required, i64, 'id', undefined},
    {2, required, string, 'created_at', undefined},
    {3, required, {struct, union, {dmsl_payment_processing_thrift, 'EventSource'}}, 'source', undefined},
    {4, required, {struct, union, {dmsl_payment_processing_thrift, 'EventPayload'}}, 'payload', undefined}
]};

struct_info('EventSource') ->
    {struct, union, [
    {1, optional, string, 'invoice_id', undefined},
    {2, optional, string, 'party_id', undefined},
    {3, optional, string, 'invoice_template_id', undefined},
    {4, optional, string, 'customer_id', undefined}
]};

struct_info('EventPayload') ->
    {struct, union, [
    {1, optional, {list, {struct, union, {dmsl_payment_processing_thrift, 'InvoiceChange'}}}, 'invoice_changes', undefined},
    {2, optional, {list, {struct, union, {dmsl_payment_processing_thrift, 'PartyChange'}}}, 'party_changes', undefined},
    {3, optional, {list, {struct, union, {dmsl_payment_processing_thrift, 'InvoiceTemplateChange'}}}, 'invoice_template_changes', undefined},
    {4, optional, {list, {struct, union, {dmsl_payment_processing_thrift, 'CustomerChange'}}}, 'customer_changes', undefined}
]};

struct_info('InvoiceChange') ->
    {struct, union, [
    {1, optional, {struct, struct, {dmsl_payment_processing_thrift, 'InvoiceCreated'}}, 'invoice_created', undefined},
    {2, optional, {struct, struct, {dmsl_payment_processing_thrift, 'InvoiceStatusChanged'}}, 'invoice_status_changed', undefined},
    {3, optional, {struct, struct, {dmsl_payment_processing_thrift, 'InvoicePaymentChange'}}, 'invoice_payment_change', undefined}
]};

struct_info('InvoiceTemplateChange') ->
    {struct, union, [
    {1, optional, {struct, struct, {dmsl_payment_processing_thrift, 'InvoiceTemplateCreated'}}, 'invoice_template_created', undefined},
    {2, optional, {struct, struct, {dmsl_payment_processing_thrift, 'InvoiceTemplateUpdated'}}, 'invoice_template_updated', undefined},
    {3, optional, {struct, struct, {dmsl_payment_processing_thrift, 'InvoiceTemplateDeleted'}}, 'invoice_template_deleted', undefined}
]};

struct_info('InvoiceCreated') ->
    {struct, struct, [
    {1, required, {struct, struct, {dmsl_domain_thrift, 'Invoice'}}, 'invoice', undefined}
]};

struct_info('InvoiceStatusChanged') ->
    {struct, struct, [
    {1, required, {struct, union, {dmsl_domain_thrift, 'InvoiceStatus'}}, 'status', undefined}
]};

struct_info('InvoicePaymentChange') ->
    {struct, struct, [
    {1, required, string, 'id', undefined},
    {2, required, {struct, union, {dmsl_payment_processing_thrift, 'InvoicePaymentChangePayload'}}, 'payload', undefined}
]};

struct_info('InvoicePaymentChangePayload') ->
    {struct, union, [
    {1, optional, {struct, struct, {dmsl_payment_processing_thrift, 'InvoicePaymentStarted'}}, 'invoice_payment_started', undefined},
    {3, optional, {struct, struct, {dmsl_payment_processing_thrift, 'InvoicePaymentStatusChanged'}}, 'invoice_payment_status_changed', undefined},
    {2, optional, {struct, struct, {dmsl_payment_processing_thrift, 'InvoicePaymentSessionChange'}}, 'invoice_payment_session_change', undefined},
    {7, optional, {struct, struct, {dmsl_payment_processing_thrift, 'InvoicePaymentRefundChange'}}, 'invoice_payment_refund_change', undefined},
    {6, optional, {struct, struct, {dmsl_payment_processing_thrift, 'InvoicePaymentAdjustmentChange'}}, 'invoice_payment_adjustment_change', undefined}
]};

struct_info('InvoicePaymentStarted') ->
    {struct, struct, [
    {1, required, {struct, struct, {dmsl_domain_thrift, 'InvoicePayment'}}, 'payment', undefined},
    {4, required, {enum, {dmsl_domain_thrift, 'RiskScore'}}, 'risk_score', undefined},
    {2, required, {struct, struct, {dmsl_domain_thrift, 'PaymentRoute'}}, 'route', undefined},
    {3, required, {list, {struct, struct, {dmsl_domain_thrift, 'FinalCashFlowPosting'}}}, 'cash_flow', undefined}
]};

struct_info('InvoicePaymentStatusChanged') ->
    {struct, struct, [
    {1, required, {struct, union, {dmsl_domain_thrift, 'InvoicePaymentStatus'}}, 'status', undefined}
]};

struct_info('InvoicePaymentSessionChange') ->
    {struct, struct, [
    {1, required, {struct, union, {dmsl_domain_thrift, 'TargetInvoicePaymentStatus'}}, 'target', undefined},
    {2, required, {struct, union, {dmsl_payment_processing_thrift, 'SessionChangePayload'}}, 'payload', undefined}
]};

struct_info('SessionChangePayload') ->
    {struct, union, [
    {1, optional, {struct, struct, {dmsl_payment_processing_thrift, 'SessionStarted'}}, 'session_started', undefined},
    {2, optional, {struct, struct, {dmsl_payment_processing_thrift, 'SessionFinished'}}, 'session_finished', undefined},
    {3, optional, {struct, struct, {dmsl_payment_processing_thrift, 'SessionSuspended'}}, 'session_suspended', undefined},
    {4, optional, {struct, struct, {dmsl_payment_processing_thrift, 'SessionActivated'}}, 'session_activated', undefined},
    {5, optional, {struct, struct, {dmsl_payment_processing_thrift, 'SessionTransactionBound'}}, 'session_transaction_bound', undefined},
    {6, optional, {struct, struct, {dmsl_payment_processing_thrift, 'SessionProxyStateChanged'}}, 'session_proxy_state_changed', undefined},
    {7, optional, {struct, struct, {dmsl_payment_processing_thrift, 'SessionInteractionRequested'}}, 'session_interaction_requested', undefined}
]};

struct_info('SessionStarted') ->
    {struct, struct, []};

struct_info('SessionFinished') ->
    {struct, struct, [
    {1, required, {struct, union, {dmsl_payment_processing_thrift, 'SessionResult'}}, 'result', undefined}
]};

struct_info('SessionSuspended') ->
    {struct, struct, [
    {1, optional, string, 'tag', undefined}
]};

struct_info('SessionActivated') ->
    {struct, struct, []};

struct_info('SessionResult') ->
    {struct, union, [
    {1, optional, {struct, struct, {dmsl_payment_processing_thrift, 'SessionSucceeded'}}, 'succeeded', undefined},
    {2, optional, {struct, struct, {dmsl_payment_processing_thrift, 'SessionFailed'}}, 'failed', undefined}
]};

struct_info('SessionSucceeded') ->
    {struct, struct, []};

struct_info('SessionFailed') ->
    {struct, struct, [
    {1, required, {struct, union, {dmsl_domain_thrift, 'OperationFailure'}}, 'failure', undefined}
]};

struct_info('InvoiceTemplateCreated') ->
    {struct, struct, [
    {1, required, {struct, struct, {dmsl_domain_thrift, 'InvoiceTemplate'}}, 'invoice_template', undefined}
]};

struct_info('InvoiceTemplateUpdated') ->
    {struct, struct, [
    {1, required, {struct, struct, {dmsl_payment_processing_thrift, 'InvoiceTemplateUpdateParams'}}, 'diff', undefined}
]};

struct_info('InvoiceTemplateDeleted') ->
    {struct, struct, []};

struct_info('SessionTransactionBound') ->
    {struct, struct, [
    {1, required, {struct, struct, {dmsl_domain_thrift, 'TransactionInfo'}}, 'trx', undefined}
]};

struct_info('SessionProxyStateChanged') ->
    {struct, struct, [
    {1, required, string, 'proxy_state', undefined}
]};

struct_info('SessionInteractionRequested') ->
    {struct, struct, [
    {1, required, {struct, union, {dmsl_user_interaction_thrift, 'UserInteraction'}}, 'interaction', undefined}
]};

struct_info('InvoicePaymentRefundChange') ->
    {struct, struct, [
    {1, required, string, 'id', undefined},
    {2, required, {struct, union, {dmsl_payment_processing_thrift, 'InvoicePaymentRefundChangePayload'}}, 'payload', undefined}
]};

struct_info('InvoicePaymentRefundChangePayload') ->
    {struct, union, [
    {1, optional, {struct, struct, {dmsl_payment_processing_thrift, 'InvoicePaymentRefundCreated'}}, 'invoice_payment_refund_created', undefined},
    {2, optional, {struct, struct, {dmsl_payment_processing_thrift, 'InvoicePaymentRefundStatusChanged'}}, 'invoice_payment_refund_status_changed', undefined},
    {3, optional, {struct, struct, {dmsl_payment_processing_thrift, 'InvoicePaymentSessionChange'}}, 'invoice_payment_session_change', undefined}
]};

struct_info('InvoicePaymentRefundCreated') ->
    {struct, struct, [
    {1, required, {struct, struct, {dmsl_domain_thrift, 'InvoicePaymentRefund'}}, 'refund', undefined},
    {2, required, {list, {struct, struct, {dmsl_domain_thrift, 'FinalCashFlowPosting'}}}, 'cash_flow', undefined}
]};

struct_info('InvoicePaymentRefundStatusChanged') ->
    {struct, struct, [
    {1, required, {struct, union, {dmsl_domain_thrift, 'InvoicePaymentRefundStatus'}}, 'status', undefined}
]};

struct_info('InvoicePaymentAdjustmentChange') ->
    {struct, struct, [
    {1, required, string, 'id', undefined},
    {2, required, {struct, union, {dmsl_payment_processing_thrift, 'InvoicePaymentAdjustmentChangePayload'}}, 'payload', undefined}
]};

struct_info('InvoicePaymentAdjustmentChangePayload') ->
    {struct, union, [
    {1, optional, {struct, struct, {dmsl_payment_processing_thrift, 'InvoicePaymentAdjustmentCreated'}}, 'invoice_payment_adjustment_created', undefined},
    {2, optional, {struct, struct, {dmsl_payment_processing_thrift, 'InvoicePaymentAdjustmentStatusChanged'}}, 'invoice_payment_adjustment_status_changed', undefined}
]};

struct_info('InvoicePaymentAdjustmentCreated') ->
    {struct, struct, [
    {1, required, {struct, struct, {dmsl_domain_thrift, 'InvoicePaymentAdjustment'}}, 'adjustment', undefined}
]};

struct_info('InvoicePaymentAdjustmentStatusChanged') ->
    {struct, struct, [
    {1, required, {struct, union, {dmsl_domain_thrift, 'InvoicePaymentAdjustmentStatus'}}, 'status', undefined}
]};

struct_info('EventRange') ->
    {struct, struct, [
    {1, optional, i64, 'after', undefined},
    {2, required, i32, 'limit', undefined}
]};

struct_info('InvoiceParams') ->
    {struct, struct, [
    {1, required, string, 'party_id', undefined},
    {2, required, string, 'shop_id', undefined},
    {3, required, {struct, struct, {dmsl_domain_thrift, 'InvoiceDetails'}}, 'details', undefined},
    {4, required, string, 'due', undefined},
    {5, required, {struct, struct, {dmsl_domain_thrift, 'Cash'}}, 'cost', undefined},
    {6, required, {struct, struct, {dmsl_base_thrift, 'Content'}}, 'context', undefined}
]};

struct_info('InvoiceWithTemplateParams') ->
    {struct, struct, [
    {1, required, string, 'template_id', undefined},
    {2, optional, {struct, struct, {dmsl_domain_thrift, 'Cash'}}, 'cost', undefined},
    {3, optional, {struct, struct, {dmsl_base_thrift, 'Content'}}, 'context', undefined}
]};

struct_info('InvoiceTemplateCreateParams') ->
    {struct, struct, [
    {1, required, string, 'party_id', undefined},
    {2, required, string, 'shop_id', undefined},
    {4, required, {struct, struct, {dmsl_domain_thrift, 'LifetimeInterval'}}, 'invoice_lifetime', undefined},
    {7, required, string, 'product', undefined},
    {8, optional, string, 'description', undefined},
    {9, required, {struct, union, {dmsl_domain_thrift, 'InvoiceTemplateDetails'}}, 'details', undefined},
    {6, required, {struct, struct, {dmsl_base_thrift, 'Content'}}, 'context', undefined}
]};

struct_info('InvoiceTemplateUpdateParams') ->
    {struct, struct, [
    {2, optional, {struct, struct, {dmsl_domain_thrift, 'LifetimeInterval'}}, 'invoice_lifetime', undefined},
    {5, optional, string, 'product', undefined},
    {6, optional, string, 'description', undefined},
    {7, optional, {struct, union, {dmsl_domain_thrift, 'InvoiceTemplateDetails'}}, 'details', undefined},
    {4, optional, {struct, struct, {dmsl_base_thrift, 'Content'}}, 'context', undefined}
]};

struct_info('InvoicePaymentParams') ->
    {struct, struct, [
    {1, required, {struct, union, {dmsl_payment_processing_thrift, 'PayerParams'}}, 'payer', undefined},
    {2, required, {struct, union, {dmsl_payment_processing_thrift, 'InvoicePaymentParamsFlow'}}, 'flow', undefined}
]};

struct_info('PayerParams') ->
    {struct, union, [
    {1, optional, {struct, struct, {dmsl_payment_processing_thrift, 'PaymentResourcePayerParams'}}, 'payment_resource', undefined},
    {2, optional, {struct, struct, {dmsl_payment_processing_thrift, 'CustomerPayerParams'}}, 'customer', undefined}
]};

struct_info('PaymentResourcePayerParams') ->
    {struct, struct, [
    {1, required, {struct, struct, {dmsl_domain_thrift, 'DisposablePaymentResource'}}, 'resource', undefined},
    {2, required, {struct, struct, {dmsl_domain_thrift, 'ContactInfo'}}, 'contact_info', undefined}
]};

struct_info('CustomerPayerParams') ->
    {struct, struct, [
    {1, required, string, 'customer_id', undefined}
]};

struct_info('InvoicePaymentParamsFlow') ->
    {struct, union, [
    {1, optional, {struct, struct, {dmsl_payment_processing_thrift, 'InvoicePaymentParamsFlowInstant'}}, 'instant', undefined},
    {2, optional, {struct, struct, {dmsl_payment_processing_thrift, 'InvoicePaymentParamsFlowHold'}}, 'hold', undefined}
]};

struct_info('InvoicePaymentParamsFlowInstant') ->
    {struct, struct, []};

struct_info('InvoicePaymentParamsFlowHold') ->
    {struct, struct, [
    {1, required, {enum, {dmsl_domain_thrift, 'OnHoldExpiration'}}, 'on_hold_expiration', undefined}
]};

struct_info('Invoice') ->
    {struct, struct, [
    {1, required, {struct, struct, {dmsl_domain_thrift, 'Invoice'}}, 'invoice', undefined},
    {2, required, {list, {struct, struct, {dmsl_payment_processing_thrift, 'InvoicePayment'}}}, 'payments', undefined}
]};

struct_info('InvoicePayment') ->
    {struct, struct, [
    {1, required, {struct, struct, {dmsl_domain_thrift, 'InvoicePayment'}}, 'payment', undefined},
    {3, required, {list, {struct, struct, {dmsl_domain_thrift, 'InvoicePaymentRefund'}}}, 'refunds', undefined},
    {2, required, {list, {struct, struct, {dmsl_domain_thrift, 'InvoicePaymentAdjustment'}}}, 'adjustments', undefined}
]};

struct_info('InvoicePaymentRefundParams') ->
    {struct, struct, [
    {1, optional, string, 'reason', undefined},
    {2, optional, {struct, struct, {dmsl_domain_thrift, 'Cash'}}, 'cash', undefined}
]};

struct_info('InvoicePaymentAdjustmentParams') ->
    {struct, struct, [
    {1, optional, i64, 'domain_revision', undefined},
    {2, required, string, 'reason', undefined}
]};

struct_info('InvalidStatus') ->
    {struct, union, [
    {1, optional, {struct, union, {dmsl_domain_thrift, 'Blocking'}}, 'blocking', undefined},
    {2, optional, {struct, union, {dmsl_domain_thrift, 'Suspension'}}, 'suspension', undefined}
]};

struct_info('CustomerParams') ->
    {struct, struct, [
    {1, required, string, 'party_id', undefined},
    {2, required, string, 'shop_id', undefined},
    {3, required, {struct, struct, {dmsl_domain_thrift, 'ContactInfo'}}, 'contact_info', undefined},
    {4, required, {struct, union, {dmsl_json_thrift, 'Value'}}, 'metadata', undefined}
]};

struct_info('Customer') ->
    {struct, struct, [
    {1, required, string, 'id', undefined},
    {2, required, string, 'owner_id', undefined},
    {3, required, string, 'shop_id', undefined},
    {4, required, {struct, union, {dmsl_payment_processing_thrift, 'CustomerStatus'}}, 'status', undefined},
    {5, required, string, 'created_at', undefined},
    {6, required, {list, {struct, struct, {dmsl_payment_processing_thrift, 'CustomerBinding'}}}, 'bindings', undefined},
    {7, required, {struct, struct, {dmsl_domain_thrift, 'ContactInfo'}}, 'contact_info', undefined},
    {8, required, {struct, union, {dmsl_json_thrift, 'Value'}}, 'metadata', undefined},
    {9, optional, string, 'active_binding_id', undefined}
]};

struct_info('CustomerStatus') ->
    {struct, union, [
    {1, optional, {struct, struct, {dmsl_payment_processing_thrift, 'CustomerUnready'}}, 'unready', undefined},
    {2, optional, {struct, struct, {dmsl_payment_processing_thrift, 'CustomerReady'}}, 'ready', undefined}
]};

struct_info('CustomerUnready') ->
    {struct, struct, []};

struct_info('CustomerReady') ->
    {struct, struct, []};

struct_info('CustomerChange') ->
    {struct, union, [
    {1, optional, {struct, struct, {dmsl_payment_processing_thrift, 'CustomerCreated'}}, 'customer_created', undefined},
    {2, optional, {struct, struct, {dmsl_payment_processing_thrift, 'CustomerDeleted'}}, 'customer_deleted', undefined},
    {3, optional, {struct, struct, {dmsl_payment_processing_thrift, 'CustomerStatusChanged'}}, 'customer_status_changed', undefined},
    {4, optional, {struct, struct, {dmsl_payment_processing_thrift, 'CustomerBindingChanged'}}, 'customer_binding_changed', undefined}
]};

struct_info('CustomerCreated') ->
    {struct, struct, [
    {2, required, string, 'customer_id', undefined},
    {3, required, string, 'owner_id', undefined},
    {4, required, string, 'shop_id', undefined},
    {5, required, {struct, union, {dmsl_json_thrift, 'Value'}}, 'metadata', undefined},
    {6, required, {struct, struct, {dmsl_domain_thrift, 'ContactInfo'}}, 'contact_info', undefined},
    {7, required, string, 'created_at', undefined}
]};

struct_info('CustomerDeleted') ->
    {struct, struct, []};

struct_info('CustomerStatusChanged') ->
    {struct, struct, [
    {1, required, {struct, union, {dmsl_payment_processing_thrift, 'CustomerStatus'}}, 'status', undefined}
]};

struct_info('CustomerBindingChanged') ->
    {struct, struct, [
    {1, required, string, 'id', undefined},
    {2, required, {struct, union, {dmsl_payment_processing_thrift, 'CustomerBindingChangePayload'}}, 'payload', undefined}
]};

struct_info('CustomerBindingParams') ->
    {struct, struct, [
    {1, required, {struct, struct, {dmsl_domain_thrift, 'DisposablePaymentResource'}}, 'payment_resource', undefined}
]};

struct_info('CustomerBinding') ->
    {struct, struct, [
    {1, required, string, 'id', undefined},
    {2, required, string, 'rec_payment_tool_id', undefined},
    {3, required, {struct, struct, {dmsl_domain_thrift, 'DisposablePaymentResource'}}, 'payment_resource', undefined},
    {4, required, {struct, union, {dmsl_payment_processing_thrift, 'CustomerBindingStatus'}}, 'status', undefined}
]};

struct_info('CustomerBindingStatus') ->
    {struct, union, [
    {1, optional, {struct, struct, {dmsl_payment_processing_thrift, 'CustomerBindingPending'}}, 'pending', undefined},
    {2, optional, {struct, struct, {dmsl_payment_processing_thrift, 'CustomerBindingSucceeded'}}, 'succeeded', undefined},
    {3, optional, {struct, struct, {dmsl_payment_processing_thrift, 'CustomerBindingFailed'}}, 'failed', undefined}
]};

struct_info('CustomerBindingPending') ->
    {struct, struct, []};

struct_info('CustomerBindingSucceeded') ->
    {struct, struct, []};

struct_info('CustomerBindingFailed') ->
    {struct, struct, [
    {1, required, {struct, union, {dmsl_domain_thrift, 'OperationFailure'}}, 'failure', undefined}
]};

struct_info('CustomerBindingChangePayload') ->
    {struct, union, [
    {1, optional, {struct, struct, {dmsl_payment_processing_thrift, 'CustomerBindingStarted'}}, 'started', undefined},
    {2, optional, {struct, struct, {dmsl_payment_processing_thrift, 'CustomerBindingStatusChanged'}}, 'status_changed', undefined},
    {3, optional, {struct, struct, {dmsl_payment_processing_thrift, 'CustomerBindingInteractionRequested'}}, 'interaction_requested', undefined}
]};

struct_info('CustomerBindingStarted') ->
    {struct, struct, [
    {1, required, {struct, struct, {dmsl_payment_processing_thrift, 'CustomerBinding'}}, 'binding', undefined}
]};

struct_info('CustomerBindingStatusChanged') ->
    {struct, struct, [
    {1, required, {struct, union, {dmsl_payment_processing_thrift, 'CustomerBindingStatus'}}, 'status', undefined}
]};

struct_info('CustomerBindingInteractionRequested') ->
    {struct, struct, [
    {1, required, {struct, union, {dmsl_user_interaction_thrift, 'UserInteraction'}}, 'interaction', undefined}
]};

struct_info('RecurrentPaymentTool') ->
    {struct, struct, [
    {1, required, string, 'id', undefined},
    {2, required, string, 'shop_id', undefined},
    {3, required, string, 'party_id', undefined},
    {4, required, i64, 'domain_revision', undefined},
    {6, required, {struct, union, {dmsl_payment_processing_thrift, 'RecurrentPaymentToolStatus'}}, 'status', undefined},
    {7, required, string, 'created_at', undefined},
    {8, required, {struct, struct, {dmsl_domain_thrift, 'DisposablePaymentResource'}}, 'payment_resource', undefined},
    {9, optional, string, 'rec_token', undefined},
    {10, optional, {struct, struct, {dmsl_domain_thrift, 'PaymentRoute'}}, 'route', undefined}
]};

struct_info('RecurrentPaymentToolParams') ->
    {struct, struct, [
    {1, required, string, 'party_id', undefined},
    {2, required, string, 'shop_id', undefined},
    {3, required, {struct, struct, {dmsl_domain_thrift, 'DisposablePaymentResource'}}, 'payment_resource', undefined}
]};

struct_info('RecurrentPaymentToolCreated') ->
    {struct, struct, []};

struct_info('RecurrentPaymentToolAcquired') ->
    {struct, struct, []};

struct_info('RecurrentPaymentToolAbandoned') ->
    {struct, struct, []};

struct_info('RecurrentPaymentToolFailed') ->
    {struct, struct, [
    {1, required, {struct, union, {dmsl_domain_thrift, 'OperationFailure'}}, 'failure', undefined}
]};

struct_info('RecurrentPaymentToolStatus') ->
    {struct, union, [
    {1, optional, {struct, struct, {dmsl_payment_processing_thrift, 'RecurrentPaymentToolCreated'}}, 'created', undefined},
    {2, optional, {struct, struct, {dmsl_payment_processing_thrift, 'RecurrentPaymentToolAcquired'}}, 'acquired', undefined},
    {3, optional, {struct, struct, {dmsl_payment_processing_thrift, 'RecurrentPaymentToolAbandoned'}}, 'abandoned', undefined},
    {4, optional, {struct, struct, {dmsl_payment_processing_thrift, 'RecurrentPaymentToolFailed'}}, 'failed', undefined}
]};

struct_info('RecurrentPaymentToolEvent') ->
    {struct, struct, [
    {1, required, i64, 'id', undefined},
    {2, required, string, 'created_at', undefined},
    {3, required, string, 'source', undefined},
    {4, required, {list, {struct, union, {dmsl_payment_processing_thrift, 'RecurrentPaymentToolChange'}}}, 'payload', undefined}
]};

struct_info('RecurrentPaymentToolSessionChange') ->
    {struct, struct, [
    {1, required, {struct, union, {dmsl_payment_processing_thrift, 'SessionChangePayload'}}, 'payload', undefined}
]};

struct_info('RecurrentPaymentToolChange') ->
    {struct, union, [
    {1, optional, {struct, struct, {dmsl_payment_processing_thrift, 'RecurrentPaymentToolHasCreated'}}, 'rec_payment_tool_created', undefined},
    {2, optional, {struct, struct, {dmsl_payment_processing_thrift, 'RecurrentPaymentToolHasAcquired'}}, 'rec_payment_tool_acquired', undefined},
    {3, optional, {struct, struct, {dmsl_payment_processing_thrift, 'RecurrentPaymentToolHasAbandoned'}}, 'rec_payment_tool_abandoned', undefined},
    {4, optional, {struct, struct, {dmsl_payment_processing_thrift, 'RecurrentPaymentToolHasFailed'}}, 'rec_payment_tool_failed', undefined},
    {5, optional, {struct, struct, {dmsl_payment_processing_thrift, 'RecurrentPaymentToolSessionChange'}}, 'rec_payment_tool_session_changed', undefined}
]};

struct_info('RecurrentPaymentToolHasCreated') ->
    {struct, struct, [
    {1, required, {struct, struct, {dmsl_payment_processing_thrift, 'RecurrentPaymentTool'}}, 'rec_payment_tool', undefined},
    {2, required, {enum, {dmsl_domain_thrift, 'RiskScore'}}, 'risk_score', undefined},
    {3, required, {struct, struct, {dmsl_domain_thrift, 'PaymentRoute'}}, 'route', undefined}
]};

struct_info('RecurrentPaymentToolHasAcquired') ->
    {struct, struct, [
    {1, required, string, 'token', undefined}
]};

struct_info('RecurrentPaymentToolHasAbandoned') ->
    {struct, struct, []};

struct_info('RecurrentPaymentToolHasFailed') ->
    {struct, struct, [
    {1, required, {struct, union, {dmsl_domain_thrift, 'OperationFailure'}}, 'failure', undefined}
]};

struct_info('Varset') ->
    {struct, struct, [
    {1, optional, {struct, struct, {dmsl_domain_thrift, 'CategoryRef'}}, 'category', undefined},
    {2, optional, {struct, struct, {dmsl_domain_thrift, 'CurrencyRef'}}, 'currency', undefined},
    {3, optional, {struct, struct, {dmsl_domain_thrift, 'Cash'}}, 'amount', undefined},
    {4, optional, {struct, struct, {dmsl_domain_thrift, 'PaymentMethodRef'}}, 'payment_method', undefined},
    {5, optional, {struct, struct, {dmsl_domain_thrift, 'PayoutMethodRef'}}, 'payout_method', undefined}
]};

struct_info('PartyParams') ->
    {struct, struct, [
    {1, required, {struct, struct, {dmsl_domain_thrift, 'PartyContactInfo'}}, 'contact_info', undefined}
]};

struct_info('PayoutToolParams') ->
    {struct, struct, [
    {1, required, {struct, struct, {dmsl_domain_thrift, 'CurrencyRef'}}, 'currency', undefined},
    {2, required, {struct, union, {dmsl_domain_thrift, 'PayoutToolInfo'}}, 'tool_info', undefined}
]};

struct_info('ShopParams') ->
    {struct, struct, [
    {1, optional, {struct, struct, {dmsl_domain_thrift, 'CategoryRef'}}, 'category', undefined},
    {6, required, {struct, union, {dmsl_domain_thrift, 'ShopLocation'}}, 'location', undefined},
    {2, required, {struct, struct, {dmsl_domain_thrift, 'ShopDetails'}}, 'details', undefined},
    {3, required, string, 'contract_id', undefined},
    {4, required, string, 'payout_tool_id', undefined}
]};

struct_info('ShopAccountParams') ->
    {struct, struct, [
    {1, required, {struct, struct, {dmsl_domain_thrift, 'CurrencyRef'}}, 'currency', undefined}
]};

struct_info('ContractParams') ->
    {struct, struct, [
    {4, optional, string, 'contractor_id', undefined},
    {2, optional, {struct, struct, {dmsl_domain_thrift, 'ContractTemplateRef'}}, 'template', undefined},
    {3, optional, {struct, struct, {dmsl_domain_thrift, 'PaymentInstitutionRef'}}, 'payment_institution', undefined},
    {1, optional, {struct, union, {dmsl_domain_thrift, 'Contractor'}}, 'contractor', undefined}
]};

struct_info('ContractAdjustmentParams') ->
    {struct, struct, [
    {1, required, {struct, struct, {dmsl_domain_thrift, 'ContractTemplateRef'}}, 'template', undefined}
]};

struct_info('PartyModification') ->
    {struct, union, [
    {8, optional, {struct, struct, {dmsl_payment_processing_thrift, 'ContractorModificationUnit'}}, 'contractor_modification', undefined},
    {4, optional, {struct, struct, {dmsl_payment_processing_thrift, 'ContractModificationUnit'}}, 'contract_modification', undefined},
    {6, optional, {struct, struct, {dmsl_payment_processing_thrift, 'ShopModificationUnit'}}, 'shop_modification', undefined},
    {7, optional, {struct, struct, {dmsl_payment_processing_thrift, 'WalletModificationUnit'}}, 'wallet_modification', undefined}
]};

struct_info('ContractorModificationUnit') ->
    {struct, struct, [
    {1, required, string, 'id', undefined},
    {2, required, {struct, union, {dmsl_payment_processing_thrift, 'ContractorModification'}}, 'modification', undefined}
]};

struct_info('ContractorModification') ->
    {struct, union, [
    {1, optional, {struct, union, {dmsl_domain_thrift, 'Contractor'}}, 'creation', undefined},
    {2, optional, {enum, {dmsl_domain_thrift, 'ContractorIdentificationLevel'}}, 'identification_level_modification', undefined},
    {3, optional, {struct, struct, {dmsl_payment_processing_thrift, 'ContractorIdentityDocumentsModification'}}, 'identity_documents_modification', undefined}
]};

struct_info('ContractorIdentityDocumentsModification') ->
    {struct, struct, [
    {1, required, {list, string}, 'identity_documents', undefined}
]};

struct_info('ContractModificationUnit') ->
    {struct, struct, [
    {1, required, string, 'id', undefined},
    {2, required, {struct, union, {dmsl_payment_processing_thrift, 'ContractModification'}}, 'modification', undefined}
]};

struct_info('ContractModification') ->
    {struct, union, [
    {1, optional, {struct, struct, {dmsl_payment_processing_thrift, 'ContractParams'}}, 'creation', undefined},
    {2, optional, {struct, struct, {dmsl_payment_processing_thrift, 'ContractTermination'}}, 'termination', undefined},
    {3, optional, {struct, struct, {dmsl_payment_processing_thrift, 'ContractAdjustmentModificationUnit'}}, 'adjustment_modification', undefined},
    {4, optional, {struct, struct, {dmsl_payment_processing_thrift, 'PayoutToolModificationUnit'}}, 'payout_tool_modification', undefined},
    {5, optional, {struct, struct, {dmsl_domain_thrift, 'LegalAgreement'}}, 'legal_agreement_binding', undefined},
    {6, optional, string, 'contractor_modification', undefined}
]};

struct_info('ContractTermination') ->
    {struct, struct, [
    {2, optional, string, 'reason', undefined}
]};

struct_info('ContractAdjustmentModificationUnit') ->
    {struct, struct, [
    {1, required, string, 'adjustment_id', undefined},
    {2, required, {struct, union, {dmsl_payment_processing_thrift, 'ContractAdjustmentModification'}}, 'modification', undefined}
]};

struct_info('ContractAdjustmentModification') ->
    {struct, union, [
    {1, optional, {struct, struct, {dmsl_payment_processing_thrift, 'ContractAdjustmentParams'}}, 'creation', undefined}
]};

struct_info('PayoutToolModificationUnit') ->
    {struct, struct, [
    {1, required, string, 'payout_tool_id', undefined},
    {2, required, {struct, union, {dmsl_payment_processing_thrift, 'PayoutToolModification'}}, 'modification', undefined}
]};

struct_info('PayoutToolModification') ->
    {struct, union, [
    {1, optional, {struct, struct, {dmsl_payment_processing_thrift, 'PayoutToolParams'}}, 'creation', undefined}
]};

struct_info('ShopModificationUnit') ->
    {struct, struct, [
    {1, required, string, 'id', undefined},
    {2, required, {struct, union, {dmsl_payment_processing_thrift, 'ShopModification'}}, 'modification', undefined}
]};

struct_info('ShopModification') ->
    {struct, union, [
    {5, optional, {struct, struct, {dmsl_payment_processing_thrift, 'ShopParams'}}, 'creation', undefined},
    {6, optional, {struct, struct, {dmsl_domain_thrift, 'CategoryRef'}}, 'category_modification', undefined},
    {7, optional, {struct, struct, {dmsl_domain_thrift, 'ShopDetails'}}, 'details_modification', undefined},
    {8, optional, {struct, struct, {dmsl_payment_processing_thrift, 'ShopContractModification'}}, 'contract_modification', undefined},
    {9, optional, string, 'payout_tool_modification', undefined},
    {11, optional, {struct, union, {dmsl_domain_thrift, 'ShopLocation'}}, 'location_modification', undefined},
    {12, optional, {struct, struct, {dmsl_payment_processing_thrift, 'ShopAccountParams'}}, 'shop_account_creation', undefined},
    {13, optional, {struct, struct, {dmsl_payment_processing_thrift, 'ScheduleModification'}}, 'payout_schedule_modification', undefined},
    {10, optional, {struct, struct, {dmsl_payment_processing_thrift, 'ProxyModification'}}, 'proxy_modification', undefined}
]};

struct_info('ShopContractModification') ->
    {struct, struct, [
    {1, required, string, 'contract_id', undefined},
    {2, required, string, 'payout_tool_id', undefined}
]};

struct_info('ScheduleModification') ->
    {struct, struct, [
    {1, optional, {struct, struct, {dmsl_domain_thrift, 'PayoutScheduleRef'}}, 'schedule', undefined}
]};

struct_info('ProxyModification') ->
    {struct, struct, [
    {1, optional, {struct, struct, {dmsl_domain_thrift, 'Proxy'}}, 'proxy', undefined}
]};

struct_info('WalletModificationUnit') ->
    {struct, struct, [
    {1, required, string, 'id', undefined},
    {2, required, {struct, union, {dmsl_payment_processing_thrift, 'WalletModification'}}, 'modification', undefined}
]};

struct_info('WalletModification') ->
    {struct, union, [
    {1, optional, {struct, struct, {dmsl_payment_processing_thrift, 'WalletParams'}}, 'creation', undefined},
    {2, optional, {struct, struct, {dmsl_payment_processing_thrift, 'WalletAccountParams'}}, 'account_creation', undefined}
]};

struct_info('WalletParams') ->
    {struct, struct, [
    {1, optional, string, 'name', undefined},
    {2, required, string, 'contract_id', undefined}
]};

struct_info('WalletAccountParams') ->
    {struct, struct, [
    {1, required, {struct, struct, {dmsl_domain_thrift, 'CurrencyRef'}}, 'currency', undefined}
]};

struct_info('Claim') ->
    {struct, struct, [
    {1, required, i64, 'id', undefined},
    {2, required, {struct, union, {dmsl_payment_processing_thrift, 'ClaimStatus'}}, 'status', undefined},
    {3, required, {list, {struct, union, {dmsl_payment_processing_thrift, 'PartyModification'}}}, 'changeset', undefined},
    {4, required, i32, 'revision', undefined},
    {5, required, string, 'created_at', undefined},
    {6, optional, string, 'updated_at', undefined}
]};

struct_info('ClaimStatus') ->
    {struct, union, [
    {1, optional, {struct, struct, {dmsl_payment_processing_thrift, 'ClaimPending'}}, 'pending', undefined},
    {2, optional, {struct, struct, {dmsl_payment_processing_thrift, 'ClaimAccepted'}}, 'accepted', undefined},
    {3, optional, {struct, struct, {dmsl_payment_processing_thrift, 'ClaimDenied'}}, 'denied', undefined},
    {4, optional, {struct, struct, {dmsl_payment_processing_thrift, 'ClaimRevoked'}}, 'revoked', undefined}
]};

struct_info('ClaimPending') ->
    {struct, struct, []};

struct_info('ClaimAccepted') ->
    {struct, struct, [
    {2, optional, {list, {struct, union, {dmsl_payment_processing_thrift, 'ClaimEffect'}}}, 'effects', undefined}
]};

struct_info('ClaimDenied') ->
    {struct, struct, [
    {1, optional, string, 'reason', undefined}
]};

struct_info('ClaimRevoked') ->
    {struct, struct, [
    {1, optional, string, 'reason', undefined}
]};

struct_info('ClaimEffect') ->
    {struct, union, [
    {2, optional, {struct, struct, {dmsl_payment_processing_thrift, 'ContractEffectUnit'}}, 'contract_effect', undefined},
    {3, optional, {struct, struct, {dmsl_payment_processing_thrift, 'ShopEffectUnit'}}, 'shop_effect', undefined},
    {4, optional, {struct, struct, {dmsl_payment_processing_thrift, 'ContractorEffectUnit'}}, 'contractor_effect', undefined},
    {5, optional, {struct, struct, {dmsl_payment_processing_thrift, 'WalletEffectUnit'}}, 'wallet_effect', undefined}
]};

struct_info('ContractEffectUnit') ->
    {struct, struct, [
    {1, required, string, 'contract_id', undefined},
    {2, required, {struct, union, {dmsl_payment_processing_thrift, 'ContractEffect'}}, 'effect', undefined}
]};

struct_info('ContractEffect') ->
    {struct, union, [
    {1, optional, {struct, struct, {dmsl_domain_thrift, 'Contract'}}, 'created', undefined},
    {2, optional, {struct, union, {dmsl_domain_thrift, 'ContractStatus'}}, 'status_changed', undefined},
    {3, optional, {struct, struct, {dmsl_domain_thrift, 'ContractAdjustment'}}, 'adjustment_created', undefined},
    {4, optional, {struct, struct, {dmsl_domain_thrift, 'PayoutTool'}}, 'payout_tool_created', undefined},
    {5, optional, {struct, struct, {dmsl_domain_thrift, 'LegalAgreement'}}, 'legal_agreement_bound', undefined},
    {6, optional, string, 'contractor_changed', undefined}
]};

struct_info('ShopEffectUnit') ->
    {struct, struct, [
    {1, required, string, 'shop_id', undefined},
    {2, required, {struct, union, {dmsl_payment_processing_thrift, 'ShopEffect'}}, 'effect', undefined}
]};

struct_info('ShopEffect') ->
    {struct, union, [
    {1, optional, {struct, struct, {dmsl_domain_thrift, 'Shop'}}, 'created', undefined},
    {2, optional, {struct, struct, {dmsl_domain_thrift, 'CategoryRef'}}, 'category_changed', undefined},
    {3, optional, {struct, struct, {dmsl_domain_thrift, 'ShopDetails'}}, 'details_changed', undefined},
    {4, optional, {struct, struct, {dmsl_payment_processing_thrift, 'ShopContractChanged'}}, 'contract_changed', undefined},
    {5, optional, string, 'payout_tool_changed', undefined},
    {7, optional, {struct, union, {dmsl_domain_thrift, 'ShopLocation'}}, 'location_changed', undefined},
    {8, optional, {struct, struct, {dmsl_domain_thrift, 'ShopAccount'}}, 'account_created', undefined},
    {9, optional, {struct, struct, {dmsl_payment_processing_thrift, 'ScheduleChanged'}}, 'payout_schedule_changed', undefined},
    {6, optional, {struct, struct, {dmsl_payment_processing_thrift, 'ShopProxyChanged'}}, 'proxy_changed', undefined}
]};

struct_info('ShopContractChanged') ->
    {struct, struct, [
    {1, required, string, 'contract_id', undefined},
    {2, required, string, 'payout_tool_id', undefined}
]};

struct_info('ScheduleChanged') ->
    {struct, struct, [
    {1, optional, {struct, struct, {dmsl_domain_thrift, 'PayoutScheduleRef'}}, 'schedule', undefined}
]};

struct_info('ContractorEffectUnit') ->
    {struct, struct, [
    {1, required, string, 'id', undefined},
    {2, required, {struct, union, {dmsl_payment_processing_thrift, 'ContractorEffect'}}, 'effect', undefined}
]};

struct_info('ContractorEffect') ->
    {struct, union, [
    {1, optional, {struct, struct, {dmsl_domain_thrift, 'PartyContractor'}}, 'created', undefined},
    {2, optional, {enum, {dmsl_domain_thrift, 'ContractorIdentificationLevel'}}, 'identification_level_changed', undefined},
    {3, optional, {struct, struct, {dmsl_payment_processing_thrift, 'ContractorIdentityDocumentsChanged'}}, 'identity_documents_changed', undefined}
]};

struct_info('ContractorIdentityDocumentsChanged') ->
    {struct, struct, [
    {1, required, {list, string}, 'identity_documents', undefined}
]};

struct_info('WalletEffectUnit') ->
    {struct, struct, [
    {1, required, string, 'id', undefined},
    {2, required, {struct, union, {dmsl_payment_processing_thrift, 'WalletEffect'}}, 'effect', undefined}
]};

struct_info('WalletEffect') ->
    {struct, union, [
    {1, optional, {struct, struct, {dmsl_domain_thrift, 'Wallet'}}, 'created', undefined},
    {2, optional, {struct, struct, {dmsl_domain_thrift, 'WalletAccount'}}, 'account_created', undefined}
]};

struct_info('ShopProxyChanged') ->
    {struct, struct, [
    {1, optional, {struct, struct, {dmsl_domain_thrift, 'Proxy'}}, 'proxy', undefined}
]};

struct_info('AccountState') ->
    {struct, struct, [
    {1, required, i64, 'account_id', undefined},
    {2, required, i64, 'own_amount', undefined},
    {3, required, i64, 'available_amount', undefined},
    {4, required, {struct, struct, {dmsl_domain_thrift, 'Currency'}}, 'currency', undefined}
]};

struct_info('PartyChange') ->
    {struct, union, [
    {1, optional, {struct, struct, {dmsl_payment_processing_thrift, 'PartyCreated'}}, 'party_created', undefined},
    {4, optional, {struct, union, {dmsl_domain_thrift, 'Blocking'}}, 'party_blocking', undefined},
    {5, optional, {struct, union, {dmsl_domain_thrift, 'Suspension'}}, 'party_suspension', undefined},
    {6, optional, {struct, struct, {dmsl_payment_processing_thrift, 'ShopBlocking'}}, 'shop_blocking', undefined},
    {7, optional, {struct, struct, {dmsl_payment_processing_thrift, 'ShopSuspension'}}, 'shop_suspension', undefined},
    {12, optional, {struct, struct, {dmsl_payment_processing_thrift, 'WalletBlocking'}}, 'wallet_blocking', undefined},
    {13, optional, {struct, struct, {dmsl_payment_processing_thrift, 'WalletSuspension'}}, 'wallet_suspension', undefined},
    {2, optional, {struct, struct, {dmsl_payment_processing_thrift, 'Claim'}}, 'claim_created', undefined},
    {3, optional, {struct, struct, {dmsl_payment_processing_thrift, 'ClaimStatusChanged'}}, 'claim_status_changed', undefined},
    {8, optional, {struct, struct, {dmsl_payment_processing_thrift, 'ClaimUpdated'}}, 'claim_updated', undefined},
    {9, optional, {struct, struct, {dmsl_payment_processing_thrift, 'PartyMetaSet'}}, 'party_meta_set', undefined},
    {10, optional, string, 'party_meta_removed', undefined},
    {11, optional, {struct, struct, {dmsl_payment_processing_thrift, 'PartyRevisionChanged'}}, 'revision_changed', undefined}
]};

struct_info('PartyCreated') ->
    {struct, struct, [
    {1, required, string, 'id', undefined},
    {7, required, {struct, struct, {dmsl_domain_thrift, 'PartyContactInfo'}}, 'contact_info', undefined},
    {8, required, string, 'created_at', undefined}
]};

struct_info('ShopBlocking') ->
    {struct, struct, [
    {1, required, string, 'shop_id', undefined},
    {2, required, {struct, union, {dmsl_domain_thrift, 'Blocking'}}, 'blocking', undefined}
]};

struct_info('ShopSuspension') ->
    {struct, struct, [
    {1, required, string, 'shop_id', undefined},
    {2, required, {struct, union, {dmsl_domain_thrift, 'Suspension'}}, 'suspension', undefined}
]};

struct_info('WalletBlocking') ->
    {struct, struct, [
    {1, required, string, 'wallet_id', undefined},
    {2, required, {struct, union, {dmsl_domain_thrift, 'Blocking'}}, 'blocking', undefined}
]};

struct_info('WalletSuspension') ->
    {struct, struct, [
    {1, required, string, 'wallet_id', undefined},
    {2, required, {struct, union, {dmsl_domain_thrift, 'Suspension'}}, 'suspension', undefined}
]};

struct_info('ClaimStatusChanged') ->
    {struct, struct, [
    {1, required, i64, 'id', undefined},
    {2, required, {struct, union, {dmsl_payment_processing_thrift, 'ClaimStatus'}}, 'status', undefined},
    {3, required, i32, 'revision', undefined},
    {4, required, string, 'changed_at', undefined}
]};

struct_info('ClaimUpdated') ->
    {struct, struct, [
    {1, required, i64, 'id', undefined},
    {2, required, {list, {struct, union, {dmsl_payment_processing_thrift, 'PartyModification'}}}, 'changeset', undefined},
    {3, required, i32, 'revision', undefined},
    {4, required, string, 'updated_at', undefined}
]};

struct_info('PartyMetaSet') ->
    {struct, struct, [
    {1, required, string, 'ns', undefined},
    {2, required, {struct, union, {dmsl_msgpack_thrift, 'Value'}}, 'data', undefined}
]};

struct_info('PartyRevisionChanged') ->
    {struct, struct, [
    {1, required, string, 'timestamp', undefined},
    {2, required, i64, 'revision', undefined}
]};

struct_info('PartyRevisionParam') ->
    {struct, union, [
    {1, optional, string, 'timestamp', undefined},
    {2, optional, i64, 'revision', undefined}
]};

struct_info('PayoutParams') ->
    {struct, struct, [
    {1, required, string, 'id', undefined},
    {2, required, {struct, struct, {dmsl_domain_thrift, 'Cash'}}, 'amount', undefined},
    {3, required, string, 'timestamp', undefined}
]};

struct_info('InvalidChangesetReason') ->
    {struct, union, [
    {1, optional, string, 'contract_not_exists', undefined},
    {2, optional, string, 'contract_already_exists', undefined},
    {3, optional, {struct, struct, {dmsl_payment_processing_thrift, 'ContractStatusInvalid'}}, 'contract_status_invalid', undefined},
    {4, optional, string, 'contract_adjustment_already_exists', undefined},
    {5, optional, string, 'payout_tool_not_exists', undefined},
    {6, optional, string, 'payout_tool_already_exists', undefined},
    {7, optional, string, 'shop_not_exists', undefined},
    {8, optional, string, 'shop_already_exists', undefined},
    {9, optional, {struct, struct, {dmsl_payment_processing_thrift, 'ShopStatusInvalid'}}, 'shop_status_invalid', undefined},
    {10, optional, {struct, struct, {dmsl_payment_processing_thrift, 'ContractTermsViolated'}}, 'contract_terms_violated', undefined}
]};

struct_info('ContractStatusInvalid') ->
    {struct, struct, [
    {1, required, string, 'contract_id', undefined},
    {2, required, {struct, union, {dmsl_domain_thrift, 'ContractStatus'}}, 'status', undefined}
]};

struct_info('ShopStatusInvalid') ->
    {struct, struct, [
    {1, required, string, 'shop_id', undefined},
    {2, required, {struct, union, {dmsl_payment_processing_thrift, 'InvalidStatus'}}, 'status', undefined}
]};

struct_info('ContractTermsViolated') ->
    {struct, struct, [
    {1, required, string, 'shop_id', undefined},
    {2, required, string, 'contract_id', undefined},
    {3, required, {struct, struct, {dmsl_domain_thrift, 'TermSet'}}, 'terms', undefined}
]};

struct_info('PartyNotFound') ->
    {struct, exception, []};

struct_info('PartyNotExistsYet') ->
    {struct, exception, []};

struct_info('InvalidPartyRevision') ->
    {struct, exception, []};

struct_info('ShopNotFound') ->
    {struct, exception, []};

struct_info('WalletNotFound') ->
    {struct, exception, []};

struct_info('InvalidPartyStatus') ->
    {struct, exception, [
    {1, required, {struct, union, {dmsl_payment_processing_thrift, 'InvalidStatus'}}, 'status', undefined}
]};

struct_info('InvalidShopStatus') ->
    {struct, exception, [
    {1, required, {struct, union, {dmsl_payment_processing_thrift, 'InvalidStatus'}}, 'status', undefined}
]};

struct_info('InvalidWalletStatus') ->
    {struct, exception, [
    {1, required, {struct, union, {dmsl_payment_processing_thrift, 'InvalidStatus'}}, 'status', undefined}
]};

struct_info('InvalidContractStatus') ->
    {struct, exception, [
    {1, required, {struct, union, {dmsl_domain_thrift, 'ContractStatus'}}, 'status', undefined}
]};

struct_info('InvalidUser') ->
    {struct, exception, []};

struct_info('InvoiceNotFound') ->
    {struct, exception, []};

struct_info('InvoicePaymentNotFound') ->
    {struct, exception, []};

struct_info('InvoicePaymentRefundNotFound') ->
    {struct, exception, []};

struct_info('InvoicePaymentAdjustmentNotFound') ->
    {struct, exception, []};

struct_info('EventNotFound') ->
    {struct, exception, []};

struct_info('OperationNotPermitted') ->
    {struct, exception, []};

struct_info('InsufficientAccountBalance') ->
    {struct, exception, []};

struct_info('InvoicePaymentPending') ->
    {struct, exception, [
    {1, required, string, 'id', undefined}
]};

struct_info('InvoicePaymentRefundPending') ->
    {struct, exception, [
    {1, required, string, 'id', undefined}
]};

struct_info('InvoicePaymentAdjustmentPending') ->
    {struct, exception, [
    {1, required, string, 'id', undefined}
]};

struct_info('InvalidInvoiceStatus') ->
    {struct, exception, [
    {1, required, {struct, union, {dmsl_domain_thrift, 'InvoiceStatus'}}, 'status', undefined}
]};

struct_info('InvalidPaymentStatus') ->
    {struct, exception, [
    {1, required, {struct, union, {dmsl_domain_thrift, 'InvoicePaymentStatus'}}, 'status', undefined}
]};

struct_info('InvalidPaymentAdjustmentStatus') ->
    {struct, exception, [
    {1, required, {struct, union, {dmsl_domain_thrift, 'InvoicePaymentAdjustmentStatus'}}, 'status', undefined}
]};

struct_info('InvoiceTemplateNotFound') ->
    {struct, exception, []};

struct_info('InvoiceTemplateRemoved') ->
    {struct, exception, []};

struct_info('InvoicePaymentAmountExceeded') ->
    {struct, exception, [
    {1, required, {struct, struct, {dmsl_domain_thrift, 'Cash'}}, 'maximum', undefined}
]};

struct_info('InconsistentRefundCurrency') ->
    {struct, exception, [
    {1, required, string, 'currency', undefined}
]};

struct_info('InvalidCustomerStatus') ->
    {struct, exception, [
    {1, required, {struct, union, {dmsl_payment_processing_thrift, 'CustomerStatus'}}, 'status', undefined}
]};

struct_info('CustomerNotFound') ->
    {struct, exception, []};

struct_info('InvalidPaymentTool') ->
    {struct, exception, []};

struct_info('InvalidBinding') ->
    {struct, exception, []};

struct_info('BindingNotFound') ->
    {struct, exception, []};

struct_info('RecurrentPaymentToolNotFound') ->
    {struct, exception, []};

struct_info('InvalidPaymentMethod') ->
    {struct, exception, []};

struct_info('InvalidRecurrentPaymentToolStatus') ->
    {struct, exception, [
    {1, required, {struct, union, {dmsl_payment_processing_thrift, 'RecurrentPaymentToolStatus'}}, 'status', undefined}
]};

struct_info('NoLastEvent') ->
    {struct, exception, []};

struct_info('PartyExists') ->
    {struct, exception, []};

struct_info('ContractNotFound') ->
    {struct, exception, []};

struct_info('ClaimNotFound') ->
    {struct, exception, []};

struct_info('InvalidClaimRevision') ->
    {struct, exception, []};

struct_info('InvalidClaimStatus') ->
    {struct, exception, [
    {1, required, {struct, union, {dmsl_payment_processing_thrift, 'ClaimStatus'}}, 'status', undefined}
]};

struct_info('ChangesetConflict') ->
    {struct, exception, [
    {1, required, i64, 'conflicted_id', undefined}
]};

struct_info('InvalidChangeset') ->
    {struct, exception, [
    {1, required, {struct, union, {dmsl_payment_processing_thrift, 'InvalidChangesetReason'}}, 'reason', undefined}
]};

struct_info('AccountNotFound') ->
    {struct, exception, []};

struct_info('ShopAccountNotFound') ->
    {struct, exception, []};

struct_info('PartyMetaNamespaceNotFound') ->
    {struct, exception, []};

struct_info('PaymentInstitutionNotFound') ->
    {struct, exception, []};

struct_info('ContractTemplateNotFound') ->
    {struct, exception, []};

struct_info(_) -> erlang:error(badarg).

-spec record_name(struct_name() | exception_name()) -> atom() | no_return().

record_name('UserInfo') ->
    'payproc_UserInfo';

record_name('InternalUser') ->
    'payproc_InternalUser';

    record_name('ExternalUser') ->
    'payproc_ExternalUser';

    record_name('ServiceUser') ->
    'payproc_ServiceUser';

    record_name('Event') ->
    'payproc_Event';

    record_name('InvoiceCreated') ->
    'payproc_InvoiceCreated';

    record_name('InvoiceStatusChanged') ->
    'payproc_InvoiceStatusChanged';

    record_name('InvoicePaymentChange') ->
    'payproc_InvoicePaymentChange';

    record_name('InvoicePaymentStarted') ->
    'payproc_InvoicePaymentStarted';

    record_name('InvoicePaymentStatusChanged') ->
    'payproc_InvoicePaymentStatusChanged';

    record_name('InvoicePaymentSessionChange') ->
    'payproc_InvoicePaymentSessionChange';

    record_name('SessionStarted') ->
    'payproc_SessionStarted';

    record_name('SessionFinished') ->
    'payproc_SessionFinished';

    record_name('SessionSuspended') ->
    'payproc_SessionSuspended';

    record_name('SessionActivated') ->
    'payproc_SessionActivated';

    record_name('SessionSucceeded') ->
    'payproc_SessionSucceeded';

    record_name('SessionFailed') ->
    'payproc_SessionFailed';

    record_name('InvoiceTemplateCreated') ->
    'payproc_InvoiceTemplateCreated';

    record_name('InvoiceTemplateUpdated') ->
    'payproc_InvoiceTemplateUpdated';

    record_name('InvoiceTemplateDeleted') ->
    'payproc_InvoiceTemplateDeleted';

    record_name('SessionTransactionBound') ->
    'payproc_SessionTransactionBound';

    record_name('SessionProxyStateChanged') ->
    'payproc_SessionProxyStateChanged';

    record_name('SessionInteractionRequested') ->
    'payproc_SessionInteractionRequested';

    record_name('InvoicePaymentRefundChange') ->
    'payproc_InvoicePaymentRefundChange';

    record_name('InvoicePaymentRefundCreated') ->
    'payproc_InvoicePaymentRefundCreated';

    record_name('InvoicePaymentRefundStatusChanged') ->
    'payproc_InvoicePaymentRefundStatusChanged';

    record_name('InvoicePaymentAdjustmentChange') ->
    'payproc_InvoicePaymentAdjustmentChange';

    record_name('InvoicePaymentAdjustmentCreated') ->
    'payproc_InvoicePaymentAdjustmentCreated';

    record_name('InvoicePaymentAdjustmentStatusChanged') ->
    'payproc_InvoicePaymentAdjustmentStatusChanged';

    record_name('EventRange') ->
    'payproc_EventRange';

    record_name('InvoiceParams') ->
    'payproc_InvoiceParams';

    record_name('InvoiceWithTemplateParams') ->
    'payproc_InvoiceWithTemplateParams';

    record_name('InvoiceTemplateCreateParams') ->
    'payproc_InvoiceTemplateCreateParams';

    record_name('InvoiceTemplateUpdateParams') ->
    'payproc_InvoiceTemplateUpdateParams';

    record_name('InvoicePaymentParams') ->
    'payproc_InvoicePaymentParams';

    record_name('PaymentResourcePayerParams') ->
    'payproc_PaymentResourcePayerParams';

    record_name('CustomerPayerParams') ->
    'payproc_CustomerPayerParams';

    record_name('InvoicePaymentParamsFlowInstant') ->
    'payproc_InvoicePaymentParamsFlowInstant';

    record_name('InvoicePaymentParamsFlowHold') ->
    'payproc_InvoicePaymentParamsFlowHold';

    record_name('Invoice') ->
    'payproc_Invoice';

    record_name('InvoicePayment') ->
    'payproc_InvoicePayment';

    record_name('InvoicePaymentRefundParams') ->
    'payproc_InvoicePaymentRefundParams';

    record_name('InvoicePaymentAdjustmentParams') ->
    'payproc_InvoicePaymentAdjustmentParams';

    record_name('CustomerParams') ->
    'payproc_CustomerParams';

    record_name('Customer') ->
    'payproc_Customer';

    record_name('CustomerUnready') ->
    'payproc_CustomerUnready';

    record_name('CustomerReady') ->
    'payproc_CustomerReady';

    record_name('CustomerCreated') ->
    'payproc_CustomerCreated';

    record_name('CustomerDeleted') ->
    'payproc_CustomerDeleted';

    record_name('CustomerStatusChanged') ->
    'payproc_CustomerStatusChanged';

    record_name('CustomerBindingChanged') ->
    'payproc_CustomerBindingChanged';

    record_name('CustomerBindingParams') ->
    'payproc_CustomerBindingParams';

    record_name('CustomerBinding') ->
    'payproc_CustomerBinding';

    record_name('CustomerBindingPending') ->
    'payproc_CustomerBindingPending';

    record_name('CustomerBindingSucceeded') ->
    'payproc_CustomerBindingSucceeded';

    record_name('CustomerBindingFailed') ->
    'payproc_CustomerBindingFailed';

    record_name('CustomerBindingStarted') ->
    'payproc_CustomerBindingStarted';

    record_name('CustomerBindingStatusChanged') ->
    'payproc_CustomerBindingStatusChanged';

    record_name('CustomerBindingInteractionRequested') ->
    'payproc_CustomerBindingInteractionRequested';

    record_name('RecurrentPaymentTool') ->
    'payproc_RecurrentPaymentTool';

    record_name('RecurrentPaymentToolParams') ->
    'payproc_RecurrentPaymentToolParams';

    record_name('RecurrentPaymentToolCreated') ->
    'payproc_RecurrentPaymentToolCreated';

    record_name('RecurrentPaymentToolAcquired') ->
    'payproc_RecurrentPaymentToolAcquired';

    record_name('RecurrentPaymentToolAbandoned') ->
    'payproc_RecurrentPaymentToolAbandoned';

    record_name('RecurrentPaymentToolFailed') ->
    'payproc_RecurrentPaymentToolFailed';

    record_name('RecurrentPaymentToolEvent') ->
    'payproc_RecurrentPaymentToolEvent';

    record_name('RecurrentPaymentToolSessionChange') ->
    'payproc_RecurrentPaymentToolSessionChange';

    record_name('RecurrentPaymentToolHasCreated') ->
    'payproc_RecurrentPaymentToolHasCreated';

    record_name('RecurrentPaymentToolHasAcquired') ->
    'payproc_RecurrentPaymentToolHasAcquired';

    record_name('RecurrentPaymentToolHasAbandoned') ->
    'payproc_RecurrentPaymentToolHasAbandoned';

    record_name('RecurrentPaymentToolHasFailed') ->
    'payproc_RecurrentPaymentToolHasFailed';

    record_name('Varset') ->
    'payproc_Varset';

    record_name('PartyParams') ->
    'payproc_PartyParams';

    record_name('PayoutToolParams') ->
    'payproc_PayoutToolParams';

    record_name('ShopParams') ->
    'payproc_ShopParams';

    record_name('ShopAccountParams') ->
    'payproc_ShopAccountParams';

    record_name('ContractParams') ->
    'payproc_ContractParams';

    record_name('ContractAdjustmentParams') ->
    'payproc_ContractAdjustmentParams';

    record_name('ContractorModificationUnit') ->
    'payproc_ContractorModificationUnit';

    record_name('ContractorIdentityDocumentsModification') ->
    'payproc_ContractorIdentityDocumentsModification';

    record_name('ContractModificationUnit') ->
    'payproc_ContractModificationUnit';

    record_name('ContractTermination') ->
    'payproc_ContractTermination';

    record_name('ContractAdjustmentModificationUnit') ->
    'payproc_ContractAdjustmentModificationUnit';

    record_name('PayoutToolModificationUnit') ->
    'payproc_PayoutToolModificationUnit';

    record_name('ShopModificationUnit') ->
    'payproc_ShopModificationUnit';

    record_name('ShopContractModification') ->
    'payproc_ShopContractModification';

    record_name('ScheduleModification') ->
    'payproc_ScheduleModification';

    record_name('ProxyModification') ->
    'payproc_ProxyModification';

    record_name('WalletModificationUnit') ->
    'payproc_WalletModificationUnit';

    record_name('WalletParams') ->
    'payproc_WalletParams';

    record_name('WalletAccountParams') ->
    'payproc_WalletAccountParams';

    record_name('Claim') ->
    'payproc_Claim';

    record_name('ClaimPending') ->
    'payproc_ClaimPending';

    record_name('ClaimAccepted') ->
    'payproc_ClaimAccepted';

    record_name('ClaimDenied') ->
    'payproc_ClaimDenied';

    record_name('ClaimRevoked') ->
    'payproc_ClaimRevoked';

    record_name('ContractEffectUnit') ->
    'payproc_ContractEffectUnit';

    record_name('ShopEffectUnit') ->
    'payproc_ShopEffectUnit';

    record_name('ShopContractChanged') ->
    'payproc_ShopContractChanged';

    record_name('ScheduleChanged') ->
    'payproc_ScheduleChanged';

    record_name('ContractorEffectUnit') ->
    'payproc_ContractorEffectUnit';

    record_name('ContractorIdentityDocumentsChanged') ->
    'payproc_ContractorIdentityDocumentsChanged';

    record_name('WalletEffectUnit') ->
    'payproc_WalletEffectUnit';

    record_name('ShopProxyChanged') ->
    'payproc_ShopProxyChanged';

    record_name('AccountState') ->
    'payproc_AccountState';

    record_name('PartyCreated') ->
    'payproc_PartyCreated';

    record_name('ShopBlocking') ->
    'payproc_ShopBlocking';

    record_name('ShopSuspension') ->
    'payproc_ShopSuspension';

    record_name('WalletBlocking') ->
    'payproc_WalletBlocking';

    record_name('WalletSuspension') ->
    'payproc_WalletSuspension';

    record_name('ClaimStatusChanged') ->
    'payproc_ClaimStatusChanged';

    record_name('ClaimUpdated') ->
    'payproc_ClaimUpdated';

    record_name('PartyMetaSet') ->
    'payproc_PartyMetaSet';

    record_name('PartyRevisionChanged') ->
    'payproc_PartyRevisionChanged';

    record_name('PayoutParams') ->
    'payproc_PayoutParams';

    record_name('ContractStatusInvalid') ->
    'payproc_ContractStatusInvalid';

    record_name('ShopStatusInvalid') ->
    'payproc_ShopStatusInvalid';

    record_name('ContractTermsViolated') ->
    'payproc_ContractTermsViolated';

    record_name('PartyNotFound') ->
    'payproc_PartyNotFound';

    record_name('PartyNotExistsYet') ->
    'payproc_PartyNotExistsYet';

    record_name('InvalidPartyRevision') ->
    'payproc_InvalidPartyRevision';

    record_name('ShopNotFound') ->
    'payproc_ShopNotFound';

    record_name('WalletNotFound') ->
    'payproc_WalletNotFound';

    record_name('InvalidPartyStatus') ->
    'payproc_InvalidPartyStatus';

    record_name('InvalidShopStatus') ->
    'payproc_InvalidShopStatus';

    record_name('InvalidWalletStatus') ->
    'payproc_InvalidWalletStatus';

    record_name('InvalidContractStatus') ->
    'payproc_InvalidContractStatus';

    record_name('InvalidUser') ->
    'payproc_InvalidUser';

    record_name('InvoiceNotFound') ->
    'payproc_InvoiceNotFound';

    record_name('InvoicePaymentNotFound') ->
    'payproc_InvoicePaymentNotFound';

    record_name('InvoicePaymentRefundNotFound') ->
    'payproc_InvoicePaymentRefundNotFound';

    record_name('InvoicePaymentAdjustmentNotFound') ->
    'payproc_InvoicePaymentAdjustmentNotFound';

    record_name('EventNotFound') ->
    'payproc_EventNotFound';

    record_name('OperationNotPermitted') ->
    'payproc_OperationNotPermitted';

    record_name('InsufficientAccountBalance') ->
    'payproc_InsufficientAccountBalance';

    record_name('InvoicePaymentPending') ->
    'payproc_InvoicePaymentPending';

    record_name('InvoicePaymentRefundPending') ->
    'payproc_InvoicePaymentRefundPending';

    record_name('InvoicePaymentAdjustmentPending') ->
    'payproc_InvoicePaymentAdjustmentPending';

    record_name('InvalidInvoiceStatus') ->
    'payproc_InvalidInvoiceStatus';

    record_name('InvalidPaymentStatus') ->
    'payproc_InvalidPaymentStatus';

    record_name('InvalidPaymentAdjustmentStatus') ->
    'payproc_InvalidPaymentAdjustmentStatus';

    record_name('InvoiceTemplateNotFound') ->
    'payproc_InvoiceTemplateNotFound';

    record_name('InvoiceTemplateRemoved') ->
    'payproc_InvoiceTemplateRemoved';

    record_name('InvoicePaymentAmountExceeded') ->
    'payproc_InvoicePaymentAmountExceeded';

    record_name('InconsistentRefundCurrency') ->
    'payproc_InconsistentRefundCurrency';

    record_name('InvalidCustomerStatus') ->
    'payproc_InvalidCustomerStatus';

    record_name('CustomerNotFound') ->
    'payproc_CustomerNotFound';

    record_name('InvalidPaymentTool') ->
    'payproc_InvalidPaymentTool';

    record_name('InvalidBinding') ->
    'payproc_InvalidBinding';

    record_name('BindingNotFound') ->
    'payproc_BindingNotFound';

    record_name('RecurrentPaymentToolNotFound') ->
    'payproc_RecurrentPaymentToolNotFound';

    record_name('InvalidPaymentMethod') ->
    'payproc_InvalidPaymentMethod';

    record_name('InvalidRecurrentPaymentToolStatus') ->
    'payproc_InvalidRecurrentPaymentToolStatus';

    record_name('NoLastEvent') ->
    'payproc_NoLastEvent';

    record_name('PartyExists') ->
    'payproc_PartyExists';

    record_name('ContractNotFound') ->
    'payproc_ContractNotFound';

    record_name('ClaimNotFound') ->
    'payproc_ClaimNotFound';

    record_name('InvalidClaimRevision') ->
    'payproc_InvalidClaimRevision';

    record_name('InvalidClaimStatus') ->
    'payproc_InvalidClaimStatus';

    record_name('ChangesetConflict') ->
    'payproc_ChangesetConflict';

    record_name('InvalidChangeset') ->
    'payproc_InvalidChangeset';

    record_name('AccountNotFound') ->
    'payproc_AccountNotFound';

    record_name('ShopAccountNotFound') ->
    'payproc_ShopAccountNotFound';

    record_name('PartyMetaNamespaceNotFound') ->
    'payproc_PartyMetaNamespaceNotFound';

    record_name('PaymentInstitutionNotFound') ->
    'payproc_PaymentInstitutionNotFound';

    record_name('ContractTemplateNotFound') ->
    'payproc_ContractTemplateNotFound';

    record_name(_) -> error(badarg).
    
    -spec functions(service_name()) -> [function_name()] | no_return().

functions('Invoicing') ->
    [
        'Create',
        'CreateWithTemplate',
        'Get',
        'GetEvents',
        'ComputeTerms',
        'StartPayment',
        'GetPayment',
        'CancelPayment',
        'CapturePayment',
        'CreatePaymentAdjustment',
        'GetPaymentAdjustment',
        'CapturePaymentAdjustment',
        'CancelPaymentAdjustment',
        'RefundPayment',
        'GetPaymentRefund',
        'Fulfill',
        'Rescind',
        'Repair'
    ];

functions('InvoiceTemplating') ->
    [
        'Create',
        'Get',
        'Update',
        'Delete',
        'ComputeTerms'
    ];

functions('CustomerManagement') ->
    [
        'Create',
        'Get',
        'Delete',
        'StartBinding',
        'GetActiveBinding',
        'GetEvents'
    ];

functions('RecurrentPaymentTools') ->
    [
        'Create',
        'Abandon',
        'Get',
        'GetEvents'
    ];

functions('RecurrentPaymentToolEventSink') ->
    [
        'GetEvents',
        'GetLastEventID'
    ];

functions('PartyManagement') ->
    [
        'Create',
        'Get',
        'Checkout',
        'Suspend',
        'Activate',
        'Block',
        'Unblock',
        'GetMeta',
        'GetMetaData',
        'SetMetaData',
        'RemoveMetaData',
        'GetContract',
        'ComputeContractTerms',
        'GetShop',
        'SuspendShop',
        'ActivateShop',
        'BlockShop',
        'UnblockShop',
        'ComputeShopTerms',
        'GetWallet',
        'SuspendWallet',
        'ActivateWallet',
        'BlockWallet',
        'UnblockWallet',
        'CreateClaim',
        'GetClaim',
        'GetClaims',
        'AcceptClaim',
        'UpdateClaim',
        'DenyClaim',
        'RevokeClaim',
        'GetEvents',
        'GetShopAccount',
        'GetAccountState',
        'ComputePaymentInstitutionTerms',
        'ComputePayoutCashFlow'
    ];

functions('EventSink') ->
    [
        'GetEvents',
        'GetLastEventID'
    ];

functions(_) -> error(badarg).

-spec function_info(service_name(), function_name(), params_type | reply_type | exceptions) ->
    struct_info() | no_return().

function_info('Invoicing', 'Create', params_type) ->
    {struct, struct, [
    {1, undefined, {struct, struct, {dmsl_payment_processing_thrift, 'UserInfo'}}, 'user', undefined},
    {2, undefined, {struct, struct, {dmsl_payment_processing_thrift, 'InvoiceParams'}}, 'params', undefined}
]};
function_info('Invoicing', 'Create', reply_type) ->
        {struct, struct, {dmsl_payment_processing_thrift, 'Invoice'}};
    function_info('Invoicing', 'Create', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidUser'}}, 'ex1', undefined},
        {2, undefined, {struct, exception, {dmsl_base_thrift, 'InvalidRequest'}}, 'ex2', undefined},
        {3, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'PartyNotFound'}}, 'ex3', undefined},
        {4, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'ShopNotFound'}}, 'ex4', undefined},
        {5, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidPartyStatus'}}, 'ex5', undefined},
        {6, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidShopStatus'}}, 'ex6', undefined},
        {7, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidContractStatus'}}, 'ex7', undefined}
    ]};
function_info('Invoicing', 'CreateWithTemplate', params_type) ->
    {struct, struct, [
    {1, undefined, {struct, struct, {dmsl_payment_processing_thrift, 'UserInfo'}}, 'user', undefined},
    {2, undefined, {struct, struct, {dmsl_payment_processing_thrift, 'InvoiceWithTemplateParams'}}, 'params', undefined}
]};
function_info('Invoicing', 'CreateWithTemplate', reply_type) ->
        {struct, struct, {dmsl_payment_processing_thrift, 'Invoice'}};
    function_info('Invoicing', 'CreateWithTemplate', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidUser'}}, 'ex1', undefined},
        {2, undefined, {struct, exception, {dmsl_base_thrift, 'InvalidRequest'}}, 'ex2', undefined},
        {3, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidPartyStatus'}}, 'ex3', undefined},
        {4, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidShopStatus'}}, 'ex4', undefined},
        {5, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidContractStatus'}}, 'ex5', undefined},
        {6, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvoiceTemplateNotFound'}}, 'ex6', undefined},
        {7, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvoiceTemplateRemoved'}}, 'ex7', undefined}
    ]};
function_info('Invoicing', 'Get', params_type) ->
    {struct, struct, [
    {1, undefined, {struct, struct, {dmsl_payment_processing_thrift, 'UserInfo'}}, 'user', undefined},
    {2, undefined, string, 'id', undefined}
]};
function_info('Invoicing', 'Get', reply_type) ->
        {struct, struct, {dmsl_payment_processing_thrift, 'Invoice'}};
    function_info('Invoicing', 'Get', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidUser'}}, 'ex1', undefined},
        {2, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvoiceNotFound'}}, 'ex2', undefined}
    ]};
function_info('Invoicing', 'GetEvents', params_type) ->
    {struct, struct, [
    {1, undefined, {struct, struct, {dmsl_payment_processing_thrift, 'UserInfo'}}, 'user', undefined},
    {2, undefined, string, 'id', undefined},
    {3, undefined, {struct, struct, {dmsl_payment_processing_thrift, 'EventRange'}}, 'range', undefined}
]};
function_info('Invoicing', 'GetEvents', reply_type) ->
        {list, {struct, struct, {dmsl_payment_processing_thrift, 'Event'}}};
    function_info('Invoicing', 'GetEvents', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidUser'}}, 'ex1', undefined},
        {2, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvoiceNotFound'}}, 'ex2', undefined},
        {3, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'EventNotFound'}}, 'ex3', undefined},
        {4, undefined, {struct, exception, {dmsl_base_thrift, 'InvalidRequest'}}, 'ex4', undefined}
    ]};
function_info('Invoicing', 'ComputeTerms', params_type) ->
    {struct, struct, [
    {1, undefined, {struct, struct, {dmsl_payment_processing_thrift, 'UserInfo'}}, 'user', undefined},
    {2, undefined, string, 'id', undefined}
]};
function_info('Invoicing', 'ComputeTerms', reply_type) ->
        {struct, struct, {dmsl_domain_thrift, 'TermSet'}};
    function_info('Invoicing', 'ComputeTerms', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidUser'}}, 'ex1', undefined},
        {2, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvoiceNotFound'}}, 'ex2', undefined}
    ]};
function_info('Invoicing', 'StartPayment', params_type) ->
    {struct, struct, [
    {1, undefined, {struct, struct, {dmsl_payment_processing_thrift, 'UserInfo'}}, 'user', undefined},
    {2, undefined, string, 'id', undefined},
    {3, undefined, {struct, struct, {dmsl_payment_processing_thrift, 'InvoicePaymentParams'}}, 'params', undefined}
]};
function_info('Invoicing', 'StartPayment', reply_type) ->
        {struct, struct, {dmsl_payment_processing_thrift, 'InvoicePayment'}};
    function_info('Invoicing', 'StartPayment', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidUser'}}, 'ex1', undefined},
        {2, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvoiceNotFound'}}, 'ex2', undefined},
        {3, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidInvoiceStatus'}}, 'ex3', undefined},
        {4, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvoicePaymentPending'}}, 'ex4', undefined},
        {5, undefined, {struct, exception, {dmsl_base_thrift, 'InvalidRequest'}}, 'ex5', undefined},
        {6, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidPartyStatus'}}, 'ex6', undefined},
        {7, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidShopStatus'}}, 'ex7', undefined},
        {8, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidContractStatus'}}, 'ex8', undefined}
    ]};
function_info('Invoicing', 'GetPayment', params_type) ->
    {struct, struct, [
    {1, undefined, {struct, struct, {dmsl_payment_processing_thrift, 'UserInfo'}}, 'user', undefined},
    {2, undefined, string, 'id', undefined},
    {3, undefined, string, 'payment_id', undefined}
]};
function_info('Invoicing', 'GetPayment', reply_type) ->
        {struct, struct, {dmsl_payment_processing_thrift, 'InvoicePayment'}};
    function_info('Invoicing', 'GetPayment', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidUser'}}, 'ex1', undefined},
        {2, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvoiceNotFound'}}, 'ex2', undefined},
        {3, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvoicePaymentNotFound'}}, 'ex3', undefined}
    ]};
function_info('Invoicing', 'CancelPayment', params_type) ->
    {struct, struct, [
    {1, undefined, {struct, struct, {dmsl_payment_processing_thrift, 'UserInfo'}}, 'user', undefined},
    {2, undefined, string, 'id', undefined},
    {3, undefined, string, 'payment_id', undefined},
    {4, undefined, string, 'reason', undefined}
]};
function_info('Invoicing', 'CancelPayment', reply_type) ->
        {struct, struct, []};
    function_info('Invoicing', 'CancelPayment', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidUser'}}, 'ex1', undefined},
        {2, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvoiceNotFound'}}, 'ex2', undefined},
        {3, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvoicePaymentNotFound'}}, 'ex3', undefined},
        {4, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidPaymentStatus'}}, 'ex4', undefined},
        {5, undefined, {struct, exception, {dmsl_base_thrift, 'InvalidRequest'}}, 'ex5', undefined},
        {6, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'OperationNotPermitted'}}, 'ex6', undefined},
        {7, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidPartyStatus'}}, 'ex7', undefined},
        {8, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidShopStatus'}}, 'ex8', undefined}
    ]};
function_info('Invoicing', 'CapturePayment', params_type) ->
    {struct, struct, [
    {1, undefined, {struct, struct, {dmsl_payment_processing_thrift, 'UserInfo'}}, 'user', undefined},
    {2, undefined, string, 'id', undefined},
    {3, undefined, string, 'payment_id', undefined},
    {4, undefined, string, 'reason', undefined}
]};
function_info('Invoicing', 'CapturePayment', reply_type) ->
        {struct, struct, []};
    function_info('Invoicing', 'CapturePayment', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidUser'}}, 'ex1', undefined},
        {2, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvoiceNotFound'}}, 'ex2', undefined},
        {3, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvoicePaymentNotFound'}}, 'ex3', undefined},
        {4, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidPaymentStatus'}}, 'ex4', undefined},
        {5, undefined, {struct, exception, {dmsl_base_thrift, 'InvalidRequest'}}, 'ex5', undefined},
        {6, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'OperationNotPermitted'}}, 'ex6', undefined},
        {7, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidPartyStatus'}}, 'ex7', undefined},
        {8, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidShopStatus'}}, 'ex8', undefined}
    ]};
function_info('Invoicing', 'CreatePaymentAdjustment', params_type) ->
    {struct, struct, [
    {1, undefined, {struct, struct, {dmsl_payment_processing_thrift, 'UserInfo'}}, 'user', undefined},
    {2, undefined, string, 'id', undefined},
    {3, undefined, string, 'payment_id', undefined},
    {4, undefined, {struct, struct, {dmsl_payment_processing_thrift, 'InvoicePaymentAdjustmentParams'}}, 'params', undefined}
]};
function_info('Invoicing', 'CreatePaymentAdjustment', reply_type) ->
        {struct, struct, {dmsl_domain_thrift, 'InvoicePaymentAdjustment'}};
    function_info('Invoicing', 'CreatePaymentAdjustment', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidUser'}}, 'ex1', undefined},
        {2, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvoiceNotFound'}}, 'ex2', undefined},
        {3, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvoicePaymentNotFound'}}, 'ex3', undefined},
        {4, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidPaymentStatus'}}, 'ex4', undefined},
        {5, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvoicePaymentAdjustmentPending'}}, 'ex5', undefined}
    ]};
function_info('Invoicing', 'GetPaymentAdjustment', params_type) ->
    {struct, struct, [
    {1, undefined, {struct, struct, {dmsl_payment_processing_thrift, 'UserInfo'}}, 'user', undefined},
    {2, undefined, string, 'id', undefined},
    {3, undefined, string, 'payment_id', undefined},
    {4, undefined, string, 'adjustment_id', undefined}
]};
function_info('Invoicing', 'GetPaymentAdjustment', reply_type) ->
        {struct, struct, {dmsl_domain_thrift, 'InvoicePaymentAdjustment'}};
    function_info('Invoicing', 'GetPaymentAdjustment', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidUser'}}, 'ex1', undefined},
        {2, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvoiceNotFound'}}, 'ex2', undefined},
        {3, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvoicePaymentNotFound'}}, 'ex3', undefined},
        {4, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvoicePaymentAdjustmentNotFound'}}, 'ex4', undefined}
    ]};
function_info('Invoicing', 'CapturePaymentAdjustment', params_type) ->
    {struct, struct, [
    {1, undefined, {struct, struct, {dmsl_payment_processing_thrift, 'UserInfo'}}, 'user', undefined},
    {2, undefined, string, 'id', undefined},
    {3, undefined, string, 'payment_id', undefined},
    {4, undefined, string, 'adjustment_id', undefined}
]};
function_info('Invoicing', 'CapturePaymentAdjustment', reply_type) ->
        {struct, struct, []};
    function_info('Invoicing', 'CapturePaymentAdjustment', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidUser'}}, 'ex1', undefined},
        {2, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvoiceNotFound'}}, 'ex2', undefined},
        {3, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvoicePaymentNotFound'}}, 'ex3', undefined},
        {4, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvoicePaymentAdjustmentNotFound'}}, 'ex4', undefined},
        {5, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidPaymentAdjustmentStatus'}}, 'ex5', undefined}
    ]};
function_info('Invoicing', 'CancelPaymentAdjustment', params_type) ->
    {struct, struct, [
    {1, undefined, {struct, struct, {dmsl_payment_processing_thrift, 'UserInfo'}}, 'user', undefined},
    {2, undefined, string, 'id', undefined},
    {3, undefined, string, 'payment_id', undefined},
    {4, undefined, string, 'adjustment_id', undefined}
]};
function_info('Invoicing', 'CancelPaymentAdjustment', reply_type) ->
        {struct, struct, []};
    function_info('Invoicing', 'CancelPaymentAdjustment', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidUser'}}, 'ex1', undefined},
        {2, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvoiceNotFound'}}, 'ex2', undefined},
        {3, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvoicePaymentNotFound'}}, 'ex3', undefined},
        {4, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvoicePaymentAdjustmentNotFound'}}, 'ex4', undefined},
        {5, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidPaymentAdjustmentStatus'}}, 'ex5', undefined}
    ]};
function_info('Invoicing', 'RefundPayment', params_type) ->
    {struct, struct, [
    {1, undefined, {struct, struct, {dmsl_payment_processing_thrift, 'UserInfo'}}, 'user', undefined},
    {2, undefined, string, 'id', undefined},
    {3, undefined, string, 'payment_id', undefined},
    {4, undefined, {struct, struct, {dmsl_payment_processing_thrift, 'InvoicePaymentRefundParams'}}, 'params', undefined}
]};
function_info('Invoicing', 'RefundPayment', reply_type) ->
        {struct, struct, {dmsl_domain_thrift, 'InvoicePaymentRefund'}};
    function_info('Invoicing', 'RefundPayment', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidUser'}}, 'ex1', undefined},
        {2, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvoiceNotFound'}}, 'ex2', undefined},
        {3, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvoicePaymentNotFound'}}, 'ex3', undefined},
        {4, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidPaymentStatus'}}, 'ex4', undefined},
        {6, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'OperationNotPermitted'}}, 'ex6', undefined},
        {7, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InsufficientAccountBalance'}}, 'ex7', undefined},
        {8, undefined, {struct, exception, {dmsl_base_thrift, 'InvalidRequest'}}, 'ex8', undefined},
        {9, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvoicePaymentAmountExceeded'}}, 'ex9', undefined},
        {10, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InconsistentRefundCurrency'}}, 'ex10', undefined}
    ]};
function_info('Invoicing', 'GetPaymentRefund', params_type) ->
    {struct, struct, [
    {1, undefined, {struct, struct, {dmsl_payment_processing_thrift, 'UserInfo'}}, 'user', undefined},
    {2, undefined, string, 'id', undefined},
    {3, undefined, string, 'payment_id', undefined},
    {4, undefined, string, 'refund_id', undefined}
]};
function_info('Invoicing', 'GetPaymentRefund', reply_type) ->
        {struct, struct, {dmsl_domain_thrift, 'InvoicePaymentRefund'}};
    function_info('Invoicing', 'GetPaymentRefund', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidUser'}}, 'ex1', undefined},
        {2, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvoiceNotFound'}}, 'ex2', undefined},
        {3, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvoicePaymentNotFound'}}, 'ex3', undefined},
        {4, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvoicePaymentRefundNotFound'}}, 'ex4', undefined}
    ]};
function_info('Invoicing', 'Fulfill', params_type) ->
    {struct, struct, [
    {1, undefined, {struct, struct, {dmsl_payment_processing_thrift, 'UserInfo'}}, 'user', undefined},
    {2, undefined, string, 'id', undefined},
    {3, undefined, string, 'reason', undefined}
]};
function_info('Invoicing', 'Fulfill', reply_type) ->
        {struct, struct, []};
    function_info('Invoicing', 'Fulfill', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidUser'}}, 'ex1', undefined},
        {2, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvoiceNotFound'}}, 'ex2', undefined},
        {3, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidInvoiceStatus'}}, 'ex3', undefined},
        {4, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidPartyStatus'}}, 'ex4', undefined},
        {5, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidShopStatus'}}, 'ex5', undefined},
        {6, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidContractStatus'}}, 'ex6', undefined}
    ]};
function_info('Invoicing', 'Rescind', params_type) ->
    {struct, struct, [
    {1, undefined, {struct, struct, {dmsl_payment_processing_thrift, 'UserInfo'}}, 'user', undefined},
    {2, undefined, string, 'id', undefined},
    {3, undefined, string, 'reason', undefined}
]};
function_info('Invoicing', 'Rescind', reply_type) ->
        {struct, struct, []};
    function_info('Invoicing', 'Rescind', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidUser'}}, 'ex1', undefined},
        {2, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvoiceNotFound'}}, 'ex2', undefined},
        {3, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidInvoiceStatus'}}, 'ex3', undefined},
        {4, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvoicePaymentPending'}}, 'ex4', undefined},
        {5, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidPartyStatus'}}, 'ex5', undefined},
        {6, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidShopStatus'}}, 'ex6', undefined},
        {7, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidContractStatus'}}, 'ex7', undefined}
    ]};
function_info('Invoicing', 'Repair', params_type) ->
    {struct, struct, [
    {1, undefined, {struct, struct, {dmsl_payment_processing_thrift, 'UserInfo'}}, 'user', undefined},
    {2, undefined, string, 'id', undefined},
    {3, undefined, {list, {struct, union, {dmsl_payment_processing_thrift, 'InvoiceChange'}}}, 'changes', undefined}
]};
function_info('Invoicing', 'Repair', reply_type) ->
        {struct, struct, []};
    function_info('Invoicing', 'Repair', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidUser'}}, 'ex1', undefined},
        {2, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvoiceNotFound'}}, 'ex2', undefined},
        {3, undefined, {struct, exception, {dmsl_base_thrift, 'InvalidRequest'}}, 'ex3', undefined}
    ]};

function_info('InvoiceTemplating', 'Create', params_type) ->
    {struct, struct, [
    {1, undefined, {struct, struct, {dmsl_payment_processing_thrift, 'UserInfo'}}, 'user', undefined},
    {2, undefined, {struct, struct, {dmsl_payment_processing_thrift, 'InvoiceTemplateCreateParams'}}, 'params', undefined}
]};
function_info('InvoiceTemplating', 'Create', reply_type) ->
        {struct, struct, {dmsl_domain_thrift, 'InvoiceTemplate'}};
    function_info('InvoiceTemplating', 'Create', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidUser'}}, 'ex1', undefined},
        {2, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'PartyNotFound'}}, 'ex2', undefined},
        {3, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidPartyStatus'}}, 'ex3', undefined},
        {4, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'ShopNotFound'}}, 'ex4', undefined},
        {5, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidShopStatus'}}, 'ex5', undefined},
        {6, undefined, {struct, exception, {dmsl_base_thrift, 'InvalidRequest'}}, 'ex6', undefined}
    ]};
function_info('InvoiceTemplating', 'Get', params_type) ->
    {struct, struct, [
    {1, undefined, {struct, struct, {dmsl_payment_processing_thrift, 'UserInfo'}}, 'user', undefined},
    {2, undefined, string, 'id', undefined}
]};
function_info('InvoiceTemplating', 'Get', reply_type) ->
        {struct, struct, {dmsl_domain_thrift, 'InvoiceTemplate'}};
    function_info('InvoiceTemplating', 'Get', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidUser'}}, 'ex1', undefined},
        {2, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvoiceTemplateNotFound'}}, 'ex2', undefined},
        {3, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvoiceTemplateRemoved'}}, 'ex3', undefined}
    ]};
function_info('InvoiceTemplating', 'Update', params_type) ->
    {struct, struct, [
    {1, undefined, {struct, struct, {dmsl_payment_processing_thrift, 'UserInfo'}}, 'user', undefined},
    {2, undefined, string, 'id', undefined},
    {3, undefined, {struct, struct, {dmsl_payment_processing_thrift, 'InvoiceTemplateUpdateParams'}}, 'params', undefined}
]};
function_info('InvoiceTemplating', 'Update', reply_type) ->
        {struct, struct, {dmsl_domain_thrift, 'InvoiceTemplate'}};
    function_info('InvoiceTemplating', 'Update', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidUser'}}, 'ex1', undefined},
        {2, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvoiceTemplateNotFound'}}, 'ex2', undefined},
        {3, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvoiceTemplateRemoved'}}, 'ex3', undefined},
        {4, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidPartyStatus'}}, 'ex4', undefined},
        {5, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidShopStatus'}}, 'ex5', undefined},
        {6, undefined, {struct, exception, {dmsl_base_thrift, 'InvalidRequest'}}, 'ex6', undefined}
    ]};
function_info('InvoiceTemplating', 'Delete', params_type) ->
    {struct, struct, [
    {1, undefined, {struct, struct, {dmsl_payment_processing_thrift, 'UserInfo'}}, 'user', undefined},
    {2, undefined, string, 'id', undefined}
]};
function_info('InvoiceTemplating', 'Delete', reply_type) ->
        {struct, struct, []};
    function_info('InvoiceTemplating', 'Delete', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidUser'}}, 'ex1', undefined},
        {2, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvoiceTemplateNotFound'}}, 'ex2', undefined},
        {3, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvoiceTemplateRemoved'}}, 'ex3', undefined},
        {4, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidPartyStatus'}}, 'ex4', undefined},
        {5, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidShopStatus'}}, 'ex5', undefined}
    ]};
function_info('InvoiceTemplating', 'ComputeTerms', params_type) ->
    {struct, struct, [
    {1, undefined, {struct, struct, {dmsl_payment_processing_thrift, 'UserInfo'}}, 'user', undefined},
    {2, undefined, string, 'id', undefined},
    {3, undefined, string, 'timestamp', undefined}
]};
function_info('InvoiceTemplating', 'ComputeTerms', reply_type) ->
        {struct, struct, {dmsl_domain_thrift, 'TermSet'}};
    function_info('InvoiceTemplating', 'ComputeTerms', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidUser'}}, 'ex1', undefined},
        {2, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvoiceTemplateNotFound'}}, 'ex2', undefined},
        {3, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvoiceTemplateRemoved'}}, 'ex3', undefined},
        {4, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'PartyNotExistsYet'}}, 'ex4', undefined}
    ]};

function_info('CustomerManagement', 'Create', params_type) ->
    {struct, struct, [
    {1, undefined, {struct, struct, {dmsl_payment_processing_thrift, 'CustomerParams'}}, 'params', undefined}
]};
function_info('CustomerManagement', 'Create', reply_type) ->
        {struct, struct, {dmsl_payment_processing_thrift, 'Customer'}};
    function_info('CustomerManagement', 'Create', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidUser'}}, 'invalid_user', undefined},
        {2, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidPartyStatus'}}, 'invalid_party_status', undefined},
        {3, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidShopStatus'}}, 'invalid_shop_status', undefined},
        {4, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'ShopNotFound'}}, 'shop_not_found', undefined},
        {5, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'PartyNotFound'}}, 'party_not_found', undefined},
        {6, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'OperationNotPermitted'}}, 'operation_not_permitted', undefined}
    ]};
function_info('CustomerManagement', 'Get', params_type) ->
    {struct, struct, [
    {1, undefined, string, 'id', undefined}
]};
function_info('CustomerManagement', 'Get', reply_type) ->
        {struct, struct, {dmsl_payment_processing_thrift, 'Customer'}};
    function_info('CustomerManagement', 'Get', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidUser'}}, 'invalid_user', undefined},
        {2, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'CustomerNotFound'}}, 'not_found', undefined}
    ]};
function_info('CustomerManagement', 'Delete', params_type) ->
    {struct, struct, [
    {1, undefined, string, 'id', undefined}
]};
function_info('CustomerManagement', 'Delete', reply_type) ->
        {struct, struct, []};
    function_info('CustomerManagement', 'Delete', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidUser'}}, 'invalid_user', undefined},
        {2, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'CustomerNotFound'}}, 'not_found', undefined},
        {3, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidPartyStatus'}}, 'invalid_party_status', undefined},
        {4, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidShopStatus'}}, 'invalid_shop_status', undefined}
    ]};
function_info('CustomerManagement', 'StartBinding', params_type) ->
    {struct, struct, [
    {1, undefined, string, 'customer_id', undefined},
    {2, undefined, {struct, struct, {dmsl_payment_processing_thrift, 'CustomerBindingParams'}}, 'params', undefined}
]};
function_info('CustomerManagement', 'StartBinding', reply_type) ->
        {struct, struct, {dmsl_payment_processing_thrift, 'CustomerBinding'}};
    function_info('CustomerManagement', 'StartBinding', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidUser'}}, 'invalid_user', undefined},
        {2, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'CustomerNotFound'}}, 'customer_not_found', undefined},
        {3, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidPartyStatus'}}, 'invalid_party_status', undefined},
        {4, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidShopStatus'}}, 'invalid_shop_status', undefined},
        {5, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidContractStatus'}}, 'invalid_contract_status', undefined},
        {6, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'OperationNotPermitted'}}, 'operation_not_permitted', undefined}
    ]};
function_info('CustomerManagement', 'GetActiveBinding', params_type) ->
    {struct, struct, [
    {1, undefined, string, 'customer_id', undefined}
]};
function_info('CustomerManagement', 'GetActiveBinding', reply_type) ->
        {struct, struct, {dmsl_payment_processing_thrift, 'CustomerBinding'}};
    function_info('CustomerManagement', 'GetActiveBinding', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidUser'}}, 'invalid_user', undefined},
        {2, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'CustomerNotFound'}}, 'customer_not_found', undefined},
        {3, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidCustomerStatus'}}, 'invalid_customer_status', undefined}
    ]};
function_info('CustomerManagement', 'GetEvents', params_type) ->
    {struct, struct, [
    {1, undefined, string, 'customer_id', undefined},
    {2, undefined, {struct, struct, {dmsl_payment_processing_thrift, 'EventRange'}}, 'range', undefined}
]};
function_info('CustomerManagement', 'GetEvents', reply_type) ->
        {list, {struct, struct, {dmsl_payment_processing_thrift, 'Event'}}};
    function_info('CustomerManagement', 'GetEvents', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidUser'}}, 'invalid_user', undefined},
        {2, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'CustomerNotFound'}}, 'customer_not_found', undefined},
        {3, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'EventNotFound'}}, 'event_not_found', undefined}
    ]};

function_info('RecurrentPaymentTools', 'Create', params_type) ->
    {struct, struct, [
    {1, undefined, {struct, struct, {dmsl_payment_processing_thrift, 'RecurrentPaymentToolParams'}}, 'params', undefined}
]};
function_info('RecurrentPaymentTools', 'Create', reply_type) ->
        {struct, struct, {dmsl_payment_processing_thrift, 'RecurrentPaymentTool'}};
    function_info('RecurrentPaymentTools', 'Create', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidUser'}}, 'invalid_user', undefined},
        {2, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidPartyStatus'}}, 'invalid_party_status', undefined},
        {3, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidShopStatus'}}, 'invalid_shop_status', undefined},
        {4, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'ShopNotFound'}}, 'shop_not_found', undefined},
        {5, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'PartyNotFound'}}, 'party_not_found', undefined},
        {6, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidContractStatus'}}, 'invalid_contract_status', undefined},
        {7, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'OperationNotPermitted'}}, 'operation_not_permitted', undefined},
        {8, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidPaymentMethod'}}, 'invalid_payment_method', undefined}
    ]};
function_info('RecurrentPaymentTools', 'Abandon', params_type) ->
    {struct, struct, [
    {1, undefined, string, 'id', undefined}
]};
function_info('RecurrentPaymentTools', 'Abandon', reply_type) ->
        {struct, struct, {dmsl_payment_processing_thrift, 'RecurrentPaymentTool'}};
    function_info('RecurrentPaymentTools', 'Abandon', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidUser'}}, 'invalid_user', undefined},
        {2, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'RecurrentPaymentToolNotFound'}}, 'rec_payment_tool_not_found', undefined},
        {3, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidRecurrentPaymentToolStatus'}}, 'invalid_rec_payment_tool_status', undefined}
    ]};
function_info('RecurrentPaymentTools', 'Get', params_type) ->
    {struct, struct, [
    {1, undefined, string, 'id', undefined}
]};
function_info('RecurrentPaymentTools', 'Get', reply_type) ->
        {struct, struct, {dmsl_payment_processing_thrift, 'RecurrentPaymentTool'}};
    function_info('RecurrentPaymentTools', 'Get', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidUser'}}, 'invalid_user', undefined},
        {2, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'RecurrentPaymentToolNotFound'}}, 'rec_payment_tool_not_found', undefined}
    ]};
function_info('RecurrentPaymentTools', 'GetEvents', params_type) ->
    {struct, struct, [
    {1, undefined, string, 'id', undefined},
    {2, undefined, {struct, struct, {dmsl_payment_processing_thrift, 'EventRange'}}, 'range', undefined}
]};
function_info('RecurrentPaymentTools', 'GetEvents', reply_type) ->
        {list, {struct, struct, {dmsl_payment_processing_thrift, 'RecurrentPaymentToolEvent'}}};
    function_info('RecurrentPaymentTools', 'GetEvents', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidUser'}}, 'invalid_user', undefined},
        {2, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'RecurrentPaymentToolNotFound'}}, 'rec_payment_tool_not_found', undefined},
        {3, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'EventNotFound'}}, 'event_not_found', undefined}
    ]};

function_info('RecurrentPaymentToolEventSink', 'GetEvents', params_type) ->
    {struct, struct, [
    {1, undefined, {struct, struct, {dmsl_payment_processing_thrift, 'EventRange'}}, 'range', undefined}
]};
function_info('RecurrentPaymentToolEventSink', 'GetEvents', reply_type) ->
        {list, {struct, struct, {dmsl_payment_processing_thrift, 'RecurrentPaymentToolEvent'}}};
    function_info('RecurrentPaymentToolEventSink', 'GetEvents', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'EventNotFound'}}, 'ex1', undefined},
        {2, undefined, {struct, exception, {dmsl_base_thrift, 'InvalidRequest'}}, 'ex2', undefined}
    ]};
function_info('RecurrentPaymentToolEventSink', 'GetLastEventID', params_type) ->
    {struct, struct, []};
function_info('RecurrentPaymentToolEventSink', 'GetLastEventID', reply_type) ->
        i64;
    function_info('RecurrentPaymentToolEventSink', 'GetLastEventID', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'NoLastEvent'}}, 'ex1', undefined}
    ]};

function_info('PartyManagement', 'Create', params_type) ->
    {struct, struct, [
    {1, undefined, {struct, struct, {dmsl_payment_processing_thrift, 'UserInfo'}}, 'user', undefined},
    {2, undefined, string, 'party_id', undefined},
    {3, undefined, {struct, struct, {dmsl_payment_processing_thrift, 'PartyParams'}}, 'params', undefined}
]};
function_info('PartyManagement', 'Create', reply_type) ->
        {struct, struct, []};
    function_info('PartyManagement', 'Create', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidUser'}}, 'ex1', undefined},
        {2, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'PartyExists'}}, 'ex2', undefined}
    ]};
function_info('PartyManagement', 'Get', params_type) ->
    {struct, struct, [
    {1, undefined, {struct, struct, {dmsl_payment_processing_thrift, 'UserInfo'}}, 'user', undefined},
    {2, undefined, string, 'party_id', undefined}
]};
function_info('PartyManagement', 'Get', reply_type) ->
        {struct, struct, {dmsl_domain_thrift, 'Party'}};
    function_info('PartyManagement', 'Get', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidUser'}}, 'ex1', undefined},
        {2, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'PartyNotFound'}}, 'ex2', undefined}
    ]};
function_info('PartyManagement', 'Checkout', params_type) ->
    {struct, struct, [
    {1, undefined, {struct, struct, {dmsl_payment_processing_thrift, 'UserInfo'}}, 'user', undefined},
    {2, undefined, string, 'party_id', undefined},
    {3, undefined, {struct, union, {dmsl_payment_processing_thrift, 'PartyRevisionParam'}}, 'revision', undefined}
]};
function_info('PartyManagement', 'Checkout', reply_type) ->
        {struct, struct, {dmsl_domain_thrift, 'Party'}};
    function_info('PartyManagement', 'Checkout', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidUser'}}, 'ex1', undefined},
        {2, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'PartyNotFound'}}, 'ex2', undefined},
        {3, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidPartyRevision'}}, 'ex3', undefined}
    ]};
function_info('PartyManagement', 'Suspend', params_type) ->
    {struct, struct, [
    {1, undefined, {struct, struct, {dmsl_payment_processing_thrift, 'UserInfo'}}, 'user', undefined},
    {2, undefined, string, 'party_id', undefined}
]};
function_info('PartyManagement', 'Suspend', reply_type) ->
        {struct, struct, []};
    function_info('PartyManagement', 'Suspend', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidUser'}}, 'ex1', undefined},
        {2, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'PartyNotFound'}}, 'ex2', undefined},
        {3, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidPartyStatus'}}, 'ex3', undefined}
    ]};
function_info('PartyManagement', 'Activate', params_type) ->
    {struct, struct, [
    {1, undefined, {struct, struct, {dmsl_payment_processing_thrift, 'UserInfo'}}, 'user', undefined},
    {2, undefined, string, 'party_id', undefined}
]};
function_info('PartyManagement', 'Activate', reply_type) ->
        {struct, struct, []};
    function_info('PartyManagement', 'Activate', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidUser'}}, 'ex1', undefined},
        {2, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'PartyNotFound'}}, 'ex2', undefined},
        {3, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidPartyStatus'}}, 'ex3', undefined}
    ]};
function_info('PartyManagement', 'Block', params_type) ->
    {struct, struct, [
    {1, undefined, {struct, struct, {dmsl_payment_processing_thrift, 'UserInfo'}}, 'user', undefined},
    {2, undefined, string, 'party_id', undefined},
    {3, undefined, string, 'reason', undefined}
]};
function_info('PartyManagement', 'Block', reply_type) ->
        {struct, struct, []};
    function_info('PartyManagement', 'Block', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidUser'}}, 'ex1', undefined},
        {2, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'PartyNotFound'}}, 'ex2', undefined},
        {3, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidPartyStatus'}}, 'ex3', undefined}
    ]};
function_info('PartyManagement', 'Unblock', params_type) ->
    {struct, struct, [
    {1, undefined, {struct, struct, {dmsl_payment_processing_thrift, 'UserInfo'}}, 'user', undefined},
    {2, undefined, string, 'party_id', undefined},
    {3, undefined, string, 'reason', undefined}
]};
function_info('PartyManagement', 'Unblock', reply_type) ->
        {struct, struct, []};
    function_info('PartyManagement', 'Unblock', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidUser'}}, 'ex1', undefined},
        {2, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'PartyNotFound'}}, 'ex2', undefined},
        {3, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidPartyStatus'}}, 'ex3', undefined}
    ]};
function_info('PartyManagement', 'GetMeta', params_type) ->
    {struct, struct, [
    {1, undefined, {struct, struct, {dmsl_payment_processing_thrift, 'UserInfo'}}, 'user', undefined},
    {2, undefined, string, 'party_id', undefined}
]};
function_info('PartyManagement', 'GetMeta', reply_type) ->
        {map, string, {struct, union, {dmsl_msgpack_thrift, 'Value'}}};
    function_info('PartyManagement', 'GetMeta', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidUser'}}, 'ex1', undefined},
        {2, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'PartyNotFound'}}, 'ex2', undefined}
    ]};
function_info('PartyManagement', 'GetMetaData', params_type) ->
    {struct, struct, [
    {1, undefined, {struct, struct, {dmsl_payment_processing_thrift, 'UserInfo'}}, 'user', undefined},
    {2, undefined, string, 'party_id', undefined},
    {3, undefined, string, 'ns', undefined}
]};
function_info('PartyManagement', 'GetMetaData', reply_type) ->
        {struct, union, {dmsl_msgpack_thrift, 'Value'}};
    function_info('PartyManagement', 'GetMetaData', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidUser'}}, 'ex1', undefined},
        {2, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'PartyNotFound'}}, 'ex2', undefined},
        {3, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'PartyMetaNamespaceNotFound'}}, 'ex3', undefined}
    ]};
function_info('PartyManagement', 'SetMetaData', params_type) ->
    {struct, struct, [
    {1, undefined, {struct, struct, {dmsl_payment_processing_thrift, 'UserInfo'}}, 'user', undefined},
    {2, undefined, string, 'party_id', undefined},
    {3, undefined, string, 'ns', undefined},
    {4, undefined, {struct, union, {dmsl_msgpack_thrift, 'Value'}}, 'data', undefined}
]};
function_info('PartyManagement', 'SetMetaData', reply_type) ->
        {struct, struct, []};
    function_info('PartyManagement', 'SetMetaData', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidUser'}}, 'ex1', undefined},
        {2, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'PartyNotFound'}}, 'ex2', undefined}
    ]};
function_info('PartyManagement', 'RemoveMetaData', params_type) ->
    {struct, struct, [
    {1, undefined, {struct, struct, {dmsl_payment_processing_thrift, 'UserInfo'}}, 'user', undefined},
    {2, undefined, string, 'party_id', undefined},
    {3, undefined, string, 'ns', undefined}
]};
function_info('PartyManagement', 'RemoveMetaData', reply_type) ->
        {struct, struct, []};
    function_info('PartyManagement', 'RemoveMetaData', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidUser'}}, 'ex1', undefined},
        {2, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'PartyNotFound'}}, 'ex2', undefined},
        {3, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'PartyMetaNamespaceNotFound'}}, 'ex3', undefined}
    ]};
function_info('PartyManagement', 'GetContract', params_type) ->
    {struct, struct, [
    {1, undefined, {struct, struct, {dmsl_payment_processing_thrift, 'UserInfo'}}, 'user', undefined},
    {2, undefined, string, 'party_id', undefined},
    {3, undefined, string, 'contract_id', undefined}
]};
function_info('PartyManagement', 'GetContract', reply_type) ->
        {struct, struct, {dmsl_domain_thrift, 'Contract'}};
    function_info('PartyManagement', 'GetContract', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidUser'}}, 'ex1', undefined},
        {2, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'PartyNotFound'}}, 'ex2', undefined},
        {3, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'ContractNotFound'}}, 'ex3', undefined}
    ]};
function_info('PartyManagement', 'ComputeContractTerms', params_type) ->
    {struct, struct, [
    {1, undefined, {struct, struct, {dmsl_payment_processing_thrift, 'UserInfo'}}, 'user', undefined},
    {2, undefined, string, 'party_id', undefined},
    {3, undefined, string, 'id', undefined},
    {4, undefined, string, 'timestamp', undefined}
]};
function_info('PartyManagement', 'ComputeContractTerms', reply_type) ->
        {struct, struct, {dmsl_domain_thrift, 'TermSet'}};
    function_info('PartyManagement', 'ComputeContractTerms', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidUser'}}, 'ex1', undefined},
        {2, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'PartyNotFound'}}, 'ex2', undefined},
        {3, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'PartyNotExistsYet'}}, 'ex3', undefined},
        {4, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'ContractNotFound'}}, 'ex4', undefined}
    ]};
function_info('PartyManagement', 'GetShop', params_type) ->
    {struct, struct, [
    {1, undefined, {struct, struct, {dmsl_payment_processing_thrift, 'UserInfo'}}, 'user', undefined},
    {2, undefined, string, 'party_id', undefined},
    {3, undefined, string, 'id', undefined}
]};
function_info('PartyManagement', 'GetShop', reply_type) ->
        {struct, struct, {dmsl_domain_thrift, 'Shop'}};
    function_info('PartyManagement', 'GetShop', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidUser'}}, 'ex1', undefined},
        {2, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'PartyNotFound'}}, 'ex2', undefined},
        {3, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'ShopNotFound'}}, 'ex3', undefined}
    ]};
function_info('PartyManagement', 'SuspendShop', params_type) ->
    {struct, struct, [
    {1, undefined, {struct, struct, {dmsl_payment_processing_thrift, 'UserInfo'}}, 'user', undefined},
    {2, undefined, string, 'party_id', undefined},
    {3, undefined, string, 'id', undefined}
]};
function_info('PartyManagement', 'SuspendShop', reply_type) ->
        {struct, struct, []};
    function_info('PartyManagement', 'SuspendShop', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidUser'}}, 'ex1', undefined},
        {2, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'PartyNotFound'}}, 'ex2', undefined},
        {3, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'ShopNotFound'}}, 'ex3', undefined},
        {4, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidShopStatus'}}, 'ex4', undefined}
    ]};
function_info('PartyManagement', 'ActivateShop', params_type) ->
    {struct, struct, [
    {1, undefined, {struct, struct, {dmsl_payment_processing_thrift, 'UserInfo'}}, 'user', undefined},
    {2, undefined, string, 'party_id', undefined},
    {3, undefined, string, 'id', undefined}
]};
function_info('PartyManagement', 'ActivateShop', reply_type) ->
        {struct, struct, []};
    function_info('PartyManagement', 'ActivateShop', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidUser'}}, 'ex1', undefined},
        {2, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'PartyNotFound'}}, 'ex2', undefined},
        {3, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'ShopNotFound'}}, 'ex3', undefined},
        {4, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidShopStatus'}}, 'ex4', undefined}
    ]};
function_info('PartyManagement', 'BlockShop', params_type) ->
    {struct, struct, [
    {1, undefined, {struct, struct, {dmsl_payment_processing_thrift, 'UserInfo'}}, 'user', undefined},
    {2, undefined, string, 'party_id', undefined},
    {3, undefined, string, 'id', undefined},
    {4, undefined, string, 'reason', undefined}
]};
function_info('PartyManagement', 'BlockShop', reply_type) ->
        {struct, struct, []};
    function_info('PartyManagement', 'BlockShop', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidUser'}}, 'ex1', undefined},
        {2, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'PartyNotFound'}}, 'ex2', undefined},
        {3, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'ShopNotFound'}}, 'ex3', undefined},
        {4, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidShopStatus'}}, 'ex4', undefined}
    ]};
function_info('PartyManagement', 'UnblockShop', params_type) ->
    {struct, struct, [
    {1, undefined, {struct, struct, {dmsl_payment_processing_thrift, 'UserInfo'}}, 'user', undefined},
    {2, undefined, string, 'party_id', undefined},
    {3, undefined, string, 'id', undefined},
    {4, undefined, string, 'reason', undefined}
]};
function_info('PartyManagement', 'UnblockShop', reply_type) ->
        {struct, struct, []};
    function_info('PartyManagement', 'UnblockShop', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidUser'}}, 'ex1', undefined},
        {2, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'PartyNotFound'}}, 'ex2', undefined},
        {3, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'ShopNotFound'}}, 'ex3', undefined},
        {4, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidShopStatus'}}, 'ex4', undefined}
    ]};
function_info('PartyManagement', 'ComputeShopTerms', params_type) ->
    {struct, struct, [
    {1, undefined, {struct, struct, {dmsl_payment_processing_thrift, 'UserInfo'}}, 'user', undefined},
    {2, undefined, string, 'party_id', undefined},
    {3, undefined, string, 'id', undefined},
    {4, undefined, string, 'timestamp', undefined}
]};
function_info('PartyManagement', 'ComputeShopTerms', reply_type) ->
        {struct, struct, {dmsl_domain_thrift, 'TermSet'}};
    function_info('PartyManagement', 'ComputeShopTerms', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidUser'}}, 'ex1', undefined},
        {2, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'PartyNotFound'}}, 'ex2', undefined},
        {3, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'PartyNotExistsYet'}}, 'ex3', undefined},
        {4, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'ShopNotFound'}}, 'ex4', undefined}
    ]};
function_info('PartyManagement', 'GetWallet', params_type) ->
    {struct, struct, [
    {1, undefined, {struct, struct, {dmsl_payment_processing_thrift, 'UserInfo'}}, 'user', undefined},
    {2, undefined, string, 'party_id', undefined},
    {3, undefined, string, 'id', undefined}
]};
function_info('PartyManagement', 'GetWallet', reply_type) ->
        {struct, struct, {dmsl_domain_thrift, 'Wallet'}};
    function_info('PartyManagement', 'GetWallet', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidUser'}}, 'ex1', undefined},
        {2, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'PartyNotFound'}}, 'ex2', undefined},
        {3, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'WalletNotFound'}}, 'ex3', undefined}
    ]};
function_info('PartyManagement', 'SuspendWallet', params_type) ->
    {struct, struct, [
    {1, undefined, {struct, struct, {dmsl_payment_processing_thrift, 'UserInfo'}}, 'user', undefined},
    {2, undefined, string, 'party_id', undefined},
    {3, undefined, string, 'id', undefined}
]};
function_info('PartyManagement', 'SuspendWallet', reply_type) ->
        {struct, struct, []};
    function_info('PartyManagement', 'SuspendWallet', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidUser'}}, 'ex1', undefined},
        {2, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'PartyNotFound'}}, 'ex2', undefined},
        {3, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'WalletNotFound'}}, 'ex3', undefined},
        {4, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidWalletStatus'}}, 'ex4', undefined}
    ]};
function_info('PartyManagement', 'ActivateWallet', params_type) ->
    {struct, struct, [
    {1, undefined, {struct, struct, {dmsl_payment_processing_thrift, 'UserInfo'}}, 'user', undefined},
    {2, undefined, string, 'party_id', undefined},
    {3, undefined, string, 'id', undefined}
]};
function_info('PartyManagement', 'ActivateWallet', reply_type) ->
        {struct, struct, []};
    function_info('PartyManagement', 'ActivateWallet', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidUser'}}, 'ex1', undefined},
        {2, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'PartyNotFound'}}, 'ex2', undefined},
        {3, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'WalletNotFound'}}, 'ex3', undefined},
        {4, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidWalletStatus'}}, 'ex4', undefined}
    ]};
function_info('PartyManagement', 'BlockWallet', params_type) ->
    {struct, struct, [
    {1, undefined, {struct, struct, {dmsl_payment_processing_thrift, 'UserInfo'}}, 'user', undefined},
    {2, undefined, string, 'party_id', undefined},
    {3, undefined, string, 'id', undefined},
    {4, undefined, string, 'reason', undefined}
]};
function_info('PartyManagement', 'BlockWallet', reply_type) ->
        {struct, struct, []};
    function_info('PartyManagement', 'BlockWallet', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidUser'}}, 'ex1', undefined},
        {2, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'PartyNotFound'}}, 'ex2', undefined},
        {3, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'WalletNotFound'}}, 'ex3', undefined},
        {4, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidWalletStatus'}}, 'ex4', undefined}
    ]};
function_info('PartyManagement', 'UnblockWallet', params_type) ->
    {struct, struct, [
    {1, undefined, {struct, struct, {dmsl_payment_processing_thrift, 'UserInfo'}}, 'user', undefined},
    {2, undefined, string, 'party_id', undefined},
    {3, undefined, string, 'id', undefined},
    {4, undefined, string, 'reason', undefined}
]};
function_info('PartyManagement', 'UnblockWallet', reply_type) ->
        {struct, struct, []};
    function_info('PartyManagement', 'UnblockWallet', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidUser'}}, 'ex1', undefined},
        {2, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'PartyNotFound'}}, 'ex2', undefined},
        {3, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'WalletNotFound'}}, 'ex3', undefined},
        {4, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidWalletStatus'}}, 'ex4', undefined}
    ]};
function_info('PartyManagement', 'CreateClaim', params_type) ->
    {struct, struct, [
    {1, undefined, {struct, struct, {dmsl_payment_processing_thrift, 'UserInfo'}}, 'user', undefined},
    {2, undefined, string, 'party_id', undefined},
    {3, undefined, {list, {struct, union, {dmsl_payment_processing_thrift, 'PartyModification'}}}, 'changeset', undefined}
]};
function_info('PartyManagement', 'CreateClaim', reply_type) ->
        {struct, struct, {dmsl_payment_processing_thrift, 'Claim'}};
    function_info('PartyManagement', 'CreateClaim', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidUser'}}, 'ex1', undefined},
        {2, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'PartyNotFound'}}, 'ex2', undefined},
        {3, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidPartyStatus'}}, 'ex3', undefined},
        {4, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'ChangesetConflict'}}, 'ex4', undefined},
        {5, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidChangeset'}}, 'ex5', undefined},
        {6, undefined, {struct, exception, {dmsl_base_thrift, 'InvalidRequest'}}, 'ex6', undefined}
    ]};
function_info('PartyManagement', 'GetClaim', params_type) ->
    {struct, struct, [
    {1, undefined, {struct, struct, {dmsl_payment_processing_thrift, 'UserInfo'}}, 'user', undefined},
    {2, undefined, string, 'party_id', undefined},
    {3, undefined, i64, 'id', undefined}
]};
function_info('PartyManagement', 'GetClaim', reply_type) ->
        {struct, struct, {dmsl_payment_processing_thrift, 'Claim'}};
    function_info('PartyManagement', 'GetClaim', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidUser'}}, 'ex1', undefined},
        {2, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'PartyNotFound'}}, 'ex2', undefined},
        {3, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'ClaimNotFound'}}, 'ex3', undefined}
    ]};
function_info('PartyManagement', 'GetClaims', params_type) ->
    {struct, struct, [
    {1, undefined, {struct, struct, {dmsl_payment_processing_thrift, 'UserInfo'}}, 'user', undefined},
    {2, undefined, string, 'party_id', undefined}
]};
function_info('PartyManagement', 'GetClaims', reply_type) ->
        {list, {struct, struct, {dmsl_payment_processing_thrift, 'Claim'}}};
    function_info('PartyManagement', 'GetClaims', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidUser'}}, 'ex1', undefined},
        {2, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'PartyNotFound'}}, 'ex2', undefined}
    ]};
function_info('PartyManagement', 'AcceptClaim', params_type) ->
    {struct, struct, [
    {1, undefined, {struct, struct, {dmsl_payment_processing_thrift, 'UserInfo'}}, 'user', undefined},
    {2, undefined, string, 'party_id', undefined},
    {3, undefined, i64, 'id', undefined},
    {4, undefined, i32, 'revision', undefined}
]};
function_info('PartyManagement', 'AcceptClaim', reply_type) ->
        {struct, struct, []};
    function_info('PartyManagement', 'AcceptClaim', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidUser'}}, 'ex1', undefined},
        {2, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'PartyNotFound'}}, 'ex2', undefined},
        {3, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'ClaimNotFound'}}, 'ex3', undefined},
        {4, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidClaimStatus'}}, 'ex4', undefined},
        {5, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidClaimRevision'}}, 'ex5', undefined},
        {6, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidChangeset'}}, 'ex6', undefined}
    ]};
function_info('PartyManagement', 'UpdateClaim', params_type) ->
    {struct, struct, [
    {1, undefined, {struct, struct, {dmsl_payment_processing_thrift, 'UserInfo'}}, 'user', undefined},
    {2, undefined, string, 'party_id', undefined},
    {3, undefined, i64, 'id', undefined},
    {4, undefined, i32, 'revision', undefined},
    {5, undefined, {list, {struct, union, {dmsl_payment_processing_thrift, 'PartyModification'}}}, 'changeset', undefined}
]};
function_info('PartyManagement', 'UpdateClaim', reply_type) ->
        {struct, struct, []};
    function_info('PartyManagement', 'UpdateClaim', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidUser'}}, 'ex1', undefined},
        {2, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'PartyNotFound'}}, 'ex2', undefined},
        {3, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidPartyStatus'}}, 'ex3', undefined},
        {4, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'ClaimNotFound'}}, 'ex4', undefined},
        {5, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidClaimStatus'}}, 'ex5', undefined},
        {6, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidClaimRevision'}}, 'ex6', undefined},
        {7, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'ChangesetConflict'}}, 'ex7', undefined},
        {8, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidChangeset'}}, 'ex8', undefined},
        {9, undefined, {struct, exception, {dmsl_base_thrift, 'InvalidRequest'}}, 'ex9', undefined}
    ]};
function_info('PartyManagement', 'DenyClaim', params_type) ->
    {struct, struct, [
    {1, undefined, {struct, struct, {dmsl_payment_processing_thrift, 'UserInfo'}}, 'user', undefined},
    {2, undefined, string, 'party_id', undefined},
    {3, undefined, i64, 'id', undefined},
    {4, undefined, i32, 'revision', undefined},
    {5, undefined, string, 'reason', undefined}
]};
function_info('PartyManagement', 'DenyClaim', reply_type) ->
        {struct, struct, []};
    function_info('PartyManagement', 'DenyClaim', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidUser'}}, 'ex1', undefined},
        {2, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'PartyNotFound'}}, 'ex2', undefined},
        {3, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'ClaimNotFound'}}, 'ex3', undefined},
        {4, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidClaimStatus'}}, 'ex4', undefined},
        {5, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidClaimRevision'}}, 'ex5', undefined}
    ]};
function_info('PartyManagement', 'RevokeClaim', params_type) ->
    {struct, struct, [
    {1, undefined, {struct, struct, {dmsl_payment_processing_thrift, 'UserInfo'}}, 'user', undefined},
    {2, undefined, string, 'party_id', undefined},
    {3, undefined, i64, 'id', undefined},
    {4, undefined, i32, 'revision', undefined},
    {5, undefined, string, 'reason', undefined}
]};
function_info('PartyManagement', 'RevokeClaim', reply_type) ->
        {struct, struct, []};
    function_info('PartyManagement', 'RevokeClaim', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidUser'}}, 'ex1', undefined},
        {2, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'PartyNotFound'}}, 'ex2', undefined},
        {3, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidPartyStatus'}}, 'ex3', undefined},
        {4, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'ClaimNotFound'}}, 'ex4', undefined},
        {5, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidClaimStatus'}}, 'ex5', undefined},
        {6, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidClaimRevision'}}, 'ex6', undefined}
    ]};
function_info('PartyManagement', 'GetEvents', params_type) ->
    {struct, struct, [
    {1, undefined, {struct, struct, {dmsl_payment_processing_thrift, 'UserInfo'}}, 'user', undefined},
    {2, undefined, string, 'party_id', undefined},
    {3, undefined, {struct, struct, {dmsl_payment_processing_thrift, 'EventRange'}}, 'range', undefined}
]};
function_info('PartyManagement', 'GetEvents', reply_type) ->
        {list, {struct, struct, {dmsl_payment_processing_thrift, 'Event'}}};
    function_info('PartyManagement', 'GetEvents', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidUser'}}, 'ex1', undefined},
        {2, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'PartyNotFound'}}, 'ex2', undefined},
        {3, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'EventNotFound'}}, 'ex3', undefined},
        {4, undefined, {struct, exception, {dmsl_base_thrift, 'InvalidRequest'}}, 'ex4', undefined}
    ]};
function_info('PartyManagement', 'GetShopAccount', params_type) ->
    {struct, struct, [
    {1, undefined, {struct, struct, {dmsl_payment_processing_thrift, 'UserInfo'}}, 'user', undefined},
    {2, undefined, string, 'party_id', undefined},
    {3, undefined, string, 'shop_id', undefined}
]};
function_info('PartyManagement', 'GetShopAccount', reply_type) ->
        {struct, struct, {dmsl_domain_thrift, 'ShopAccount'}};
    function_info('PartyManagement', 'GetShopAccount', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidUser'}}, 'ex1', undefined},
        {2, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'PartyNotFound'}}, 'ex2', undefined},
        {3, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'ShopNotFound'}}, 'ex3', undefined},
        {4, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'ShopAccountNotFound'}}, 'ex4', undefined}
    ]};
function_info('PartyManagement', 'GetAccountState', params_type) ->
    {struct, struct, [
    {1, undefined, {struct, struct, {dmsl_payment_processing_thrift, 'UserInfo'}}, 'user', undefined},
    {2, undefined, string, 'party_id', undefined},
    {3, undefined, i64, 'account_id', undefined}
]};
function_info('PartyManagement', 'GetAccountState', reply_type) ->
        {struct, struct, {dmsl_payment_processing_thrift, 'AccountState'}};
    function_info('PartyManagement', 'GetAccountState', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidUser'}}, 'ex1', undefined},
        {2, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'PartyNotFound'}}, 'ex2', undefined},
        {3, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'AccountNotFound'}}, 'ex3', undefined}
    ]};
function_info('PartyManagement', 'ComputePaymentInstitutionTerms', params_type) ->
    {struct, struct, [
    {1, undefined, {struct, struct, {dmsl_payment_processing_thrift, 'UserInfo'}}, 'user', undefined},
    {2, undefined, string, 'party_id', undefined},
    {3, undefined, {struct, struct, {dmsl_domain_thrift, 'PaymentInstitutionRef'}}, 'ref', undefined},
    {4, undefined, {struct, struct, {dmsl_payment_processing_thrift, 'Varset'}}, 'varset', undefined}
]};
function_info('PartyManagement', 'ComputePaymentInstitutionTerms', reply_type) ->
        {struct, struct, {dmsl_domain_thrift, 'TermSet'}};
    function_info('PartyManagement', 'ComputePaymentInstitutionTerms', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidUser'}}, 'ex1', undefined},
        {2, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'PartyNotFound'}}, 'ex2', undefined},
        {3, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'PaymentInstitutionNotFound'}}, 'ex3', undefined}
    ]};
function_info('PartyManagement', 'ComputePayoutCashFlow', params_type) ->
    {struct, struct, [
    {1, undefined, {struct, struct, {dmsl_payment_processing_thrift, 'UserInfo'}}, 'user', undefined},
    {2, undefined, string, 'party_id', undefined},
    {3, undefined, {struct, struct, {dmsl_payment_processing_thrift, 'PayoutParams'}}, 'params', undefined}
]};
function_info('PartyManagement', 'ComputePayoutCashFlow', reply_type) ->
        {list, {struct, struct, {dmsl_domain_thrift, 'FinalCashFlowPosting'}}};
    function_info('PartyManagement', 'ComputePayoutCashFlow', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'InvalidUser'}}, 'ex1', undefined},
        {2, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'PartyNotFound'}}, 'ex2', undefined},
        {3, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'PartyNotExistsYet'}}, 'ex3', undefined},
        {4, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'ShopNotFound'}}, 'ex4', undefined},
        {5, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'OperationNotPermitted'}}, 'ex5', undefined}
    ]};

function_info('EventSink', 'GetEvents', params_type) ->
    {struct, struct, [
    {1, undefined, {struct, struct, {dmsl_payment_processing_thrift, 'EventRange'}}, 'range', undefined}
]};
function_info('EventSink', 'GetEvents', reply_type) ->
        {list, {struct, struct, {dmsl_payment_processing_thrift, 'Event'}}};
    function_info('EventSink', 'GetEvents', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'EventNotFound'}}, 'ex1', undefined},
        {2, undefined, {struct, exception, {dmsl_base_thrift, 'InvalidRequest'}}, 'ex2', undefined}
    ]};
function_info('EventSink', 'GetLastEventID', params_type) ->
    {struct, struct, []};
function_info('EventSink', 'GetLastEventID', reply_type) ->
        i64;
    function_info('EventSink', 'GetLastEventID', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_payment_processing_thrift, 'NoLastEvent'}}, 'ex1', undefined}
    ]};

function_info(_Service, _Function, _InfoType) -> erlang:error(badarg).
