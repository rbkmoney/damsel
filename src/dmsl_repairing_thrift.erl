%%
%% Autogenerated by Thrift Compiler (1.0.0-dev)
%%
%% DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
%%

-module(dmsl_repairing_thrift).

-include("dmsl_repairing_thrift.hrl").

-export([namespace/0]).
-export([enums/0]).
-export([typedefs/0]).
-export([structs/0]).
-export([services/0]).
-export([typedef_info/1]).
-export([enum_info/1]).
-export([struct_info/1]).
-export([record_name/1]).
-export([functions/1]).
-export([function_info/3]).

-export_type([namespace/0]).
-export_type([typedef_name/0]).
-export_type([enum_name/0]).
-export_type([struct_name/0]).
-export_type([exception_name/0]).
-export_type([service_name/0]).
-export_type([function_name/0]).

-export_type([enum_info/0]).
-export_type([struct_info/0]).

-export_type([
    'ComplexAction'/0,
    'TimerAction'/0,
    'SetTimerAction'/0,
    'UnsetTimerAction'/0,
    'RemoveAction'/0
]).

-type namespace() :: 'repair'.

%%
%% typedefs
%%
-type typedef_name() :: none().


%%
%% enums
%%
-type enum_name() :: none().

%%
%% structs, unions and exceptions
%%
-type struct_name() ::
    'ComplexAction' |
    'TimerAction' |
    'SetTimerAction' |
    'UnsetTimerAction' |
    'RemoveAction'.

-type exception_name() :: none().

%% struct 'ComplexAction'
-type 'ComplexAction'() :: #'repair_ComplexAction'{}.

%% union 'TimerAction'
-type 'TimerAction'() ::
    {'set_timer', 'SetTimerAction'()} |
    {'unset_timer', 'UnsetTimerAction'()}.

%% struct 'SetTimerAction'
-type 'SetTimerAction'() :: #'repair_SetTimerAction'{}.

%% struct 'UnsetTimerAction'
-type 'UnsetTimerAction'() :: #'repair_UnsetTimerAction'{}.

%% struct 'RemoveAction'
-type 'RemoveAction'() :: #'repair_RemoveAction'{}.

%%
%% services and functions
%%
-type service_name() :: none().

-type function_name() :: none().


-type struct_flavour() :: struct | exception | union.
-type field_num() :: pos_integer().
-type field_name() :: atom().
-type field_req() :: required | optional | undefined.

-type type_ref() :: {module(), atom()}.
-type field_type() ::
    bool | byte | i16 | i32 | i64 | string | double |
{enum, type_ref()} |
{struct, struct_flavour(), type_ref()} |
{list, field_type()} |
{set, field_type()} |
{map, field_type(), field_type()}.

-type struct_field_info() ::
    {field_num(), field_req(), field_type(), field_name(), any()}.
-type struct_info() ::
    {struct, struct_flavour(), [struct_field_info()]}.

-type enum_choice() :: none().

-type enum_field_info() ::
    {enum_choice(), integer()}.
-type enum_info() ::
    {enum, [enum_field_info()]}.

-spec typedefs() -> [].

typedefs() ->
    [].

-spec enums() -> [].

enums() ->
    [].

-spec structs() -> [struct_name()].

structs() ->
    [
        'ComplexAction',
        'TimerAction',
        'SetTimerAction',
        'UnsetTimerAction',
        'RemoveAction'
    ].

-spec services() -> [].

services() ->
    [].

-spec namespace() -> namespace().

namespace() ->
    'repair'.

-spec typedef_info(_) -> no_return().

typedef_info(_) -> erlang:error(badarg).

-spec enum_info(_) -> no_return().

enum_info(_) -> erlang:error(badarg).

-spec struct_info(struct_name() | exception_name()) -> struct_info() | no_return().

struct_info('ComplexAction') ->
    {struct, struct, [
    {1, optional, {struct, union, {dmsl_repairing_thrift, 'TimerAction'}}, 'timer', undefined},
    {3, optional, {struct, struct, {dmsl_repairing_thrift, 'RemoveAction'}}, 'remove', undefined}
]};

struct_info('TimerAction') ->
    {struct, union, [
    {1, optional, {struct, struct, {dmsl_repairing_thrift, 'SetTimerAction'}}, 'set_timer', undefined},
    {2, optional, {struct, struct, {dmsl_repairing_thrift, 'UnsetTimerAction'}}, 'unset_timer', undefined}
]};

struct_info('SetTimerAction') ->
    {struct, struct, [
    {1, required, {struct, union, {dmsl_base_thrift, 'Timer'}}, 'timer', undefined}
]};

struct_info('UnsetTimerAction') ->
    {struct, struct, []};

struct_info('RemoveAction') ->
    {struct, struct, []};

struct_info(_) -> erlang:error(badarg).

-spec record_name(struct_name() | exception_name()) -> atom() | no_return().

record_name('ComplexAction') ->
    'repair_ComplexAction';

record_name('SetTimerAction') ->
    'repair_SetTimerAction';

    record_name('UnsetTimerAction') ->
    'repair_UnsetTimerAction';

    record_name('RemoveAction') ->
    'repair_RemoveAction';

    record_name(_) -> error(badarg).
    
    -spec functions(_) -> no_return().

functions(_) -> error(badarg).

-spec function_info(_,_,_) -> no_return().

function_info(_Service, _Function, _InfoType) -> erlang:error(badarg).
