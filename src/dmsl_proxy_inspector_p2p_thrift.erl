%%
%% Autogenerated by Thrift Compiler (1.0.0-dev)
%%
%% DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
%%

-module(dmsl_proxy_inspector_p2p_thrift).

-include("dmsl_proxy_inspector_p2p_thrift.hrl").

-export([namespace/0]).
-export([enums/0]).
-export([typedefs/0]).
-export([structs/0]).
-export([services/0]).
-export([typedef_info/1]).
-export([enum_info/1]).
-export([struct_info/1]).
-export([record_name/1]).
-export([functions/1]).
-export([function_info/3]).

-export_type([namespace/0]).
-export_type([typedef_name/0]).
-export_type([enum_name/0]).
-export_type([struct_name/0]).
-export_type([exception_name/0]).
-export_type([service_name/0]).
-export_type([function_name/0]).

-export_type([enum_info/0]).
-export_type([struct_info/0]).

-export_type([
    'ContractID'/0,
    'ProviderID'/0,
    'ClassID'/0,
    'LevelID'/0
]).
-export_type([
    'Context'/0,
    'TransferInfo'/0,
    'Transfer'/0,
    'Identity'/0,
    'Payer'/0,
    'Raw'/0,
    'InspectResult'/0
]).

-type namespace() :: 'p2p_insp'.

%%
%% typedefs
%%
-type typedef_name() ::
    'ContractID' |
    'ProviderID' |
    'ClassID' |
    'LevelID'.

-type 'ContractID'() :: dmsl_base_thrift:'ID'().
-type 'ProviderID'() :: dmsl_base_thrift:'ID'().
-type 'ClassID'() :: dmsl_base_thrift:'ID'().
-type 'LevelID'() :: dmsl_base_thrift:'ID'().

%%
%% enums
%%
-type enum_name() :: none().

%%
%% structs, unions and exceptions
%%
-type struct_name() ::
    'Context' |
    'TransferInfo' |
    'Transfer' |
    'Identity' |
    'Payer' |
    'Raw' |
    'InspectResult'.

-type exception_name() :: none().

%% struct 'Context'
-type 'Context'() :: #'p2p_insp_Context'{}.

%% struct 'TransferInfo'
-type 'TransferInfo'() :: #'p2p_insp_TransferInfo'{}.

%% struct 'Transfer'
-type 'Transfer'() :: #'p2p_insp_Transfer'{}.

%% struct 'Identity'
-type 'Identity'() :: #'p2p_insp_Identity'{}.

%% union 'Payer'
-type 'Payer'() ::
    {'raw', 'Raw'()}.

%% struct 'Raw'
-type 'Raw'() :: #'p2p_insp_Raw'{}.

%% struct 'InspectResult'
-type 'InspectResult'() :: #'p2p_insp_InspectResult'{}.

%%
%% services and functions
%%
-type service_name() ::
    'InspectorProxy'.

-type function_name() ::
    'InspectorProxy_service_functions'().

-type 'InspectorProxy_service_functions'() ::
    'InspectTransfer'.

-export_type(['InspectorProxy_service_functions'/0]).


-type struct_flavour() :: struct | exception | union.
-type field_num() :: pos_integer().
-type field_name() :: atom().
-type field_req() :: required | optional | undefined.

-type type_ref() :: {module(), atom()}.
-type field_type() ::
    bool | byte | i16 | i32 | i64 | string | double |
    {enum, type_ref()} |
    {struct, struct_flavour(), type_ref()} |
    {list, field_type()} |
    {set, field_type()} |
    {map, field_type(), field_type()}.

-type struct_field_info() ::
    {field_num(), field_req(), field_type(), field_name(), any()}.
-type struct_info() ::
    {struct, struct_flavour(), [struct_field_info()]}.

-type enum_choice() :: none().

-type enum_field_info() ::
    {enum_choice(), integer()}.
-type enum_info() ::
    {enum, [enum_field_info()]}.

-spec typedefs() -> [typedef_name()].

typedefs() ->
    [
        'ContractID',
        'ProviderID',
        'ClassID',
        'LevelID'
    ].

-spec enums() -> [].

enums() ->
    [].

-spec structs() -> [struct_name()].

structs() ->
    [
        'Context',
        'TransferInfo',
        'Transfer',
        'Identity',
        'Payer',
        'Raw',
        'InspectResult'
    ].

-spec services() -> [service_name()].

services() ->
    [
        'InspectorProxy'
    ].

-spec namespace() -> namespace().

namespace() ->
    'p2p_insp'.

-spec typedef_info(typedef_name()) -> field_type() | no_return().

typedef_info('ContractID') ->
    string;

typedef_info('ProviderID') ->
    string;

typedef_info('ClassID') ->
    string;

typedef_info('LevelID') ->
    string;

typedef_info(_) -> erlang:error(badarg).

-spec enum_info(_) -> no_return().

enum_info(_) -> erlang:error(badarg).

-spec struct_info(struct_name() | exception_name()) -> struct_info() | no_return().

struct_info('Context') ->
    {struct, struct, [
        {1, required, {struct, struct, {dmsl_proxy_inspector_p2p_thrift, 'TransferInfo'}}, 'info', undefined},
        {2, optional, {map, string, string}, 'options', #{}}
    ]};

struct_info('TransferInfo') ->
    {struct, struct, [
        {1, required, {struct, struct, {dmsl_proxy_inspector_p2p_thrift, 'Transfer'}}, 'transfer', undefined}
    ]};

struct_info('Transfer') ->
    {struct, struct, [
        {1, required, string, 'id', undefined},
        {2, required, {struct, struct, {dmsl_proxy_inspector_p2p_thrift, 'Identity'}}, 'identity', undefined},
        {3, required, string, 'created_at', undefined},
        {4, required, {struct, union, {dmsl_proxy_inspector_p2p_thrift, 'Payer'}}, 'sender', undefined},
        {5, required, {struct, union, {dmsl_proxy_inspector_p2p_thrift, 'Payer'}}, 'receiver', undefined},
        {6, required, {struct, struct, {dmsl_domain_thrift, 'Cash'}}, 'cost', undefined}
    ]};

struct_info('Identity') ->
    {struct, struct, [
        {1, required, string, 'id', undefined}
    ]};

struct_info('Payer') ->
    {struct, union, [
        {1, optional, {struct, struct, {dmsl_proxy_inspector_p2p_thrift, 'Raw'}}, 'raw', undefined}
    ]};

struct_info('Raw') ->
    {struct, struct, [
        {1, required, {struct, union, {dmsl_domain_thrift, 'Payer'}}, 'payer', undefined}
    ]};

struct_info('InspectResult') ->
    {struct, struct, [
        {1, required, {map, string, {enum, {dmsl_domain_thrift, 'RiskScore'}}}, 'scores', undefined}
    ]};

struct_info(_) -> erlang:error(badarg).

-spec record_name(struct_name() | exception_name()) -> atom() | no_return().

record_name('Context') ->
    'p2p_insp_Context';

record_name('TransferInfo') ->
    'p2p_insp_TransferInfo';

record_name('Transfer') ->
    'p2p_insp_Transfer';

record_name('Identity') ->
    'p2p_insp_Identity';

record_name('Raw') ->
    'p2p_insp_Raw';

record_name('InspectResult') ->
    'p2p_insp_InspectResult';

record_name(_) -> error(badarg).

-spec functions(service_name()) -> [function_name()] | no_return().

functions('InspectorProxy') ->
    [
        'InspectTransfer'
    ];

functions(_) -> error(badarg).

-spec function_info(service_name(), function_name(), params_type | reply_type | exceptions) ->
    struct_info() | no_return().

function_info('InspectorProxy', 'InspectTransfer', params_type) ->
    {struct, struct, [
        {1, undefined, {struct, struct, {dmsl_proxy_inspector_p2p_thrift, 'Context'}}, 'context', undefined},
        {2, undefined, {list, string}, 'risk_types', undefined}
    ]};
function_info('InspectorProxy', 'InspectTransfer', reply_type) ->
    {struct, struct, {dmsl_proxy_inspector_p2p_thrift, 'InspectResult'}};
function_info('InspectorProxy', 'InspectTransfer', exceptions) ->
    {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_base_thrift, 'InvalidRequest'}}, 'ex1', undefined}
    ]};

function_info(_Service, _Function, _InfoType) -> erlang:error(badarg).
