%%
%% Autogenerated by Thrift Compiler (1.0.0-dev)
%%
%% DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
%%

-module(dmsl_state_processing_thrift).

-include("dmsl_state_processing_thrift.hrl").

-export([namespace/0]).
-export([enums/0]).
-export([typedefs/0]).
-export([structs/0]).
-export([services/0]).
-export([typedef_info/1]).
-export([enum_info/1]).
-export([struct_info/1]).
-export([record_name/1]).
-export([functions/1]).
-export([function_info/3]).

-export_type([namespace/0]).
-export_type([typedef_name/0]).
-export_type([enum_name/0]).
-export_type([struct_name/0]).
-export_type([exception_name/0]).
-export_type([service_name/0]).
-export_type([function_name/0]).

-export_type([enum_info/0]).
-export_type([struct_info/0]).

-export_type([
    'EventBody'/0,
    'EventBodies'/0,
    'Args'/0,
    'AuxState'/0,
    'History'/0,
    'CallResponse'/0,
    'SinkHistory'/0
]).
-export_type([
    'Direction'/0
]).
-export_type([
    'Event'/0,
    'Machine'/0,
    'MachineDescriptor'/0,
    'ComplexAction'/0,
    'TimerAction'/0,
    'SetTimerAction'/0,
    'UnsetTimerAction'/0,
    'TagAction'/0,
    'Reference'/0,
    'MachineStateChange'/0,
    'CallArgs'/0,
    'CallResult'/0,
    'Signal'/0,
    'InitSignal'/0,
    'TimeoutSignal'/0,
    'RepairSignal'/0,
    'SignalArgs'/0,
    'SignalResult'/0,
    'HistoryRange'/0,
    'SinkEvent'/0
]).
-export_type([
    'EventNotFound'/0,
    'MachineNotFound'/0,
    'NamespaceNotFound'/0,
    'MachineAlreadyExists'/0,
    'MachineFailed'/0,
    'EventSinkNotFound'/0
]).

-type namespace() :: ''.

%%
%% typedefs
%%
-type typedef_name() ::
    'EventBody' |
    'EventBodies' |
    'Args' |
    'AuxState' |
    'History' |
    'CallResponse' |
    'SinkHistory'.

-type 'EventBody'() :: dmsl_msgpack_thrift:'Value'().
-type 'EventBodies'() :: ['EventBody'()].
-type 'Args'() :: dmsl_msgpack_thrift:'Value'().
-type 'AuxState'() :: dmsl_msgpack_thrift:'Value'().
-type 'History'() :: ['Event'()].
-type 'CallResponse'() :: dmsl_msgpack_thrift:'Value'().
-type 'SinkHistory'() :: ['SinkEvent'()].

%%
%% enums
%%
-type enum_name() ::
    'Direction'.

%% enum 'Direction'
-type 'Direction'() ::
    'forward' |
    'backward'.

%%
%% structs, unions and exceptions
%%
-type struct_name() ::
    'Event' |
    'Machine' |
    'MachineDescriptor' |
    'ComplexAction' |
    'TimerAction' |
    'SetTimerAction' |
    'UnsetTimerAction' |
    'TagAction' |
    'Reference' |
    'MachineStateChange' |
    'CallArgs' |
    'CallResult' |
    'Signal' |
    'InitSignal' |
    'TimeoutSignal' |
    'RepairSignal' |
    'SignalArgs' |
    'SignalResult' |
    'HistoryRange' |
    'SinkEvent'.

-type exception_name() ::
    'EventNotFound' |
    'MachineNotFound' |
    'NamespaceNotFound' |
    'MachineAlreadyExists' |
    'MachineFailed' |
    'EventSinkNotFound'.

%% struct 'Event'
-type 'Event'() :: #'Event'{}.

%% struct 'Machine'
-type 'Machine'() :: #'Machine'{}.

%% struct 'MachineDescriptor'
-type 'MachineDescriptor'() :: #'MachineDescriptor'{}.

%% struct 'ComplexAction'
-type 'ComplexAction'() :: #'ComplexAction'{}.

%% union 'TimerAction'
-type 'TimerAction'() ::
    {'set_timer', 'SetTimerAction'()} |
    {'unset_timer', 'UnsetTimerAction'()}.

%% struct 'SetTimerAction'
-type 'SetTimerAction'() :: #'SetTimerAction'{}.

%% struct 'UnsetTimerAction'
-type 'UnsetTimerAction'() :: #'UnsetTimerAction'{}.

%% struct 'TagAction'
-type 'TagAction'() :: #'TagAction'{}.

%% union 'Reference'
-type 'Reference'() ::
    {'id', dmsl_base_thrift:'ID'()} |
    {'tag', dmsl_base_thrift:'Tag'()}.

%% struct 'MachineStateChange'
-type 'MachineStateChange'() :: #'MachineStateChange'{}.

%% struct 'CallArgs'
-type 'CallArgs'() :: #'CallArgs'{}.

%% struct 'CallResult'
-type 'CallResult'() :: #'CallResult'{}.

%% union 'Signal'
-type 'Signal'() ::
    {'init', 'InitSignal'()} |
    {'timeout', 'TimeoutSignal'()} |
    {'repair', 'RepairSignal'()}.

%% struct 'InitSignal'
-type 'InitSignal'() :: #'InitSignal'{}.

%% struct 'TimeoutSignal'
-type 'TimeoutSignal'() :: #'TimeoutSignal'{}.

%% struct 'RepairSignal'
-type 'RepairSignal'() :: #'RepairSignal'{}.

%% struct 'SignalArgs'
-type 'SignalArgs'() :: #'SignalArgs'{}.

%% struct 'SignalResult'
-type 'SignalResult'() :: #'SignalResult'{}.

%% struct 'HistoryRange'
-type 'HistoryRange'() :: #'HistoryRange'{}.

%% struct 'SinkEvent'
-type 'SinkEvent'() :: #'SinkEvent'{}.

%% exception 'EventNotFound'
-type 'EventNotFound'() :: #'EventNotFound'{}.

%% exception 'MachineNotFound'
-type 'MachineNotFound'() :: #'MachineNotFound'{}.

%% exception 'NamespaceNotFound'
-type 'NamespaceNotFound'() :: #'NamespaceNotFound'{}.

%% exception 'MachineAlreadyExists'
-type 'MachineAlreadyExists'() :: #'MachineAlreadyExists'{}.

%% exception 'MachineFailed'
-type 'MachineFailed'() :: #'MachineFailed'{}.

%% exception 'EventSinkNotFound'
-type 'EventSinkNotFound'() :: #'EventSinkNotFound'{}.

%%
%% services and functions
%%
-type service_name() ::
    'Processor' |
    'Automaton' |
    'EventSink'.

-type function_name() ::
    'Processor_service_functions'() |
    'Automaton_service_functions'() |
    'EventSink_service_functions'().

-type 'Processor_service_functions'() ::
    'ProcessSignal' |
    'ProcessCall'.

-export_type(['Processor_service_functions'/0]).

-type 'Automaton_service_functions'() ::
    'Start' |
    'Repair' |
    'Call' |
    'GetMachine' |
    'Remove'.

-export_type(['Automaton_service_functions'/0]).

-type 'EventSink_service_functions'() ::
    'GetHistory'.

-export_type(['EventSink_service_functions'/0]).


-type struct_flavour() :: struct | exception | union.
-type field_num() :: pos_integer().
-type field_name() :: atom().
-type field_req() :: required | optional | undefined.

-type type_ref() :: {module(), atom()}.
-type field_type() ::
    bool | byte | i16 | i32 | i64 | string | double |
{enum, type_ref()} |
{struct, struct_flavour(), type_ref()} |
{list, field_type()} |
{set, field_type()} |
{map, field_type(), field_type()}.

-type struct_field_info() ::
    {field_num(), field_req(), field_type(), field_name(), any()}.
-type struct_info() ::
    {struct, struct_flavour(), [struct_field_info()]}.

-type enum_choice() ::
    'Direction'().

-type enum_field_info() ::
    {enum_choice(), integer()}.
-type enum_info() ::
    {enum, [enum_field_info()]}.

-spec typedefs() -> [typedef_name()].

typedefs() ->
    [
        'EventBody',
        'EventBodies',
        'Args',
        'AuxState',
        'History',
        'CallResponse',
        'SinkHistory'
    ].

-spec enums() -> [enum_name()].

enums() ->
    [
        'Direction'
    ].

-spec structs() -> [struct_name()].

structs() ->
    [
        'Event',
        'Machine',
        'MachineDescriptor',
        'ComplexAction',
        'TimerAction',
        'SetTimerAction',
        'UnsetTimerAction',
        'TagAction',
        'Reference',
        'MachineStateChange',
        'CallArgs',
        'CallResult',
        'Signal',
        'InitSignal',
        'TimeoutSignal',
        'RepairSignal',
        'SignalArgs',
        'SignalResult',
        'HistoryRange',
        'SinkEvent'
    ].

-spec services() -> [service_name()].

services() ->
    [
        'Processor',
        'Automaton',
        'EventSink'
    ].

-spec namespace() -> namespace().

namespace() ->
    ''.

-spec typedef_info(typedef_name()) -> field_type() | no_return().

typedef_info('EventBody') ->
    {struct, union, {dmsl_msgpack_thrift, 'Value'}};

typedef_info('EventBodies') ->
    {list, {struct, union, {dmsl_msgpack_thrift, 'Value'}}};

typedef_info('Args') ->
    {struct, union, {dmsl_msgpack_thrift, 'Value'}};

typedef_info('AuxState') ->
    {struct, union, {dmsl_msgpack_thrift, 'Value'}};

typedef_info('History') ->
    {list, {struct, struct, {dmsl_state_processing_thrift, 'Event'}}};

typedef_info('CallResponse') ->
    {struct, union, {dmsl_msgpack_thrift, 'Value'}};

typedef_info('SinkHistory') ->
    {list, {struct, struct, {dmsl_state_processing_thrift, 'SinkEvent'}}};

typedef_info(_) -> erlang:error(badarg).

-spec enum_info(enum_name()) -> enum_info() | no_return().

enum_info('Direction') ->
    {enum, [
        {'forward', 1},
        {'backward', 2}
    ]};

enum_info(_) -> erlang:error(badarg).

-spec struct_info(struct_name() | exception_name()) -> struct_info() | no_return().

struct_info('Event') ->
    {struct, struct, [
    {1, required, i64, 'id', undefined},
    {2, required, string, 'created_at', undefined},
    {4, required, {struct, union, {dmsl_msgpack_thrift, 'Value'}}, 'event_payload', undefined}
]};

struct_info('Machine') ->
    {struct, struct, [
    {1, required, string, 'ns', undefined},
    {2, required, string, 'id', undefined},
    {3, required, {list, {struct, struct, {dmsl_state_processing_thrift, 'Event'}}}, 'history', undefined},
    {4, required, {struct, struct, {dmsl_state_processing_thrift, 'HistoryRange'}}, 'history_range', undefined},
    {5, optional, {struct, union, {dmsl_msgpack_thrift, 'Value'}}, 'aux_state', undefined},
    {6, optional, string, 'timer', undefined}
]};

struct_info('MachineDescriptor') ->
    {struct, struct, [
    {1, required, string, 'ns', undefined},
    {2, required, {struct, union, {dmsl_state_processing_thrift, 'Reference'}}, 'ref', undefined},
    {3, required, {struct, struct, {dmsl_state_processing_thrift, 'HistoryRange'}}, 'range', undefined}
]};

struct_info('ComplexAction') ->
    {struct, struct, [
    {1, optional, {struct, struct, {dmsl_state_processing_thrift, 'SetTimerAction'}}, 'set_timer', undefined},
    {3, optional, {struct, union, {dmsl_state_processing_thrift, 'TimerAction'}}, 'timer', undefined},
    {2, optional, {struct, struct, {dmsl_state_processing_thrift, 'TagAction'}}, 'tag', undefined}
]};

struct_info('TimerAction') ->
    {struct, union, [
    {1, optional, {struct, struct, {dmsl_state_processing_thrift, 'SetTimerAction'}}, 'set_timer', undefined},
    {2, optional, {struct, struct, {dmsl_state_processing_thrift, 'UnsetTimerAction'}}, 'unset_timer', undefined}
]};

struct_info('SetTimerAction') ->
    {struct, struct, [
    {1, required, {struct, union, {dmsl_base_thrift, 'Timer'}}, 'timer', undefined},
    {2, optional, {struct, struct, {dmsl_state_processing_thrift, 'HistoryRange'}}, 'range', undefined},
    {3, optional, i32, 'timeout', undefined}
]};

struct_info('UnsetTimerAction') ->
    {struct, struct, []};

struct_info('TagAction') ->
    {struct, struct, [
    {1, required, string, 'tag', undefined}
]};

struct_info('Reference') ->
    {struct, union, [
    {1, optional, string, 'id', undefined},
    {2, optional, string, 'tag', undefined}
]};

struct_info('MachineStateChange') ->
    {struct, struct, [
    {1, required, {struct, union, {dmsl_msgpack_thrift, 'Value'}}, 'aux_state', undefined},
    {2, required, {list, {struct, union, {dmsl_msgpack_thrift, 'Value'}}}, 'events', undefined}
]};

struct_info('CallArgs') ->
    {struct, struct, [
    {1, required, {struct, union, {dmsl_msgpack_thrift, 'Value'}}, 'arg', undefined},
    {2, required, {struct, struct, {dmsl_state_processing_thrift, 'Machine'}}, 'machine', undefined}
]};

struct_info('CallResult') ->
    {struct, struct, [
    {1, required, {struct, union, {dmsl_msgpack_thrift, 'Value'}}, 'response', undefined},
    {2, required, {struct, struct, {dmsl_state_processing_thrift, 'MachineStateChange'}}, 'change', undefined},
    {3, required, {struct, struct, {dmsl_state_processing_thrift, 'ComplexAction'}}, 'action', undefined}
]};

struct_info('Signal') ->
    {struct, union, [
    {1, optional, {struct, struct, {dmsl_state_processing_thrift, 'InitSignal'}}, 'init', undefined},
    {2, optional, {struct, struct, {dmsl_state_processing_thrift, 'TimeoutSignal'}}, 'timeout', undefined},
    {3, optional, {struct, struct, {dmsl_state_processing_thrift, 'RepairSignal'}}, 'repair', undefined}
]};

struct_info('InitSignal') ->
    {struct, struct, [
    {1, required, {struct, union, {dmsl_msgpack_thrift, 'Value'}}, 'arg', undefined}
]};

struct_info('TimeoutSignal') ->
    {struct, struct, []};

struct_info('RepairSignal') ->
    {struct, struct, [
    {1, optional, {struct, union, {dmsl_msgpack_thrift, 'Value'}}, 'arg', undefined}
]};

struct_info('SignalArgs') ->
    {struct, struct, [
    {1, required, {struct, union, {dmsl_state_processing_thrift, 'Signal'}}, 'signal', undefined},
    {2, required, {struct, struct, {dmsl_state_processing_thrift, 'Machine'}}, 'machine', undefined}
]};

struct_info('SignalResult') ->
    {struct, struct, [
    {1, required, {struct, struct, {dmsl_state_processing_thrift, 'MachineStateChange'}}, 'change', undefined},
    {2, required, {struct, struct, {dmsl_state_processing_thrift, 'ComplexAction'}}, 'action', undefined}
]};

struct_info('HistoryRange') ->
    {struct, struct, [
    {1, optional, i64, 'after', undefined},
    {2, optional, i32, 'limit', undefined},
    {3, optional, {enum, {dmsl_state_processing_thrift, 'Direction'}}, 'direction', 'forward'}
]};

struct_info('SinkEvent') ->
    {struct, struct, [
    {1, required, i64, 'id', undefined},
    {2, required, string, 'source_id', undefined},
    {3, required, string, 'source_ns', undefined},
    {4, required, {struct, struct, {dmsl_state_processing_thrift, 'Event'}}, 'event', undefined}
]};

struct_info('EventNotFound') ->
    {struct, exception, []};

struct_info('MachineNotFound') ->
    {struct, exception, []};

struct_info('NamespaceNotFound') ->
    {struct, exception, []};

struct_info('MachineAlreadyExists') ->
    {struct, exception, []};

struct_info('MachineFailed') ->
    {struct, exception, []};

struct_info('EventSinkNotFound') ->
    {struct, exception, []};

struct_info(_) -> erlang:error(badarg).

-spec record_name(struct_name() | exception_name()) -> atom() | no_return().

record_name('Event') ->
    'Event';

record_name('Machine') ->
    'Machine';

    record_name('MachineDescriptor') ->
    'MachineDescriptor';

    record_name('ComplexAction') ->
    'ComplexAction';

    record_name('SetTimerAction') ->
    'SetTimerAction';

    record_name('UnsetTimerAction') ->
    'UnsetTimerAction';

    record_name('TagAction') ->
    'TagAction';

    record_name('MachineStateChange') ->
    'MachineStateChange';

    record_name('CallArgs') ->
    'CallArgs';

    record_name('CallResult') ->
    'CallResult';

    record_name('InitSignal') ->
    'InitSignal';

    record_name('TimeoutSignal') ->
    'TimeoutSignal';

    record_name('RepairSignal') ->
    'RepairSignal';

    record_name('SignalArgs') ->
    'SignalArgs';

    record_name('SignalResult') ->
    'SignalResult';

    record_name('HistoryRange') ->
    'HistoryRange';

    record_name('SinkEvent') ->
    'SinkEvent';

    record_name('EventNotFound') ->
    'EventNotFound';

    record_name('MachineNotFound') ->
    'MachineNotFound';

    record_name('NamespaceNotFound') ->
    'NamespaceNotFound';

    record_name('MachineAlreadyExists') ->
    'MachineAlreadyExists';

    record_name('MachineFailed') ->
    'MachineFailed';

    record_name('EventSinkNotFound') ->
    'EventSinkNotFound';

    record_name(_) -> error(badarg).
    
    -spec functions(service_name()) -> [function_name()] | no_return().

functions('Processor') ->
    [
        'ProcessSignal',
        'ProcessCall'
    ];

functions('Automaton') ->
    [
        'Start',
        'Repair',
        'Call',
        'GetMachine',
        'Remove'
    ];

functions('EventSink') ->
    [
        'GetHistory'
    ];

functions(_) -> error(badarg).

-spec function_info(service_name(), function_name(), params_type | reply_type | exceptions) ->
    struct_info() | no_return().

function_info('Processor', 'ProcessSignal', params_type) ->
    {struct, struct, [
    {1, undefined, {struct, struct, {dmsl_state_processing_thrift, 'SignalArgs'}}, 'a', undefined}
]};
function_info('Processor', 'ProcessSignal', reply_type) ->
        {struct, struct, {dmsl_state_processing_thrift, 'SignalResult'}};
    function_info('Processor', 'ProcessSignal', exceptions) ->
        {struct, struct, []};
function_info('Processor', 'ProcessCall', params_type) ->
    {struct, struct, [
    {1, undefined, {struct, struct, {dmsl_state_processing_thrift, 'CallArgs'}}, 'a', undefined}
]};
function_info('Processor', 'ProcessCall', reply_type) ->
        {struct, struct, {dmsl_state_processing_thrift, 'CallResult'}};
    function_info('Processor', 'ProcessCall', exceptions) ->
        {struct, struct, []};

function_info('Automaton', 'Start', params_type) ->
    {struct, struct, [
    {1, undefined, string, 'ns', undefined},
    {2, undefined, string, 'id', undefined},
    {3, undefined, {struct, union, {dmsl_msgpack_thrift, 'Value'}}, 'a', undefined}
]};
function_info('Automaton', 'Start', reply_type) ->
        {struct, struct, []};
    function_info('Automaton', 'Start', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_state_processing_thrift, 'NamespaceNotFound'}}, 'ex1', undefined},
        {2, undefined, {struct, exception, {dmsl_state_processing_thrift, 'MachineAlreadyExists'}}, 'ex2', undefined},
        {3, undefined, {struct, exception, {dmsl_state_processing_thrift, 'MachineFailed'}}, 'ex3', undefined}
    ]};
function_info('Automaton', 'Repair', params_type) ->
    {struct, struct, [
    {1, undefined, {struct, struct, {dmsl_state_processing_thrift, 'MachineDescriptor'}}, 'desc', undefined},
    {2, undefined, {struct, union, {dmsl_msgpack_thrift, 'Value'}}, 'a', undefined}
]};
function_info('Automaton', 'Repair', reply_type) ->
        {struct, struct, []};
    function_info('Automaton', 'Repair', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_state_processing_thrift, 'NamespaceNotFound'}}, 'ex1', undefined},
        {2, undefined, {struct, exception, {dmsl_state_processing_thrift, 'MachineNotFound'}}, 'ex2', undefined},
        {3, undefined, {struct, exception, {dmsl_state_processing_thrift, 'MachineFailed'}}, 'ex3', undefined}
    ]};
function_info('Automaton', 'Call', params_type) ->
    {struct, struct, [
    {1, undefined, {struct, struct, {dmsl_state_processing_thrift, 'MachineDescriptor'}}, 'desc', undefined},
    {2, undefined, {struct, union, {dmsl_msgpack_thrift, 'Value'}}, 'a', undefined}
]};
function_info('Automaton', 'Call', reply_type) ->
        {struct, union, {dmsl_msgpack_thrift, 'Value'}};
    function_info('Automaton', 'Call', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_state_processing_thrift, 'NamespaceNotFound'}}, 'ex1', undefined},
        {2, undefined, {struct, exception, {dmsl_state_processing_thrift, 'MachineNotFound'}}, 'ex2', undefined},
        {3, undefined, {struct, exception, {dmsl_state_processing_thrift, 'MachineFailed'}}, 'ex3', undefined}
    ]};
function_info('Automaton', 'GetMachine', params_type) ->
    {struct, struct, [
    {1, undefined, {struct, struct, {dmsl_state_processing_thrift, 'MachineDescriptor'}}, 'desc', undefined}
]};
function_info('Automaton', 'GetMachine', reply_type) ->
        {struct, struct, {dmsl_state_processing_thrift, 'Machine'}};
    function_info('Automaton', 'GetMachine', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_state_processing_thrift, 'NamespaceNotFound'}}, 'ex1', undefined},
        {2, undefined, {struct, exception, {dmsl_state_processing_thrift, 'MachineNotFound'}}, 'ex2', undefined},
        {3, undefined, {struct, exception, {dmsl_state_processing_thrift, 'EventNotFound'}}, 'ex3', undefined}
    ]};
function_info('Automaton', 'Remove', params_type) ->
    {struct, struct, [
    {1, undefined, string, 'ns', undefined},
    {2, undefined, string, 'id', undefined}
]};
function_info('Automaton', 'Remove', reply_type) ->
        {struct, struct, []};
    function_info('Automaton', 'Remove', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_state_processing_thrift, 'NamespaceNotFound'}}, 'ex1', undefined},
        {2, undefined, {struct, exception, {dmsl_state_processing_thrift, 'MachineNotFound'}}, 'ex2', undefined}
    ]};

function_info('EventSink', 'GetHistory', params_type) ->
    {struct, struct, [
    {1, undefined, string, 'event_sink_id', undefined},
    {2, undefined, {struct, struct, {dmsl_state_processing_thrift, 'HistoryRange'}}, 'range', undefined}
]};
function_info('EventSink', 'GetHistory', reply_type) ->
        {list, {struct, struct, {dmsl_state_processing_thrift, 'SinkEvent'}}};
    function_info('EventSink', 'GetHistory', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_state_processing_thrift, 'EventSinkNotFound'}}, 'ex1', undefined},
        {2, undefined, {struct, exception, {dmsl_state_processing_thrift, 'EventNotFound'}}, 'ex2', undefined},
        {3, undefined, {struct, exception, {dmsl_base_thrift, 'InvalidRequest'}}, 'ex3', undefined}
    ]};

function_info(_Service, _Function, _InfoType) -> erlang:error(badarg).
