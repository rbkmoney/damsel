%%
%% Autogenerated by Thrift Compiler (1.0.0-dev)
%%
%% DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
%%

-module(dmsl_shitter_thrift).

-include("dmsl_shitter_thrift.hrl").

-export([namespace/0]).
-export([enums/0]).
-export([typedefs/0]).
-export([structs/0]).
-export([services/0]).
-export([typedef_info/1]).
-export([enum_info/1]).
-export([struct_info/1]).
-export([record_name/1]).
-export([functions/1]).
-export([function_info/3]).

-export_type([namespace/0]).
-export_type([typedef_name/0]).
-export_type([enum_name/0]).
-export_type([struct_name/0]).
-export_type([exception_name/0]).
-export_type([service_name/0]).
-export_type([function_name/0]).

-export_type([enum_info/0]).
-export_type([struct_info/0]).

-export_type([
    'PayoutID'/0
]).
-export_type([
    'PayoutStatus'/0
]).
-export_type([
    'TimeRange'/0,
    'Payout'/0,
    'PayoutPaymentInfo'/0,
    'PayoutSearchCriteria'/0
]).

-type namespace() :: 'shitter'.

%%
%% typedefs
%%
-type typedef_name() ::
    'PayoutID'.

-type 'PayoutID'() :: integer().

%%
%% enums
%%
-type enum_name() ::
    'PayoutStatus'.

%% enum 'PayoutStatus'
-type 'PayoutStatus'() ::
    created |
    ready |
    accepted |
    canceled.

%%
%% structs, unions and exceptions
%%
-type struct_name() ::
    'TimeRange' |
    'Payout' |
    'PayoutPaymentInfo' |
    'PayoutSearchCriteria'.

-type exception_name() :: none().

%% struct 'TimeRange'
-type 'TimeRange'() :: #'shitter_TimeRange'{}.

%% struct 'Payout'
-type 'Payout'() :: #'shitter_Payout'{}.

%% struct 'PayoutPaymentInfo'
-type 'PayoutPaymentInfo'() :: #'shitter_PayoutPaymentInfo'{}.

%% struct 'PayoutSearchCriteria'
-type 'PayoutSearchCriteria'() :: #'shitter_PayoutSearchCriteria'{}.

%%
%% services and functions
%%
-type service_name() ::
    'Shitter'.

-type function_name() ::
    'Shitter_service_functions'().

-type 'Shitter_service_functions'() ::
    'GeneratePayout' |
    'RegenerateReport' |
    'AcceptOneSPayout' |
    'cancelPayout' |
    'GetPayouts' |
    'GetPayments'.

-export_type(['Shitter_service_functions'/0]).


-type struct_flavour() :: struct | exception | union.
-type field_num() :: pos_integer().
-type field_name() :: atom().
-type field_req() :: required | optional | undefined.

-type type_ref() :: {module(), atom()}.
-type field_type() ::
    bool | byte | i16 | i32 | i64 | string | double |
{enum, type_ref()} |
{struct, struct_flavour(), type_ref()} |
{list, field_type()} |
{set, field_type()} |
{map, field_type(), field_type()}.

-type struct_field_info() ::
    {field_num(), field_req(), field_type(), field_name(), any()}.
-type struct_info() ::
    {struct, struct_flavour(), [struct_field_info()]}.

-type enum_choice() ::
    'PayoutStatus'().

-type enum_field_info() ::
    {enum_choice(), integer()}.
-type enum_info() ::
    {enum, [enum_field_info()]}.

-spec typedefs() -> [typedef_name()].

typedefs() ->
    [
        'PayoutID'
    ].

-spec enums() -> [enum_name()].

enums() ->
    [
        'PayoutStatus'
    ].

-spec structs() -> [struct_name()].

structs() ->
    [
        'TimeRange',
        'Payout',
        'PayoutPaymentInfo',
        'PayoutSearchCriteria'
    ].

-spec services() -> [service_name()].

services() ->
    [
        'Shitter'
    ].

-spec namespace() -> namespace().

namespace() ->
    'shitter'.

-spec typedef_info(typedef_name()) -> field_type() | no_return().

typedef_info('PayoutID') ->
    i64;

typedef_info(_) -> erlang:error(badarg).

-spec enum_info(enum_name()) -> enum_info() | no_return().

enum_info('PayoutStatus') ->
    {enum, [
        {created, 0},
        {ready, 1},
        {accepted, 2},
        {canceled, 3}
    ]};

enum_info(_) -> erlang:error(badarg).

-spec struct_info(struct_name() | exception_name()) -> struct_info() | no_return().

struct_info('TimeRange') ->
    {struct, struct, [
    {1, required, string, 'from_time', undefined},
    {2, optional, string, 'to_time', undefined}
]};

struct_info('Payout') ->
    {struct, struct, [
    {1, required, i64, 'id', undefined},
    {2, required, {enum, {dmsl_shitter_thrift, 'PayoutStatus'}}, 'status', undefined},
    {3, required, string, 'from_time', undefined},
    {4, required, string, 'to_time', undefined},
    {6, required, string, 'ones_status', undefined},
    {8, optional, string, 'ones_report', undefined},
    {9, optional, string, 'created_at', undefined}
]};

struct_info('PayoutPaymentInfo') ->
    {struct, struct, [
    {1, required, string, 'id', undefined},
    {2, required, string, 'invoice_id', undefined},
    {3, required, string, 'payment_id', undefined},
    {4, required, string, 'party_id', undefined},
    {5, required, string, 'shop_id', undefined},
    {6, required, string, 'amount', undefined},
    {7, required, string, 'provider_comission', undefined},
    {8, required, string, 'rbk_comission', undefined},
    {9, optional, string, 'payout_id', undefined},
    {10, optional, string, 'created_at', undefined}
]};

struct_info('PayoutSearchCriteria') ->
    {struct, struct, [
    {1, optional, {enum, {dmsl_shitter_thrift, 'PayoutStatus'}}, 'status', undefined},
    {2, optional, {struct, struct, {dmsl_shitter_thrift, 'TimeRange'}}, 'timeRange', undefined},
    {3, optional, {list, i64}, 'payoutIDs', undefined}
]};

struct_info(_) -> erlang:error(badarg).

-spec record_name(struct_name() | exception_name()) -> atom() | no_return().

record_name('TimeRange') ->
    'shitter_TimeRange';

record_name('Payout') ->
    'shitter_Payout';

    record_name('PayoutPaymentInfo') ->
    'shitter_PayoutPaymentInfo';

    record_name('PayoutSearchCriteria') ->
    'shitter_PayoutSearchCriteria';

    record_name(_) -> error(badarg).
    
    -spec functions(service_name()) -> [function_name()] | no_return().

functions('Shitter') ->
    [
        'GeneratePayout',
        'RegenerateReport',
        'AcceptOneSPayout',
        'cancelPayout',
        'GetPayouts',
        'GetPayments'
    ];

functions(_) -> error(badarg).

-spec function_info(service_name(), function_name(), params_type | reply_type | exceptions) ->
    struct_info() | no_return().

function_info('Shitter', 'GeneratePayout', params_type) ->
    {struct, struct, [
    {1, undefined, {struct, struct, {dmsl_shitter_thrift, 'TimeRange'}}, 'timeRange', undefined}
]};
function_info('Shitter', 'GeneratePayout', reply_type) ->
        i64;
    function_info('Shitter', 'GeneratePayout', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_base_thrift, 'InvalidRequest'}}, 'ex1', undefined}
    ]};
function_info('Shitter', 'RegenerateReport', params_type) ->
    {struct, struct, [
    {1, undefined, i64, 'payoutID', undefined}
]};
function_info('Shitter', 'RegenerateReport', reply_type) ->
        i64;
    function_info('Shitter', 'RegenerateReport', exceptions) ->
        {struct, struct, []};
function_info('Shitter', 'AcceptOneSPayout', params_type) ->
    {struct, struct, [
    {1, undefined, i64, 'payoutID', undefined}
]};
function_info('Shitter', 'AcceptOneSPayout', reply_type) ->
        bool;
    function_info('Shitter', 'AcceptOneSPayout', exceptions) ->
        {struct, struct, []};
function_info('Shitter', 'cancelPayout', params_type) ->
    {struct, struct, [
    {1, undefined, i64, 'payoutID', undefined}
]};
function_info('Shitter', 'cancelPayout', reply_type) ->
        {struct, struct, []};
    function_info('Shitter', 'cancelPayout', exceptions) ->
        {struct, struct, []};
function_info('Shitter', 'GetPayouts', params_type) ->
    {struct, struct, [
    {1, undefined, {struct, struct, {dmsl_shitter_thrift, 'PayoutSearchCriteria'}}, 'searchCriteria', undefined}
]};
function_info('Shitter', 'GetPayouts', reply_type) ->
        {list, {struct, struct, {dmsl_shitter_thrift, 'Payout'}}};
    function_info('Shitter', 'GetPayouts', exceptions) ->
        {struct, struct, []};
function_info('Shitter', 'GetPayments', params_type) ->
    {struct, struct, [
    {1, undefined, i64, 'payoutID', undefined}
]};
function_info('Shitter', 'GetPayments', reply_type) ->
        {list, {struct, struct, {dmsl_shitter_thrift, 'PayoutPaymentInfo'}}};
    function_info('Shitter', 'GetPayments', exceptions) ->
        {struct, struct, []};

function_info(_Service, _Function, _InfoType) -> erlang:error(badarg).
