%%
%% Autogenerated by Thrift Compiler (1.0.0-dev)
%%
%% DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
%%

-module(dmsl_payment_tool_token_thrift).

-include("dmsl_payment_tool_token_thrift.hrl").

-export([namespace/0]).
-export([enums/0]).
-export([typedefs/0]).
-export([structs/0]).
-export([services/0]).
-export([typedef_info/1]).
-export([enum_info/1]).
-export([struct_info/1]).
-export([record_name/1]).
-export([functions/1]).
-export([function_info/3]).

-export_type([namespace/0]).
-export_type([typedef_name/0]).
-export_type([enum_name/0]).
-export_type([struct_name/0]).
-export_type([exception_name/0]).
-export_type([service_name/0]).
-export_type([function_name/0]).

-export_type([enum_info/0]).
-export_type([struct_info/0]).

-export_type([
    'PaymentToolToken'/0,
    'BankCardPayload'/0,
    'PaymentTerminalPayload'/0,
    'DigitalWalletPayload'/0,
    'CryptoCurrencyPayload'/0,
    'MobileCommercePayload'/0
]).

-type namespace() :: 'ptt'.

%%
%% typedefs
%%
-type typedef_name() :: none().


%%
%% enums
%%
-type enum_name() :: none().

%%
%% structs, unions and exceptions
%%
-type struct_name() ::
    'PaymentToolToken' |
    'BankCardPayload' |
    'PaymentTerminalPayload' |
    'DigitalWalletPayload' |
    'CryptoCurrencyPayload' |
    'MobileCommercePayload'.

-type exception_name() :: none().

%% union 'PaymentToolToken'
-type 'PaymentToolToken'() ::
    {'bank_card_payload', 'BankCardPayload'()} |
    {'payment_terminal_payload', 'PaymentTerminalPayload'()} |
    {'digital_wallet_payload', 'DigitalWalletPayload'()} |
    {'crypto_currency_payload', 'CryptoCurrencyPayload'()} |
    {'mobile_commerce_payload', 'MobileCommercePayload'()}.

%% struct 'BankCardPayload'
-type 'BankCardPayload'() :: #'ptt_BankCardPayload'{}.

%% struct 'PaymentTerminalPayload'
-type 'PaymentTerminalPayload'() :: #'ptt_PaymentTerminalPayload'{}.

%% struct 'DigitalWalletPayload'
-type 'DigitalWalletPayload'() :: #'ptt_DigitalWalletPayload'{}.

%% struct 'CryptoCurrencyPayload'
-type 'CryptoCurrencyPayload'() :: #'ptt_CryptoCurrencyPayload'{}.

%% struct 'MobileCommercePayload'
-type 'MobileCommercePayload'() :: #'ptt_MobileCommercePayload'{}.

%%
%% services and functions
%%
-type service_name() :: none().

-type function_name() :: none().


-type struct_flavour() :: struct | exception | union.
-type field_num() :: pos_integer().
-type field_name() :: atom().
-type field_req() :: required | optional | undefined.

-type type_ref() :: {module(), atom()}.
-type field_type() ::
    bool | byte | i16 | i32 | i64 | string | double |
    {enum, type_ref()} |
    {struct, struct_flavour(), type_ref()} |
    {list, field_type()} |
    {set, field_type()} |
    {map, field_type(), field_type()}.

-type struct_field_info() ::
    {field_num(), field_req(), field_type(), field_name(), any()}.
-type struct_info() ::
    {struct, struct_flavour(), [struct_field_info()]}.

-type enum_choice() :: none().

-type enum_field_info() ::
    {enum_choice(), integer()}.
-type enum_info() ::
    {enum, [enum_field_info()]}.

-spec typedefs() -> [].

typedefs() ->
    [].

-spec enums() -> [].

enums() ->
    [].

-spec structs() -> [struct_name()].

structs() ->
    [
        'PaymentToolToken',
        'BankCardPayload',
        'PaymentTerminalPayload',
        'DigitalWalletPayload',
        'CryptoCurrencyPayload',
        'MobileCommercePayload'
    ].

-spec services() -> [].

services() ->
    [].

-spec namespace() -> namespace().

namespace() ->
    'ptt'.

-spec typedef_info(_) -> no_return().

typedef_info(_) -> erlang:error(badarg).

-spec enum_info(_) -> no_return().

enum_info(_) -> erlang:error(badarg).

-spec struct_info(struct_name() | exception_name()) -> struct_info() | no_return().

struct_info('PaymentToolToken') ->
    {struct, union, [
        {1, optional, {struct, struct, {dmsl_payment_tool_token_thrift, 'BankCardPayload'}}, 'bank_card_payload', undefined},
        {2, optional, {struct, struct, {dmsl_payment_tool_token_thrift, 'PaymentTerminalPayload'}}, 'payment_terminal_payload', undefined},
        {3, optional, {struct, struct, {dmsl_payment_tool_token_thrift, 'DigitalWalletPayload'}}, 'digital_wallet_payload', undefined},
        {4, optional, {struct, struct, {dmsl_payment_tool_token_thrift, 'CryptoCurrencyPayload'}}, 'crypto_currency_payload', undefined},
        {5, optional, {struct, struct, {dmsl_payment_tool_token_thrift, 'MobileCommercePayload'}}, 'mobile_commerce_payload', undefined}
    ]};

struct_info('BankCardPayload') ->
    {struct, struct, [
        {1, required, {struct, struct, {dmsl_domain_thrift, 'BankCard'}}, 'bank_card', undefined}
    ]};

struct_info('PaymentTerminalPayload') ->
    {struct, struct, [
        {1, required, {struct, struct, {dmsl_domain_thrift, 'PaymentTerminal'}}, 'payment_terminal', undefined}
    ]};

struct_info('DigitalWalletPayload') ->
    {struct, struct, [
        {1, required, {struct, struct, {dmsl_domain_thrift, 'DigitalWallet'}}, 'digital_wallet', undefined}
    ]};

struct_info('CryptoCurrencyPayload') ->
    {struct, struct, [
        {1, required, {enum, {dmsl_domain_thrift, 'CryptoCurrency'}}, 'crypto_currency', undefined}
    ]};

struct_info('MobileCommercePayload') ->
    {struct, struct, [
        {1, required, {struct, struct, {dmsl_domain_thrift, 'MobileCommerce'}}, 'mobile_commerce', undefined}
    ]};

struct_info(_) -> erlang:error(badarg).

-spec record_name(struct_name() | exception_name()) -> atom() | no_return().

record_name('BankCardPayload') ->
    'ptt_BankCardPayload';

record_name('PaymentTerminalPayload') ->
    'ptt_PaymentTerminalPayload';

record_name('DigitalWalletPayload') ->
    'ptt_DigitalWalletPayload';

record_name('CryptoCurrencyPayload') ->
    'ptt_CryptoCurrencyPayload';

record_name('MobileCommercePayload') ->
    'ptt_MobileCommercePayload';

record_name(_) -> error(badarg).

-spec functions(_) -> no_return().

functions(_) -> error(badarg).

-spec function_info(_,_,_) -> no_return().

function_info(_Service, _Function, _InfoType) -> erlang:error(badarg).
