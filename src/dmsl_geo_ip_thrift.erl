%%
%% Autogenerated by Thrift Compiler (1.0.0-dev)
%%
%% DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
%%

-module(dmsl_geo_ip_thrift).

-include("dmsl_geo_ip_thrift.hrl").

-export([namespace/0]).
-export([enums/0]).
-export([typedefs/0]).
-export([structs/0]).
-export([services/0]).
-export([typedef_info/1]).
-export([enum_info/1]).
-export([struct_info/1]).
-export([record_name/1]).
-export([functions/1]).
-export([function_info/3]).

-export_type([namespace/0]).
-export_type([typedef_name/0]).
-export_type([enum_name/0]).
-export_type([struct_name/0]).
-export_type([exception_name/0]).
-export_type([service_name/0]).
-export_type([function_name/0]).

-export_type([enum_info/0]).
-export_type([struct_info/0]).

-export_type([
    'GeoID'/0,
    'GeoIsoCode'/0
]).
-export_type([
    'LocationInfo'/0,
    'SubdivisionInfo'/0,
    'GeoIDInfo'/0
]).

-type namespace() :: 'geo_ip'.

%%
%% typedefs
%%
-type typedef_name() ::
    'GeoID' |
    'GeoIsoCode'.

-type 'GeoID'() :: integer().
-type 'GeoIsoCode'() :: binary().

%%
%% enums
%%
-type enum_name() :: none().

%%
%% structs, unions and exceptions
%%
-type struct_name() ::
    'LocationInfo' |
    'SubdivisionInfo' |
    'GeoIDInfo'.

-type exception_name() :: none().

%% struct 'LocationInfo'
-type 'LocationInfo'() :: #'geo_ip_LocationInfo'{}.

%% struct 'SubdivisionInfo'
-type 'SubdivisionInfo'() :: #'geo_ip_SubdivisionInfo'{}.

%% struct 'GeoIDInfo'
-type 'GeoIDInfo'() :: #'geo_ip_GeoIDInfo'{}.

%%
%% services and functions
%%
-type service_name() ::
    'GeoIpService'.

-type function_name() ::
    'GeoIpService_service_functions'().

-type 'GeoIpService_service_functions'() ::
    'GetLocation' |
    'GetLocations' |
    'GetLocationInfo' |
    'GetLocationName' |
    'GetLocationIsoCode'.

-export_type(['GeoIpService_service_functions'/0]).


-type struct_flavour() :: struct | exception | union.
-type field_num() :: pos_integer().
-type field_name() :: atom().
-type field_req() :: required | optional | undefined.

-type type_ref() :: {module(), atom()}.
-type field_type() ::
    bool | byte | i16 | i32 | i64 | string | double |
    {enum, type_ref()} |
    {struct, struct_flavour(), type_ref()} |
    {list, field_type()} |
    {set, field_type()} |
    {map, field_type(), field_type()}.

-type struct_field_info() ::
    {field_num(), field_req(), field_type(), field_name(), any()}.
-type struct_info() ::
    {struct, struct_flavour(), [struct_field_info()]}.

-type enum_choice() :: none().

-type enum_field_info() ::
    {enum_choice(), integer()}.
-type enum_info() ::
    {enum, [enum_field_info()]}.

-spec typedefs() -> [typedef_name()].

typedefs() ->
    [
        'GeoID',
        'GeoIsoCode'
    ].

-spec enums() -> [].

enums() ->
    [].

-spec structs() -> [struct_name()].

structs() ->
    [
        'LocationInfo',
        'SubdivisionInfo',
        'GeoIDInfo'
    ].

-spec services() -> [service_name()].

services() ->
    [
        'GeoIpService'
    ].

-spec namespace() -> namespace().

namespace() ->
    'geo_ip'.

-spec typedef_info(typedef_name()) -> field_type() | no_return().

typedef_info('GeoID') ->
    i32;

typedef_info('GeoIsoCode') ->
    string;

typedef_info(_) -> erlang:error(badarg).

-spec enum_info(_) -> no_return().

enum_info(_) -> erlang:error(badarg).

-spec struct_info(struct_name() | exception_name()) -> struct_info() | no_return().

struct_info('LocationInfo') ->
    {struct, struct, [
        {1, required, i32, 'city_geo_id', undefined},
        {2, required, i32, 'country_geo_id', undefined},
        {3, optional, string, 'raw_response', undefined}
    ]};

struct_info('SubdivisionInfo') ->
    {struct, struct, [
        {1, required, i16, 'level', undefined},
        {2, required, string, 'subdivision_name', undefined}
    ]};

struct_info('GeoIDInfo') ->
    {struct, struct, [
        {2, required, string, 'country_name', undefined},
        {3, optional, {set, {struct, struct, {dmsl_geo_ip_thrift, 'SubdivisionInfo'}}}, 'subdivisions', undefined},
        {4, optional, string, 'city_name', undefined}
    ]};

struct_info(_) -> erlang:error(badarg).

-spec record_name(struct_name() | exception_name()) -> atom() | no_return().

record_name('LocationInfo') ->
    'geo_ip_LocationInfo';

record_name('SubdivisionInfo') ->
    'geo_ip_SubdivisionInfo';

record_name('GeoIDInfo') ->
    'geo_ip_GeoIDInfo';

record_name(_) -> error(badarg).

-spec functions(service_name()) -> [function_name()] | no_return().

functions('GeoIpService') ->
    [
        'GetLocation',
        'GetLocations',
        'GetLocationInfo',
        'GetLocationName',
        'GetLocationIsoCode'
    ];

functions(_) -> error(badarg).

-spec function_info(service_name(), function_name(), params_type | reply_type | exceptions) ->
    struct_info() | no_return().

function_info('GeoIpService', 'GetLocation', params_type) ->
    {struct, struct, [
        {1, undefined, string, 'ip', undefined}
    ]};
function_info('GeoIpService', 'GetLocation', reply_type) ->
    {struct, struct, {dmsl_geo_ip_thrift, 'LocationInfo'}};
function_info('GeoIpService', 'GetLocation', exceptions) ->
    {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_base_thrift, 'InvalidRequest'}}, 'ex1', undefined}
    ]};
function_info('GeoIpService', 'GetLocations', params_type) ->
    {struct, struct, [
        {1, undefined, {set, string}, 'ip', undefined}
    ]};
function_info('GeoIpService', 'GetLocations', reply_type) ->
    {map, string, {struct, struct, {dmsl_geo_ip_thrift, 'LocationInfo'}}};
function_info('GeoIpService', 'GetLocations', exceptions) ->
    {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_base_thrift, 'InvalidRequest'}}, 'ex1', undefined}
    ]};
function_info('GeoIpService', 'GetLocationInfo', params_type) ->
    {struct, struct, [
        {1, undefined, {set, i32}, 'geo_ids', undefined},
        {2, undefined, string, 'lang', undefined}
    ]};
function_info('GeoIpService', 'GetLocationInfo', reply_type) ->
    {map, i32, {struct, struct, {dmsl_geo_ip_thrift, 'GeoIDInfo'}}};
function_info('GeoIpService', 'GetLocationInfo', exceptions) ->
    {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_base_thrift, 'InvalidRequest'}}, 'ex1', undefined}
    ]};
function_info('GeoIpService', 'GetLocationName', params_type) ->
    {struct, struct, [
        {1, undefined, {set, i32}, 'geo_ids', undefined},
        {2, undefined, string, 'lang', undefined}
    ]};
function_info('GeoIpService', 'GetLocationName', reply_type) ->
    {map, i32, string};
function_info('GeoIpService', 'GetLocationName', exceptions) ->
    {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_base_thrift, 'InvalidRequest'}}, 'ex1', undefined}
    ]};
function_info('GeoIpService', 'GetLocationIsoCode', params_type) ->
    {struct, struct, [
        {1, undefined, string, 'ip', undefined}
    ]};
function_info('GeoIpService', 'GetLocationIsoCode', reply_type) ->
    string;
function_info('GeoIpService', 'GetLocationIsoCode', exceptions) ->
    {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_base_thrift, 'InvalidRequest'}}, 'ex1', undefined}
    ]};

function_info(_Service, _Function, _InfoType) -> erlang:error(badarg).
