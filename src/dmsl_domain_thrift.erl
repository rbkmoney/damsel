%%
%% Autogenerated by Thrift Compiler (1.0.0-dev)
%%
%% DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
%%

-module(dmsl_domain_thrift).

-include("dmsl_domain_thrift.hrl").

-export([namespace/0]).
-export([enums/0]).
-export([typedefs/0]).
-export([structs/0]).
-export([services/0]).
-export([typedef_info/1]).
-export([enum_info/1]).
-export([struct_info/1]).
-export([record_name/1]).
-export([functions/1]).
-export([function_info/3]).

-export_type([namespace/0]).
-export_type([typedef_name/0]).
-export_type([enum_name/0]).
-export_type([struct_name/0]).
-export_type([exception_name/0]).
-export_type([service_name/0]).
-export_type([function_name/0]).

-export_type([enum_info/0]).
-export_type([struct_info/0]).

-export_type([
    'DataRevision'/0,
    'ObjectID'/0,
    'Metadata'/0,
    'Amount'/0,
    'AccountID'/0,
    'InvoiceID'/0,
    'InvoicePaymentID'/0,
    'InvoicePaymentRefundID'/0,
    'InvoicePaymentAdjustmentID'/0,
    'InvoiceContext'/0,
    'InvoicePaymentContext'/0,
    'PaymentSessionID'/0,
    'Fingerprint'/0,
    'IPAddress'/0,
    'InvoiceTemplateID'/0,
    'PartyID'/0,
    'PartyRevision'/0,
    'PartyMetaNamespace'/0,
    'PartyMetaData'/0,
    'PartyMeta'/0,
    'ShopID'/0,
    'PayoutToolID'/0,
    'ContractID'/0,
    'ContractAdjustmentID'/0,
    'CurrencySymbolicCode'/0,
    'CalendarHolidaySet'/0,
    'CustomerID'/0,
    'CustomerBindingID'/0,
    'RecurrentPaymentToolID'/0,
    'Token'/0,
    'DigitalWalletID'/0,
    'CashFlowContext'/0,
    'CashFlow'/0,
    'FinalCashFlow'/0,
    'ProviderAccountSet'/0,
    'ProxyOptions'/0,
    'Domain'/0
]).
-export_type([
    'OnHoldExpiration'/0,
    'RiskScore'/0,
    'CategoryType'/0,
    'PayoutMethod'/0,
    'Residence'/0,
    'BankCardPaymentSystem'/0,
    'TerminalPaymentProvider'/0,
    'DigitalWalletProvider'/0,
    'MerchantCashFlowAccount'/0,
    'ProviderCashFlowAccount'/0,
    'SystemCashFlowAccount'/0,
    'ExternalCashFlowAccount'/0,
    'CashFlowConstant'/0,
    'RoundingMethod'/0,
    'PaymentInstitutionRealm'/0
]).
-export_type([
    'ContactInfo'/0,
    'OperationFailure'/0,
    'OperationTimeout'/0,
    'ExternalFailure'/0,
    'Cash'/0,
    'TransactionInfo'/0,
    'Invoice'/0,
    'InvoiceDetails'/0,
    'InvoiceCart'/0,
    'InvoiceLine'/0,
    'InvoiceUnpaid'/0,
    'InvoicePaid'/0,
    'InvoiceCancelled'/0,
    'InvoiceFulfilled'/0,
    'InvoiceStatus'/0,
    'InvoicePayment'/0,
    'InvoicePaymentPending'/0,
    'InvoicePaymentProcessed'/0,
    'InvoicePaymentCaptured'/0,
    'InvoicePaymentCancelled'/0,
    'InvoicePaymentRefunded'/0,
    'InvoicePaymentFailed'/0,
    'InvoiceTemplate'/0,
    'InvoiceTemplateDetails'/0,
    'InvoiceTemplateProduct'/0,
    'InvoiceTemplateProductPrice'/0,
    'InvoiceTemplateCostUnlimited'/0,
    'InvoicePaymentStatus'/0,
    'TargetInvoicePaymentStatus'/0,
    'Payer'/0,
    'PaymentResourcePayer'/0,
    'CustomerPayer'/0,
    'ClientInfo'/0,
    'PaymentRoute'/0,
    'InvoicePaymentAdjustment'/0,
    'InvoicePaymentAdjustmentPending'/0,
    'InvoicePaymentAdjustmentCaptured'/0,
    'InvoicePaymentAdjustmentCancelled'/0,
    'InvoicePaymentAdjustmentStatus'/0,
    'InvoicePaymentFlow'/0,
    'InvoicePaymentFlowInstant'/0,
    'InvoicePaymentFlowHold'/0,
    'InvoicePaymentRefund'/0,
    'InvoicePaymentRefundStatus'/0,
    'InvoicePaymentRefundPending'/0,
    'InvoicePaymentRefundSucceeded'/0,
    'InvoicePaymentRefundFailed'/0,
    'Blocking'/0,
    'Unblocked'/0,
    'Blocked'/0,
    'Suspension'/0,
    'Active'/0,
    'Suspended'/0,
    'Party'/0,
    'PartyContactInfo'/0,
    'Shop'/0,
    'ShopAccount'/0,
    'ShopDetails'/0,
    'ShopLocation'/0,
    'ContractorRef'/0,
    'Contractor'/0,
    'RegisteredUser'/0,
    'LegalEntity'/0,
    'RussianLegalEntity'/0,
    'InternationalLegalEntity'/0,
    'RussianBankAccount'/0,
    'InternationalBankAccount'/0,
    'PayoutTool'/0,
    'PayoutToolInfo'/0,
    'Contract'/0,
    'LegalAgreement'/0,
    'ContractStatus'/0,
    'ContractActive'/0,
    'ContractTerminated'/0,
    'ContractExpired'/0,
    'CategoryRef'/0,
    'Category'/0,
    'ContractTemplateRef'/0,
    'ContractTemplate'/0,
    'Lifetime'/0,
    'LifetimeInterval'/0,
    'ContractTemplateSelector'/0,
    'ContractTemplateDecision'/0,
    'ContractAdjustment'/0,
    'TermSet'/0,
    'TimedTermSet'/0,
    'TermSetHierarchy'/0,
    'TermSetHierarchyRef'/0,
    'PaymentsServiceTerms'/0,
    'PaymentHoldsServiceTerms'/0,
    'PaymentRefundsServiceTerms'/0,
    'RecurrentPaytoolsServiceTerms'/0,
    'PayoutsServiceTerms'/0,
    'PayoutCompilationPolicy'/0,
    'PayoutMethodRef'/0,
    'PayoutMethodDefinition'/0,
    'PayoutMethodSelector'/0,
    'PayoutMethodDecision'/0,
    'CurrencyRef'/0,
    'Currency'/0,
    'CurrencySelector'/0,
    'CurrencyDecision'/0,
    'CategorySelector'/0,
    'CategoryDecision'/0,
    'ScheduleRef'/0,
    'Schedule'/0,
    'ScheduleSelector'/0,
    'ScheduleDecision'/0,
    'CalendarRef'/0,
    'Calendar'/0,
    'CalendarHoliday'/0,
    'CashRange'/0,
    'CashBound'/0,
    'CashLimitSelector'/0,
    'CashLimitDecision'/0,
    'PaymentMethod'/0,
    'PaymentTool'/0,
    'DisposablePaymentResource'/0,
    'BankCard'/0,
    'PaymentTerminal'/0,
    'DigitalWallet'/0,
    'BankCardBINRangeRef'/0,
    'BankCardBINRange'/0,
    'PaymentMethodRef'/0,
    'PaymentMethodDefinition'/0,
    'PaymentMethodSelector'/0,
    'PaymentMethodDecision'/0,
    'HoldLifetime'/0,
    'HoldLifetimeSelector'/0,
    'HoldLifetimeDecision'/0,
    'CashFlowAccount'/0,
    'CashFlowPosting'/0,
    'FinalCashFlowPosting'/0,
    'FinalCashFlowAccount'/0,
    'CashVolume'/0,
    'CashVolumeFixed'/0,
    'CashVolumeShare'/0,
    'CashVolumeProduct'/0,
    'CashFlowSelector'/0,
    'CashFlowDecision'/0,
    'ProviderRef'/0,
    'Provider'/0,
    'PaymentsProvisionTerms'/0,
    'PaymentHoldsProvisionTerms'/0,
    'PaymentRefundsProvisionTerms'/0,
    'RecurrentPaytoolsProvisionTerms'/0,
    'CashValueSelector'/0,
    'CashValueDecision'/0,
    'ProviderAccount'/0,
    'ProviderSelector'/0,
    'ProviderDecision'/0,
    'TerminalRef'/0,
    'InspectorRef'/0,
    'Inspector'/0,
    'InspectorSelector'/0,
    'InspectorDecision'/0,
    'Terminal'/0,
    'TerminalSelector'/0,
    'TerminalDecision'/0,
    'Predicate'/0,
    'Condition'/0,
    'PaymentToolCondition'/0,
    'BankCardCondition'/0,
    'BankCardConditionDefinition'/0,
    'PaymentTerminalCondition'/0,
    'PaymentTerminalConditionDefinition'/0,
    'DigitalWalletCondition'/0,
    'DigitalWalletConditionDefinition'/0,
    'PartyCondition'/0,
    'PartyConditionDefinition'/0,
    'ProxyRef'/0,
    'ProxyDefinition'/0,
    'Proxy'/0,
    'SystemAccountSetRef'/0,
    'SystemAccountSet'/0,
    'SystemAccount'/0,
    'SystemAccountSetSelector'/0,
    'SystemAccountSetDecision'/0,
    'ExternalAccountSetRef'/0,
    'ExternalAccountSet'/0,
    'ExternalAccount'/0,
    'ExternalAccountSetSelector'/0,
    'ExternalAccountSetDecision'/0,
    'PaymentInstitutionRef'/0,
    'PaymentInstitution'/0,
    'ContractPaymentInstitutionDefaults'/0,
    'PartyPrototypeRef'/0,
    'PartyPrototype'/0,
    'ShopPrototype'/0,
    'ContractPrototype'/0,
    'PayoutToolPrototype'/0,
    'GlobalsRef'/0,
    'Globals'/0,
    'Dummy'/0,
    'DummyRef'/0,
    'DummyObject'/0,
    'DummyLink'/0,
    'DummyLinkRef'/0,
    'DummyLinkObject'/0,
    'ContractTemplateObject'/0,
    'TermSetHierarchyObject'/0,
    'CategoryObject'/0,
    'CurrencyObject'/0,
    'ScheduleObject'/0,
    'CalendarObject'/0,
    'PaymentMethodObject'/0,
    'PayoutMethodObject'/0,
    'BankCardBINRangeObject'/0,
    'ContractorObject'/0,
    'ProviderObject'/0,
    'TerminalObject'/0,
    'InspectorObject'/0,
    'PaymentInstitutionObject'/0,
    'SystemAccountSetObject'/0,
    'ExternalAccountSetObject'/0,
    'ProxyObject'/0,
    'PartyPrototypeObject'/0,
    'GlobalsObject'/0,
    'Reference'/0,
    'DomainObject'/0
]).

-type namespace() :: 'domain'.

%%
%% typedefs
%%
-type typedef_name() ::
    'DataRevision' |
    'ObjectID' |
    'Metadata' |
    'Amount' |
    'AccountID' |
    'InvoiceID' |
    'InvoicePaymentID' |
    'InvoicePaymentRefundID' |
    'InvoicePaymentAdjustmentID' |
    'InvoiceContext' |
    'InvoicePaymentContext' |
    'PaymentSessionID' |
    'Fingerprint' |
    'IPAddress' |
    'InvoiceTemplateID' |
    'PartyID' |
    'PartyRevision' |
    'PartyMetaNamespace' |
    'PartyMetaData' |
    'PartyMeta' |
    'ShopID' |
    'PayoutToolID' |
    'ContractID' |
    'ContractAdjustmentID' |
    'CurrencySymbolicCode' |
    'CalendarHolidaySet' |
    'CustomerID' |
    'CustomerBindingID' |
    'RecurrentPaymentToolID' |
    'Token' |
    'DigitalWalletID' |
    'CashFlowContext' |
    'CashFlow' |
    'FinalCashFlow' |
    'ProviderAccountSet' |
    'ProxyOptions' |
    'Domain'.

-type 'DataRevision'() :: integer().
-type 'ObjectID'() :: integer().
-type 'Metadata'() :: dmsl_json_thrift:'Value'().
-type 'Amount'() :: integer().
-type 'AccountID'() :: integer().
-type 'InvoiceID'() :: dmsl_base_thrift:'ID'().
-type 'InvoicePaymentID'() :: dmsl_base_thrift:'ID'().
-type 'InvoicePaymentRefundID'() :: dmsl_base_thrift:'ID'().
-type 'InvoicePaymentAdjustmentID'() :: dmsl_base_thrift:'ID'().
-type 'InvoiceContext'() :: dmsl_base_thrift:'Content'().
-type 'InvoicePaymentContext'() :: dmsl_base_thrift:'Content'().
-type 'PaymentSessionID'() :: binary().
-type 'Fingerprint'() :: binary().
-type 'IPAddress'() :: binary().
-type 'InvoiceTemplateID'() :: dmsl_base_thrift:'ID'().
-type 'PartyID'() :: dmsl_base_thrift:'ID'().
-type 'PartyRevision'() :: integer().
-type 'PartyMetaNamespace'() :: binary().
-type 'PartyMetaData'() :: dmsl_msgpack_thrift:'Value'().
-type 'PartyMeta'() :: #{'PartyMetaNamespace'() => 'PartyMetaData'()}.
-type 'ShopID'() :: dmsl_base_thrift:'ID'().
-type 'PayoutToolID'() :: dmsl_base_thrift:'ID'().
-type 'ContractID'() :: dmsl_base_thrift:'ID'().
-type 'ContractAdjustmentID'() :: dmsl_base_thrift:'ID'().
-type 'CurrencySymbolicCode'() :: binary().
-type 'CalendarHolidaySet'() :: #{dmsl_base_thrift:'Year'() => ordsets:ordset('CalendarHoliday'())}.
-type 'CustomerID'() :: dmsl_base_thrift:'ID'().
-type 'CustomerBindingID'() :: dmsl_base_thrift:'ID'().
-type 'RecurrentPaymentToolID'() :: dmsl_base_thrift:'ID'().
-type 'Token'() :: binary().
-type 'DigitalWalletID'() :: binary().
-type 'CashFlowContext'() :: #{atom() => 'Cash'()}.
-type 'CashFlow'() :: ['CashFlowPosting'()].
-type 'FinalCashFlow'() :: ['FinalCashFlowPosting'()].
-type 'ProviderAccountSet'() :: #{'CurrencyRef'() => 'ProviderAccount'()}.
-type 'ProxyOptions'() :: dmsl_base_thrift:'StringMap'().
-type 'Domain'() :: #{'Reference'() => 'DomainObject'()}.

%%
%% enums
%%
-type enum_name() ::
    'OnHoldExpiration' |
    'RiskScore' |
    'CategoryType' |
    'PayoutMethod' |
    'Residence' |
    'BankCardPaymentSystem' |
    'TerminalPaymentProvider' |
    'DigitalWalletProvider' |
    'MerchantCashFlowAccount' |
    'ProviderCashFlowAccount' |
    'SystemCashFlowAccount' |
    'ExternalCashFlowAccount' |
    'CashFlowConstant' |
    'RoundingMethod' |
    'PaymentInstitutionRealm'.

%% enum 'OnHoldExpiration'
-type 'OnHoldExpiration'() ::
    'cancel' |
    'capture'.

%% enum 'RiskScore'
-type 'RiskScore'() ::
    'low' |
    'high' |
    'fatal'.

%% enum 'CategoryType'
-type 'CategoryType'() ::
    'test' |
    'live'.

%% enum 'PayoutMethod'
-type 'PayoutMethod'() ::
    'russian_bank_account' |
    'international_bank_account'.

%% enum 'Residence'
-type 'Residence'() ::
    'abh' |
    'aus' |
    'aut' |
    'aze' |
    'alb' |
    'dza' |
    'asm' |
    'aia' |
    'ago' |
    'and' |
    'ata' |
    'atg' |
    'arg' |
    'arm' |
    'abw' |
    'afg' |
    'bhs' |
    'bgd' |
    'brb' |
    'bhr' |
    'blr' |
    'blz' |
    'bel' |
    'ben' |
    'bmu' |
    'bgr' |
    'bol' |
    'bes' |
    'bih' |
    'bwa' |
    'bra' |
    'iot' |
    'brn' |
    'bfa' |
    'bdi' |
    'btn' |
    'vut' |
    'hun' |
    'ven' |
    'vgb' |
    'vir' |
    'vnm' |
    'gab' |
    'hti' |
    'guy' |
    'gmb' |
    'gha' |
    'glp' |
    'gtm' |
    'gin' |
    'gnb' |
    'deu' |
    'ggy' |
    'gib' |
    'hnd' |
    'hkg' |
    'grd' |
    'grl' |
    'grc' |
    'geo' |
    'gum' |
    'dnk' |
    'jey' |
    'dji' |
    'dma' |
    'dom' |
    'egy' |
    'zmb' |
    'esh' |
    'zwe' |
    'isr' |
    'ind' |
    'idn' |
    'jor' |
    'irq' |
    'irn' |
    'irl' |
    'isl' |
    'esp' |
    'ita' |
    'yem' |
    'cpv' |
    'kaz' |
    'khm' |
    'cmr' |
    'can' |
    'qat' |
    'ken' |
    'cyp' |
    'kgz' |
    'kir' |
    'chn' |
    'cck' |
    'col' |
    'com' |
    'cog' |
    'cod' |
    'prk' |
    'kor' |
    'cri' |
    'civ' |
    'cub' |
    'kwt' |
    'cuw' |
    'lao' |
    'lva' |
    'lso' |
    'lbn' |
    'lby' |
    'lbr' |
    'lie' |
    'ltu' |
    'lux' |
    'mus' |
    'mrt' |
    'mdg' |
    'myt' |
    'mac' |
    'mwi' |
    'mys' |
    'mli' |
    'umi' |
    'mdv' |
    'mlt' |
    'mar' |
    'mtq' |
    'mhl' |
    'mex' |
    'fsm' |
    'moz' |
    'mda' |
    'mco' |
    'mng' |
    'msr' |
    'mmr' |
    'nam' |
    'nru' |
    'npl' |
    'ner' |
    'nga' |
    'nld' |
    'nic' |
    'niu' |
    'nzl' |
    'ncl' |
    'nor' |
    'are' |
    'omn' |
    'bvt' |
    'imn' |
    'nfk' |
    'cxr' |
    'hmd' |
    'cym' |
    'cok' |
    'tca' |
    'pak' |
    'plw' |
    'pse' |
    'pan' |
    'vat' |
    'png' |
    'pry' |
    'per' |
    'pcn' |
    'pol' |
    'prt' |
    'pri' |
    'mkd' |
    'reu' |
    'rus' |
    'rwa' |
    'rou' |
    'wsm' |
    'smr' |
    'stp' |
    'sau' |
    'swz' |
    'shn' |
    'mnp' |
    'blm' |
    'maf' |
    'sen' |
    'vct' |
    'kna' |
    'lca' |
    'spm' |
    'srb' |
    'syc' |
    'sgp' |
    'sxm' |
    'syr' |
    'svk' |
    'svn' |
    'gbr' |
    'usa' |
    'slb' |
    'som' |
    'sdn' |
    'sur' |
    'sle' |
    'tjk' |
    'tha' |
    'twn' |
    'tza' |
    'tls' |
    'tgo' |
    'tkl' |
    'ton' |
    'tto' |
    'tuv' |
    'tun' |
    'tkm' |
    'tur' |
    'uga' |
    'uzb' |
    'ukr' |
    'wlf' |
    'ury' |
    'fro' |
    'fji' |
    'phl' |
    'fin' |
    'flk' |
    'fra' |
    'guf' |
    'pyf' |
    'atf' |
    'hrv' |
    'caf' |
    'tcd' |
    'mne' |
    'cze' |
    'chl' |
    'che' |
    'swe' |
    'sjm' |
    'lka' |
    'ecu' |
    'gnq' |
    'ala' |
    'slv' |
    'eri' |
    'est' |
    'eth' |
    'zaf' |
    'sgs' |
    'ost' |
    'ssd' |
    'jam' |
    'jpn'.

%% enum 'BankCardPaymentSystem'
-type 'BankCardPaymentSystem'() ::
    'visa' |
    'mastercard' |
    'visaelectron' |
    'maestro' |
    'forbrugsforeningen' |
    'dankort' |
    'amex' |
    'dinersclub' |
    'discover' |
    'unionpay' |
    'jcb' |
    'nspkmir'.

%% enum 'TerminalPaymentProvider'
-type 'TerminalPaymentProvider'() ::
    'euroset'.

%% enum 'DigitalWalletProvider'
-type 'DigitalWalletProvider'() ::
    'qiwi'.

%% enum 'MerchantCashFlowAccount'
-type 'MerchantCashFlowAccount'() ::
    'settlement' |
    'guarantee'.

%% enum 'ProviderCashFlowAccount'
-type 'ProviderCashFlowAccount'() ::
    'settlement'.

%% enum 'SystemCashFlowAccount'
-type 'SystemCashFlowAccount'() ::
    'settlement'.

%% enum 'ExternalCashFlowAccount'
-type 'ExternalCashFlowAccount'() ::
    'income' |
    'outcome'.

%% enum 'CashFlowConstant'
-type 'CashFlowConstant'() ::
    'operation_amount'.

%% enum 'RoundingMethod'
-type 'RoundingMethod'() ::
    'round_half_towards_zero' |
    'round_half_away_from_zero'.

%% enum 'PaymentInstitutionRealm'
-type 'PaymentInstitutionRealm'() ::
    'test' |
    'live'.

%%
%% structs, unions and exceptions
%%
-type struct_name() ::
    'ContactInfo' |
    'OperationFailure' |
    'OperationTimeout' |
    'ExternalFailure' |
    'Cash' |
    'TransactionInfo' |
    'Invoice' |
    'InvoiceDetails' |
    'InvoiceCart' |
    'InvoiceLine' |
    'InvoiceUnpaid' |
    'InvoicePaid' |
    'InvoiceCancelled' |
    'InvoiceFulfilled' |
    'InvoiceStatus' |
    'InvoicePayment' |
    'InvoicePaymentPending' |
    'InvoicePaymentProcessed' |
    'InvoicePaymentCaptured' |
    'InvoicePaymentCancelled' |
    'InvoicePaymentRefunded' |
    'InvoicePaymentFailed' |
    'InvoiceTemplate' |
    'InvoiceTemplateDetails' |
    'InvoiceTemplateProduct' |
    'InvoiceTemplateProductPrice' |
    'InvoiceTemplateCostUnlimited' |
    'InvoicePaymentStatus' |
    'TargetInvoicePaymentStatus' |
    'Payer' |
    'PaymentResourcePayer' |
    'CustomerPayer' |
    'ClientInfo' |
    'PaymentRoute' |
    'InvoicePaymentAdjustment' |
    'InvoicePaymentAdjustmentPending' |
    'InvoicePaymentAdjustmentCaptured' |
    'InvoicePaymentAdjustmentCancelled' |
    'InvoicePaymentAdjustmentStatus' |
    'InvoicePaymentFlow' |
    'InvoicePaymentFlowInstant' |
    'InvoicePaymentFlowHold' |
    'InvoicePaymentRefund' |
    'InvoicePaymentRefundStatus' |
    'InvoicePaymentRefundPending' |
    'InvoicePaymentRefundSucceeded' |
    'InvoicePaymentRefundFailed' |
    'Blocking' |
    'Unblocked' |
    'Blocked' |
    'Suspension' |
    'Active' |
    'Suspended' |
    'Party' |
    'PartyContactInfo' |
    'Shop' |
    'ShopAccount' |
    'ShopDetails' |
    'ShopLocation' |
    'ContractorRef' |
    'Contractor' |
    'RegisteredUser' |
    'LegalEntity' |
    'RussianLegalEntity' |
    'InternationalLegalEntity' |
    'RussianBankAccount' |
    'InternationalBankAccount' |
    'PayoutTool' |
    'PayoutToolInfo' |
    'Contract' |
    'LegalAgreement' |
    'ContractStatus' |
    'ContractActive' |
    'ContractTerminated' |
    'ContractExpired' |
    'CategoryRef' |
    'Category' |
    'ContractTemplateRef' |
    'ContractTemplate' |
    'Lifetime' |
    'LifetimeInterval' |
    'ContractTemplateSelector' |
    'ContractTemplateDecision' |
    'ContractAdjustment' |
    'TermSet' |
    'TimedTermSet' |
    'TermSetHierarchy' |
    'TermSetHierarchyRef' |
    'PaymentsServiceTerms' |
    'PaymentHoldsServiceTerms' |
    'PaymentRefundsServiceTerms' |
    'RecurrentPaytoolsServiceTerms' |
    'PayoutsServiceTerms' |
    'PayoutCompilationPolicy' |
    'PayoutMethodRef' |
    'PayoutMethodDefinition' |
    'PayoutMethodSelector' |
    'PayoutMethodDecision' |
    'CurrencyRef' |
    'Currency' |
    'CurrencySelector' |
    'CurrencyDecision' |
    'CategorySelector' |
    'CategoryDecision' |
    'ScheduleRef' |
    'Schedule' |
    'ScheduleSelector' |
    'ScheduleDecision' |
    'CalendarRef' |
    'Calendar' |
    'CalendarHoliday' |
    'CashRange' |
    'CashBound' |
    'CashLimitSelector' |
    'CashLimitDecision' |
    'PaymentMethod' |
    'PaymentTool' |
    'DisposablePaymentResource' |
    'BankCard' |
    'PaymentTerminal' |
    'DigitalWallet' |
    'BankCardBINRangeRef' |
    'BankCardBINRange' |
    'PaymentMethodRef' |
    'PaymentMethodDefinition' |
    'PaymentMethodSelector' |
    'PaymentMethodDecision' |
    'HoldLifetime' |
    'HoldLifetimeSelector' |
    'HoldLifetimeDecision' |
    'CashFlowAccount' |
    'CashFlowPosting' |
    'FinalCashFlowPosting' |
    'FinalCashFlowAccount' |
    'CashVolume' |
    'CashVolumeFixed' |
    'CashVolumeShare' |
    'CashVolumeProduct' |
    'CashFlowSelector' |
    'CashFlowDecision' |
    'ProviderRef' |
    'Provider' |
    'PaymentsProvisionTerms' |
    'PaymentHoldsProvisionTerms' |
    'PaymentRefundsProvisionTerms' |
    'RecurrentPaytoolsProvisionTerms' |
    'CashValueSelector' |
    'CashValueDecision' |
    'ProviderAccount' |
    'ProviderSelector' |
    'ProviderDecision' |
    'TerminalRef' |
    'InspectorRef' |
    'Inspector' |
    'InspectorSelector' |
    'InspectorDecision' |
    'Terminal' |
    'TerminalSelector' |
    'TerminalDecision' |
    'Predicate' |
    'Condition' |
    'PaymentToolCondition' |
    'BankCardCondition' |
    'BankCardConditionDefinition' |
    'PaymentTerminalCondition' |
    'PaymentTerminalConditionDefinition' |
    'DigitalWalletCondition' |
    'DigitalWalletConditionDefinition' |
    'PartyCondition' |
    'PartyConditionDefinition' |
    'ProxyRef' |
    'ProxyDefinition' |
    'Proxy' |
    'SystemAccountSetRef' |
    'SystemAccountSet' |
    'SystemAccount' |
    'SystemAccountSetSelector' |
    'SystemAccountSetDecision' |
    'ExternalAccountSetRef' |
    'ExternalAccountSet' |
    'ExternalAccount' |
    'ExternalAccountSetSelector' |
    'ExternalAccountSetDecision' |
    'PaymentInstitutionRef' |
    'PaymentInstitution' |
    'ContractPaymentInstitutionDefaults' |
    'PartyPrototypeRef' |
    'PartyPrototype' |
    'ShopPrototype' |
    'ContractPrototype' |
    'PayoutToolPrototype' |
    'GlobalsRef' |
    'Globals' |
    'Dummy' |
    'DummyRef' |
    'DummyObject' |
    'DummyLink' |
    'DummyLinkRef' |
    'DummyLinkObject' |
    'ContractTemplateObject' |
    'TermSetHierarchyObject' |
    'CategoryObject' |
    'CurrencyObject' |
    'ScheduleObject' |
    'CalendarObject' |
    'PaymentMethodObject' |
    'PayoutMethodObject' |
    'BankCardBINRangeObject' |
    'ContractorObject' |
    'ProviderObject' |
    'TerminalObject' |
    'InspectorObject' |
    'PaymentInstitutionObject' |
    'SystemAccountSetObject' |
    'ExternalAccountSetObject' |
    'ProxyObject' |
    'PartyPrototypeObject' |
    'GlobalsObject' |
    'Reference' |
    'DomainObject'.

-type exception_name() :: none().

%% struct 'ContactInfo'
-type 'ContactInfo'() :: #'domain_ContactInfo'{}.

%% union 'OperationFailure'
-type 'OperationFailure'() ::
    {'operation_timeout', 'OperationTimeout'()} |
    {'external_failure', 'ExternalFailure'()}.

%% struct 'OperationTimeout'
-type 'OperationTimeout'() :: #'domain_OperationTimeout'{}.

%% struct 'ExternalFailure'
-type 'ExternalFailure'() :: #'domain_ExternalFailure'{}.

%% struct 'Cash'
-type 'Cash'() :: #'domain_Cash'{}.

%% struct 'TransactionInfo'
-type 'TransactionInfo'() :: #'domain_TransactionInfo'{}.

%% struct 'Invoice'
-type 'Invoice'() :: #'domain_Invoice'{}.

%% struct 'InvoiceDetails'
-type 'InvoiceDetails'() :: #'domain_InvoiceDetails'{}.

%% struct 'InvoiceCart'
-type 'InvoiceCart'() :: #'domain_InvoiceCart'{}.

%% struct 'InvoiceLine'
-type 'InvoiceLine'() :: #'domain_InvoiceLine'{}.

%% struct 'InvoiceUnpaid'
-type 'InvoiceUnpaid'() :: #'domain_InvoiceUnpaid'{}.

%% struct 'InvoicePaid'
-type 'InvoicePaid'() :: #'domain_InvoicePaid'{}.

%% struct 'InvoiceCancelled'
-type 'InvoiceCancelled'() :: #'domain_InvoiceCancelled'{}.

%% struct 'InvoiceFulfilled'
-type 'InvoiceFulfilled'() :: #'domain_InvoiceFulfilled'{}.

%% union 'InvoiceStatus'
-type 'InvoiceStatus'() ::
    {'unpaid', 'InvoiceUnpaid'()} |
    {'paid', 'InvoicePaid'()} |
    {'cancelled', 'InvoiceCancelled'()} |
    {'fulfilled', 'InvoiceFulfilled'()}.

%% struct 'InvoicePayment'
-type 'InvoicePayment'() :: #'domain_InvoicePayment'{}.

%% struct 'InvoicePaymentPending'
-type 'InvoicePaymentPending'() :: #'domain_InvoicePaymentPending'{}.

%% struct 'InvoicePaymentProcessed'
-type 'InvoicePaymentProcessed'() :: #'domain_InvoicePaymentProcessed'{}.

%% struct 'InvoicePaymentCaptured'
-type 'InvoicePaymentCaptured'() :: #'domain_InvoicePaymentCaptured'{}.

%% struct 'InvoicePaymentCancelled'
-type 'InvoicePaymentCancelled'() :: #'domain_InvoicePaymentCancelled'{}.

%% struct 'InvoicePaymentRefunded'
-type 'InvoicePaymentRefunded'() :: #'domain_InvoicePaymentRefunded'{}.

%% struct 'InvoicePaymentFailed'
-type 'InvoicePaymentFailed'() :: #'domain_InvoicePaymentFailed'{}.

%% struct 'InvoiceTemplate'
-type 'InvoiceTemplate'() :: #'domain_InvoiceTemplate'{}.

%% union 'InvoiceTemplateDetails'
-type 'InvoiceTemplateDetails'() ::
    {'cart', 'InvoiceCart'()} |
    {'product', 'InvoiceTemplateProduct'()}.

%% struct 'InvoiceTemplateProduct'
-type 'InvoiceTemplateProduct'() :: #'domain_InvoiceTemplateProduct'{}.

%% union 'InvoiceTemplateProductPrice'
-type 'InvoiceTemplateProductPrice'() ::
    {'fixed', 'Cash'()} |
    {'range', 'CashRange'()} |
    {'unlim', 'InvoiceTemplateCostUnlimited'()}.

%% struct 'InvoiceTemplateCostUnlimited'
-type 'InvoiceTemplateCostUnlimited'() :: #'domain_InvoiceTemplateCostUnlimited'{}.

%% union 'InvoicePaymentStatus'
-type 'InvoicePaymentStatus'() ::
    {'pending', 'InvoicePaymentPending'()} |
    {'processed', 'InvoicePaymentProcessed'()} |
    {'captured', 'InvoicePaymentCaptured'()} |
    {'cancelled', 'InvoicePaymentCancelled'()} |
    {'refunded', 'InvoicePaymentRefunded'()} |
    {'failed', 'InvoicePaymentFailed'()}.

%% union 'TargetInvoicePaymentStatus'
-type 'TargetInvoicePaymentStatus'() ::
    {'processed', 'InvoicePaymentProcessed'()} |
    {'captured', 'InvoicePaymentCaptured'()} |
    {'cancelled', 'InvoicePaymentCancelled'()} |
    {'refunded', 'InvoicePaymentRefunded'()}.

%% union 'Payer'
-type 'Payer'() ::
    {'payment_resource', 'PaymentResourcePayer'()} |
    {'customer', 'CustomerPayer'()}.

%% struct 'PaymentResourcePayer'
-type 'PaymentResourcePayer'() :: #'domain_PaymentResourcePayer'{}.

%% struct 'CustomerPayer'
-type 'CustomerPayer'() :: #'domain_CustomerPayer'{}.

%% struct 'ClientInfo'
-type 'ClientInfo'() :: #'domain_ClientInfo'{}.

%% struct 'PaymentRoute'
-type 'PaymentRoute'() :: #'domain_PaymentRoute'{}.

%% struct 'InvoicePaymentAdjustment'
-type 'InvoicePaymentAdjustment'() :: #'domain_InvoicePaymentAdjustment'{}.

%% struct 'InvoicePaymentAdjustmentPending'
-type 'InvoicePaymentAdjustmentPending'() :: #'domain_InvoicePaymentAdjustmentPending'{}.

%% struct 'InvoicePaymentAdjustmentCaptured'
-type 'InvoicePaymentAdjustmentCaptured'() :: #'domain_InvoicePaymentAdjustmentCaptured'{}.

%% struct 'InvoicePaymentAdjustmentCancelled'
-type 'InvoicePaymentAdjustmentCancelled'() :: #'domain_InvoicePaymentAdjustmentCancelled'{}.

%% union 'InvoicePaymentAdjustmentStatus'
-type 'InvoicePaymentAdjustmentStatus'() ::
    {'pending', 'InvoicePaymentAdjustmentPending'()} |
    {'captured', 'InvoicePaymentAdjustmentCaptured'()} |
    {'cancelled', 'InvoicePaymentAdjustmentCancelled'()}.

%% union 'InvoicePaymentFlow'
-type 'InvoicePaymentFlow'() ::
    {'instant', 'InvoicePaymentFlowInstant'()} |
    {'hold', 'InvoicePaymentFlowHold'()}.

%% struct 'InvoicePaymentFlowInstant'
-type 'InvoicePaymentFlowInstant'() :: #'domain_InvoicePaymentFlowInstant'{}.

%% struct 'InvoicePaymentFlowHold'
-type 'InvoicePaymentFlowHold'() :: #'domain_InvoicePaymentFlowHold'{}.

%% struct 'InvoicePaymentRefund'
-type 'InvoicePaymentRefund'() :: #'domain_InvoicePaymentRefund'{}.

%% union 'InvoicePaymentRefundStatus'
-type 'InvoicePaymentRefundStatus'() ::
    {'pending', 'InvoicePaymentRefundPending'()} |
    {'succeeded', 'InvoicePaymentRefundSucceeded'()} |
    {'failed', 'InvoicePaymentRefundFailed'()}.

%% struct 'InvoicePaymentRefundPending'
-type 'InvoicePaymentRefundPending'() :: #'domain_InvoicePaymentRefundPending'{}.

%% struct 'InvoicePaymentRefundSucceeded'
-type 'InvoicePaymentRefundSucceeded'() :: #'domain_InvoicePaymentRefundSucceeded'{}.

%% struct 'InvoicePaymentRefundFailed'
-type 'InvoicePaymentRefundFailed'() :: #'domain_InvoicePaymentRefundFailed'{}.

%% union 'Blocking'
-type 'Blocking'() ::
    {'unblocked', 'Unblocked'()} |
    {'blocked', 'Blocked'()}.

%% struct 'Unblocked'
-type 'Unblocked'() :: #'domain_Unblocked'{}.

%% struct 'Blocked'
-type 'Blocked'() :: #'domain_Blocked'{}.

%% union 'Suspension'
-type 'Suspension'() ::
    {'active', 'Active'()} |
    {'suspended', 'Suspended'()}.

%% struct 'Active'
-type 'Active'() :: #'domain_Active'{}.

%% struct 'Suspended'
-type 'Suspended'() :: #'domain_Suspended'{}.

%% struct 'Party'
-type 'Party'() :: #'domain_Party'{}.

%% struct 'PartyContactInfo'
-type 'PartyContactInfo'() :: #'domain_PartyContactInfo'{}.

%% struct 'Shop'
-type 'Shop'() :: #'domain_Shop'{}.

%% struct 'ShopAccount'
-type 'ShopAccount'() :: #'domain_ShopAccount'{}.

%% struct 'ShopDetails'
-type 'ShopDetails'() :: #'domain_ShopDetails'{}.

%% union 'ShopLocation'
-type 'ShopLocation'() ::
    {'url', binary()}.

%% struct 'ContractorRef'
-type 'ContractorRef'() :: #'domain_ContractorRef'{}.

%% union 'Contractor'
-type 'Contractor'() ::
    {'legal_entity', 'LegalEntity'()} |
    {'registered_user', 'RegisteredUser'()}.

%% struct 'RegisteredUser'
-type 'RegisteredUser'() :: #'domain_RegisteredUser'{}.

%% union 'LegalEntity'
-type 'LegalEntity'() ::
    {'russian_legal_entity', 'RussianLegalEntity'()} |
    {'international_legal_entity', 'InternationalLegalEntity'()}.

%% struct 'RussianLegalEntity'
-type 'RussianLegalEntity'() :: #'domain_RussianLegalEntity'{}.

%% struct 'InternationalLegalEntity'
-type 'InternationalLegalEntity'() :: #'domain_InternationalLegalEntity'{}.

%% struct 'RussianBankAccount'
-type 'RussianBankAccount'() :: #'domain_RussianBankAccount'{}.

%% struct 'InternationalBankAccount'
-type 'InternationalBankAccount'() :: #'domain_InternationalBankAccount'{}.

%% struct 'PayoutTool'
-type 'PayoutTool'() :: #'domain_PayoutTool'{}.

%% union 'PayoutToolInfo'
-type 'PayoutToolInfo'() ::
    {'russian_bank_account', 'RussianBankAccount'()} |
    {'international_bank_account', 'InternationalBankAccount'()}.

%% struct 'Contract'
-type 'Contract'() :: #'domain_Contract'{}.

%% struct 'LegalAgreement'
-type 'LegalAgreement'() :: #'domain_LegalAgreement'{}.

%% union 'ContractStatus'
-type 'ContractStatus'() ::
    {'active', 'ContractActive'()} |
    {'terminated', 'ContractTerminated'()} |
    {'expired', 'ContractExpired'()}.

%% struct 'ContractActive'
-type 'ContractActive'() :: #'domain_ContractActive'{}.

%% struct 'ContractTerminated'
-type 'ContractTerminated'() :: #'domain_ContractTerminated'{}.

%% struct 'ContractExpired'
-type 'ContractExpired'() :: #'domain_ContractExpired'{}.

%% struct 'CategoryRef'
-type 'CategoryRef'() :: #'domain_CategoryRef'{}.

%% struct 'Category'
-type 'Category'() :: #'domain_Category'{}.

%% struct 'ContractTemplateRef'
-type 'ContractTemplateRef'() :: #'domain_ContractTemplateRef'{}.

%% struct 'ContractTemplate'
-type 'ContractTemplate'() :: #'domain_ContractTemplate'{}.

%% union 'Lifetime'
-type 'Lifetime'() ::
    {'timestamp', dmsl_base_thrift:'Timestamp'()} |
    {'interval', 'LifetimeInterval'()}.

%% struct 'LifetimeInterval'
-type 'LifetimeInterval'() :: #'domain_LifetimeInterval'{}.

%% union 'ContractTemplateSelector'
-type 'ContractTemplateSelector'() ::
    {'decisions', ['ContractTemplateDecision'()]} |
    {'value', 'ContractTemplateRef'()}.

%% struct 'ContractTemplateDecision'
-type 'ContractTemplateDecision'() :: #'domain_ContractTemplateDecision'{}.

%% struct 'ContractAdjustment'
-type 'ContractAdjustment'() :: #'domain_ContractAdjustment'{}.

%% struct 'TermSet'
-type 'TermSet'() :: #'domain_TermSet'{}.

%% struct 'TimedTermSet'
-type 'TimedTermSet'() :: #'domain_TimedTermSet'{}.

%% struct 'TermSetHierarchy'
-type 'TermSetHierarchy'() :: #'domain_TermSetHierarchy'{}.

%% struct 'TermSetHierarchyRef'
-type 'TermSetHierarchyRef'() :: #'domain_TermSetHierarchyRef'{}.

%% struct 'PaymentsServiceTerms'
-type 'PaymentsServiceTerms'() :: #'domain_PaymentsServiceTerms'{}.

%% struct 'PaymentHoldsServiceTerms'
-type 'PaymentHoldsServiceTerms'() :: #'domain_PaymentHoldsServiceTerms'{}.

%% struct 'PaymentRefundsServiceTerms'
-type 'PaymentRefundsServiceTerms'() :: #'domain_PaymentRefundsServiceTerms'{}.

%% struct 'RecurrentPaytoolsServiceTerms'
-type 'RecurrentPaytoolsServiceTerms'() :: #'domain_RecurrentPaytoolsServiceTerms'{}.

%% struct 'PayoutsServiceTerms'
-type 'PayoutsServiceTerms'() :: #'domain_PayoutsServiceTerms'{}.

%% struct 'PayoutCompilationPolicy'
-type 'PayoutCompilationPolicy'() :: #'domain_PayoutCompilationPolicy'{}.

%% struct 'PayoutMethodRef'
-type 'PayoutMethodRef'() :: #'domain_PayoutMethodRef'{}.

%% struct 'PayoutMethodDefinition'
-type 'PayoutMethodDefinition'() :: #'domain_PayoutMethodDefinition'{}.

%% union 'PayoutMethodSelector'
-type 'PayoutMethodSelector'() ::
    {'decisions', ['PayoutMethodDecision'()]} |
    {'value', ordsets:ordset('PayoutMethodRef'())}.

%% struct 'PayoutMethodDecision'
-type 'PayoutMethodDecision'() :: #'domain_PayoutMethodDecision'{}.

%% struct 'CurrencyRef'
-type 'CurrencyRef'() :: #'domain_CurrencyRef'{}.

%% struct 'Currency'
-type 'Currency'() :: #'domain_Currency'{}.

%% union 'CurrencySelector'
-type 'CurrencySelector'() ::
    {'decisions', ['CurrencyDecision'()]} |
    {'value', ordsets:ordset('CurrencyRef'())}.

%% struct 'CurrencyDecision'
-type 'CurrencyDecision'() :: #'domain_CurrencyDecision'{}.

%% union 'CategorySelector'
-type 'CategorySelector'() ::
    {'decisions', ['CategoryDecision'()]} |
    {'value', ordsets:ordset('CategoryRef'())}.

%% struct 'CategoryDecision'
-type 'CategoryDecision'() :: #'domain_CategoryDecision'{}.

%% struct 'ScheduleRef'
-type 'ScheduleRef'() :: #'domain_ScheduleRef'{}.

%% struct 'Schedule'
-type 'Schedule'() :: #'domain_Schedule'{}.

%% union 'ScheduleSelector'
-type 'ScheduleSelector'() ::
    {'decisions', ['ScheduleDecision'()]} |
    {'value', ordsets:ordset('ScheduleRef'())}.

%% struct 'ScheduleDecision'
-type 'ScheduleDecision'() :: #'domain_ScheduleDecision'{}.

%% struct 'CalendarRef'
-type 'CalendarRef'() :: #'domain_CalendarRef'{}.

%% struct 'Calendar'
-type 'Calendar'() :: #'domain_Calendar'{}.

%% struct 'CalendarHoliday'
-type 'CalendarHoliday'() :: #'domain_CalendarHoliday'{}.

%% struct 'CashRange'
-type 'CashRange'() :: #'domain_CashRange'{}.

%% union 'CashBound'
-type 'CashBound'() ::
    {'inclusive', 'Cash'()} |
    {'exclusive', 'Cash'()}.

%% union 'CashLimitSelector'
-type 'CashLimitSelector'() ::
    {'decisions', ['CashLimitDecision'()]} |
    {'value', 'CashRange'()}.

%% struct 'CashLimitDecision'
-type 'CashLimitDecision'() :: #'domain_CashLimitDecision'{}.

%% union 'PaymentMethod'
-type 'PaymentMethod'() ::
    {'bank_card', 'BankCardPaymentSystem'()} |
    {'payment_terminal', 'TerminalPaymentProvider'()} |
    {'digital_wallet', 'DigitalWalletProvider'()}.

%% union 'PaymentTool'
-type 'PaymentTool'() ::
    {'bank_card', 'BankCard'()} |
    {'payment_terminal', 'PaymentTerminal'()} |
    {'digital_wallet', 'DigitalWallet'()}.

%% struct 'DisposablePaymentResource'
-type 'DisposablePaymentResource'() :: #'domain_DisposablePaymentResource'{}.

%% struct 'BankCard'
-type 'BankCard'() :: #'domain_BankCard'{}.

%% struct 'PaymentTerminal'
-type 'PaymentTerminal'() :: #'domain_PaymentTerminal'{}.

%% struct 'DigitalWallet'
-type 'DigitalWallet'() :: #'domain_DigitalWallet'{}.

%% struct 'BankCardBINRangeRef'
-type 'BankCardBINRangeRef'() :: #'domain_BankCardBINRangeRef'{}.

%% struct 'BankCardBINRange'
-type 'BankCardBINRange'() :: #'domain_BankCardBINRange'{}.

%% struct 'PaymentMethodRef'
-type 'PaymentMethodRef'() :: #'domain_PaymentMethodRef'{}.

%% struct 'PaymentMethodDefinition'
-type 'PaymentMethodDefinition'() :: #'domain_PaymentMethodDefinition'{}.

%% union 'PaymentMethodSelector'
-type 'PaymentMethodSelector'() ::
    {'decisions', ['PaymentMethodDecision'()]} |
    {'value', ordsets:ordset('PaymentMethodRef'())}.

%% struct 'PaymentMethodDecision'
-type 'PaymentMethodDecision'() :: #'domain_PaymentMethodDecision'{}.

%% struct 'HoldLifetime'
-type 'HoldLifetime'() :: #'domain_HoldLifetime'{}.

%% union 'HoldLifetimeSelector'
-type 'HoldLifetimeSelector'() ::
    {'decisions', ['HoldLifetimeDecision'()]} |
    {'value', 'HoldLifetime'()}.

%% struct 'HoldLifetimeDecision'
-type 'HoldLifetimeDecision'() :: #'domain_HoldLifetimeDecision'{}.

%% union 'CashFlowAccount'
-type 'CashFlowAccount'() ::
    {'merchant', 'MerchantCashFlowAccount'()} |
    {'provider', 'ProviderCashFlowAccount'()} |
    {'system', 'SystemCashFlowAccount'()} |
    {'external', 'ExternalCashFlowAccount'()}.

%% struct 'CashFlowPosting'
-type 'CashFlowPosting'() :: #'domain_CashFlowPosting'{}.

%% struct 'FinalCashFlowPosting'
-type 'FinalCashFlowPosting'() :: #'domain_FinalCashFlowPosting'{}.

%% struct 'FinalCashFlowAccount'
-type 'FinalCashFlowAccount'() :: #'domain_FinalCashFlowAccount'{}.

%% union 'CashVolume'
-type 'CashVolume'() ::
    {'fixed', 'CashVolumeFixed'()} |
    {'share', 'CashVolumeShare'()} |
    {'product', 'CashVolumeProduct'()}.

%% struct 'CashVolumeFixed'
-type 'CashVolumeFixed'() :: #'domain_CashVolumeFixed'{}.

%% struct 'CashVolumeShare'
-type 'CashVolumeShare'() :: #'domain_CashVolumeShare'{}.

%% union 'CashVolumeProduct'
-type 'CashVolumeProduct'() ::
    {'min_of', ordsets:ordset('CashVolume'())} |
    {'max_of', ordsets:ordset('CashVolume'())}.

%% union 'CashFlowSelector'
-type 'CashFlowSelector'() ::
    {'decisions', ['CashFlowDecision'()]} |
    {'value', 'CashFlow'()}.

%% struct 'CashFlowDecision'
-type 'CashFlowDecision'() :: #'domain_CashFlowDecision'{}.

%% struct 'ProviderRef'
-type 'ProviderRef'() :: #'domain_ProviderRef'{}.

%% struct 'Provider'
-type 'Provider'() :: #'domain_Provider'{}.

%% struct 'PaymentsProvisionTerms'
-type 'PaymentsProvisionTerms'() :: #'domain_PaymentsProvisionTerms'{}.

%% struct 'PaymentHoldsProvisionTerms'
-type 'PaymentHoldsProvisionTerms'() :: #'domain_PaymentHoldsProvisionTerms'{}.

%% struct 'PaymentRefundsProvisionTerms'
-type 'PaymentRefundsProvisionTerms'() :: #'domain_PaymentRefundsProvisionTerms'{}.

%% struct 'RecurrentPaytoolsProvisionTerms'
-type 'RecurrentPaytoolsProvisionTerms'() :: #'domain_RecurrentPaytoolsProvisionTerms'{}.

%% union 'CashValueSelector'
-type 'CashValueSelector'() ::
    {'decisions', ['CashValueDecision'()]} |
    {'value', 'Cash'()}.

%% struct 'CashValueDecision'
-type 'CashValueDecision'() :: #'domain_CashValueDecision'{}.

%% struct 'ProviderAccount'
-type 'ProviderAccount'() :: #'domain_ProviderAccount'{}.

%% union 'ProviderSelector'
-type 'ProviderSelector'() ::
    {'decisions', ['ProviderDecision'()]} |
    {'value', ordsets:ordset('ProviderRef'())}.

%% struct 'ProviderDecision'
-type 'ProviderDecision'() :: #'domain_ProviderDecision'{}.

%% struct 'TerminalRef'
-type 'TerminalRef'() :: #'domain_TerminalRef'{}.

%% struct 'InspectorRef'
-type 'InspectorRef'() :: #'domain_InspectorRef'{}.

%% struct 'Inspector'
-type 'Inspector'() :: #'domain_Inspector'{}.

%% union 'InspectorSelector'
-type 'InspectorSelector'() ::
    {'decisions', ['InspectorDecision'()]} |
    {'value', 'InspectorRef'()}.

%% struct 'InspectorDecision'
-type 'InspectorDecision'() :: #'domain_InspectorDecision'{}.

%% struct 'Terminal'
-type 'Terminal'() :: #'domain_Terminal'{}.

%% union 'TerminalSelector'
-type 'TerminalSelector'() ::
    {'decisions', ['TerminalDecision'()]} |
    {'value', ordsets:ordset('TerminalRef'())}.

%% struct 'TerminalDecision'
-type 'TerminalDecision'() :: #'domain_TerminalDecision'{}.

%% union 'Predicate'
-type 'Predicate'() ::
    {'constant', boolean()} |
    {'condition', 'Condition'()} |
    {'is_not', 'Predicate'()} |
    {'all_of', ordsets:ordset('Predicate'())} |
    {'any_of', ordsets:ordset('Predicate'())}.

%% union 'Condition'
-type 'Condition'() ::
    {'category_is', 'CategoryRef'()} |
    {'currency_is', 'CurrencyRef'()} |
    {'cost_in', 'CashRange'()} |
    {'payment_tool', 'PaymentToolCondition'()} |
    {'shop_location_is', 'ShopLocation'()} |
    {'party', 'PartyCondition'()} |
    {'payout_method_is', 'PayoutMethodRef'()}.

%% union 'PaymentToolCondition'
-type 'PaymentToolCondition'() ::
    {'bank_card', 'BankCardCondition'()} |
    {'payment_terminal', 'PaymentTerminalCondition'()} |
    {'digital_wallet', 'DigitalWalletCondition'()}.

%% struct 'BankCardCondition'
-type 'BankCardCondition'() :: #'domain_BankCardCondition'{}.

%% union 'BankCardConditionDefinition'
-type 'BankCardConditionDefinition'() ::
    {'payment_system_is', atom()} |
    {'bin_in', 'BankCardBINRangeRef'()}.

%% struct 'PaymentTerminalCondition'
-type 'PaymentTerminalCondition'() :: #'domain_PaymentTerminalCondition'{}.

%% union 'PaymentTerminalConditionDefinition'
-type 'PaymentTerminalConditionDefinition'() ::
    {'provider_is', atom()}.

%% struct 'DigitalWalletCondition'
-type 'DigitalWalletCondition'() :: #'domain_DigitalWalletCondition'{}.

%% union 'DigitalWalletConditionDefinition'
-type 'DigitalWalletConditionDefinition'() ::
    {'provider_is', atom()}.

%% struct 'PartyCondition'
-type 'PartyCondition'() :: #'domain_PartyCondition'{}.

%% union 'PartyConditionDefinition'
-type 'PartyConditionDefinition'() ::
    {'shop_is', 'ShopID'()}.

%% struct 'ProxyRef'
-type 'ProxyRef'() :: #'domain_ProxyRef'{}.

%% struct 'ProxyDefinition'
-type 'ProxyDefinition'() :: #'domain_ProxyDefinition'{}.

%% struct 'Proxy'
-type 'Proxy'() :: #'domain_Proxy'{}.

%% struct 'SystemAccountSetRef'
-type 'SystemAccountSetRef'() :: #'domain_SystemAccountSetRef'{}.

%% struct 'SystemAccountSet'
-type 'SystemAccountSet'() :: #'domain_SystemAccountSet'{}.

%% struct 'SystemAccount'
-type 'SystemAccount'() :: #'domain_SystemAccount'{}.

%% union 'SystemAccountSetSelector'
-type 'SystemAccountSetSelector'() ::
    {'decisions', ['SystemAccountSetDecision'()]} |
    {'value', 'SystemAccountSetRef'()}.

%% struct 'SystemAccountSetDecision'
-type 'SystemAccountSetDecision'() :: #'domain_SystemAccountSetDecision'{}.

%% struct 'ExternalAccountSetRef'
-type 'ExternalAccountSetRef'() :: #'domain_ExternalAccountSetRef'{}.

%% struct 'ExternalAccountSet'
-type 'ExternalAccountSet'() :: #'domain_ExternalAccountSet'{}.

%% struct 'ExternalAccount'
-type 'ExternalAccount'() :: #'domain_ExternalAccount'{}.

%% union 'ExternalAccountSetSelector'
-type 'ExternalAccountSetSelector'() ::
    {'decisions', ['ExternalAccountSetDecision'()]} |
    {'value', 'ExternalAccountSetRef'()}.

%% struct 'ExternalAccountSetDecision'
-type 'ExternalAccountSetDecision'() :: #'domain_ExternalAccountSetDecision'{}.

%% struct 'PaymentInstitutionRef'
-type 'PaymentInstitutionRef'() :: #'domain_PaymentInstitutionRef'{}.

%% struct 'PaymentInstitution'
-type 'PaymentInstitution'() :: #'domain_PaymentInstitution'{}.

%% struct 'ContractPaymentInstitutionDefaults'
-type 'ContractPaymentInstitutionDefaults'() :: #'domain_ContractPaymentInstitutionDefaults'{}.

%% struct 'PartyPrototypeRef'
-type 'PartyPrototypeRef'() :: #'domain_PartyPrototypeRef'{}.

%% struct 'PartyPrototype'
-type 'PartyPrototype'() :: #'domain_PartyPrototype'{}.

%% struct 'ShopPrototype'
-type 'ShopPrototype'() :: #'domain_ShopPrototype'{}.

%% struct 'ContractPrototype'
-type 'ContractPrototype'() :: #'domain_ContractPrototype'{}.

%% struct 'PayoutToolPrototype'
-type 'PayoutToolPrototype'() :: #'domain_PayoutToolPrototype'{}.

%% struct 'GlobalsRef'
-type 'GlobalsRef'() :: #'domain_GlobalsRef'{}.

%% struct 'Globals'
-type 'Globals'() :: #'domain_Globals'{}.

%% struct 'Dummy'
-type 'Dummy'() :: #'domain_Dummy'{}.

%% struct 'DummyRef'
-type 'DummyRef'() :: #'domain_DummyRef'{}.

%% struct 'DummyObject'
-type 'DummyObject'() :: #'domain_DummyObject'{}.

%% struct 'DummyLink'
-type 'DummyLink'() :: #'domain_DummyLink'{}.

%% struct 'DummyLinkRef'
-type 'DummyLinkRef'() :: #'domain_DummyLinkRef'{}.

%% struct 'DummyLinkObject'
-type 'DummyLinkObject'() :: #'domain_DummyLinkObject'{}.

%% struct 'ContractTemplateObject'
-type 'ContractTemplateObject'() :: #'domain_ContractTemplateObject'{}.

%% struct 'TermSetHierarchyObject'
-type 'TermSetHierarchyObject'() :: #'domain_TermSetHierarchyObject'{}.

%% struct 'CategoryObject'
-type 'CategoryObject'() :: #'domain_CategoryObject'{}.

%% struct 'CurrencyObject'
-type 'CurrencyObject'() :: #'domain_CurrencyObject'{}.

%% struct 'ScheduleObject'
-type 'ScheduleObject'() :: #'domain_ScheduleObject'{}.

%% struct 'CalendarObject'
-type 'CalendarObject'() :: #'domain_CalendarObject'{}.

%% struct 'PaymentMethodObject'
-type 'PaymentMethodObject'() :: #'domain_PaymentMethodObject'{}.

%% struct 'PayoutMethodObject'
-type 'PayoutMethodObject'() :: #'domain_PayoutMethodObject'{}.

%% struct 'BankCardBINRangeObject'
-type 'BankCardBINRangeObject'() :: #'domain_BankCardBINRangeObject'{}.

%% struct 'ContractorObject'
-type 'ContractorObject'() :: #'domain_ContractorObject'{}.

%% struct 'ProviderObject'
-type 'ProviderObject'() :: #'domain_ProviderObject'{}.

%% struct 'TerminalObject'
-type 'TerminalObject'() :: #'domain_TerminalObject'{}.

%% struct 'InspectorObject'
-type 'InspectorObject'() :: #'domain_InspectorObject'{}.

%% struct 'PaymentInstitutionObject'
-type 'PaymentInstitutionObject'() :: #'domain_PaymentInstitutionObject'{}.

%% struct 'SystemAccountSetObject'
-type 'SystemAccountSetObject'() :: #'domain_SystemAccountSetObject'{}.

%% struct 'ExternalAccountSetObject'
-type 'ExternalAccountSetObject'() :: #'domain_ExternalAccountSetObject'{}.

%% struct 'ProxyObject'
-type 'ProxyObject'() :: #'domain_ProxyObject'{}.

%% struct 'PartyPrototypeObject'
-type 'PartyPrototypeObject'() :: #'domain_PartyPrototypeObject'{}.

%% struct 'GlobalsObject'
-type 'GlobalsObject'() :: #'domain_GlobalsObject'{}.

%% union 'Reference'
-type 'Reference'() ::
    {'category', 'CategoryRef'()} |
    {'currency', 'CurrencyRef'()} |
    {'schedule', 'ScheduleRef'()} |
    {'calendar', 'CalendarRef'()} |
    {'payment_method', 'PaymentMethodRef'()} |
    {'payout_method', 'PayoutMethodRef'()} |
    {'contractor', 'ContractorRef'()} |
    {'bank_card_bin_range', 'BankCardBINRangeRef'()} |
    {'contract_template', 'ContractTemplateRef'()} |
    {'term_set_hierarchy', 'TermSetHierarchyRef'()} |
    {'payment_institution', 'PaymentInstitutionRef'()} |
    {'provider', 'ProviderRef'()} |
    {'terminal', 'TerminalRef'()} |
    {'inspector', 'InspectorRef'()} |
    {'system_account_set', 'SystemAccountSetRef'()} |
    {'external_account_set', 'ExternalAccountSetRef'()} |
    {'proxy', 'ProxyRef'()} |
    {'globals', 'GlobalsRef'()} |
    {'dummy', 'DummyRef'()} |
    {'dummy_link', 'DummyLinkRef'()} |
    {'party_prototype', 'PartyPrototypeRef'()}.

%% union 'DomainObject'
-type 'DomainObject'() ::
    {'category', 'CategoryObject'()} |
    {'currency', 'CurrencyObject'()} |
    {'schedule', 'ScheduleObject'()} |
    {'calendar', 'CalendarObject'()} |
    {'payment_method', 'PaymentMethodObject'()} |
    {'payout_method', 'PayoutMethodObject'()} |
    {'contractor', 'ContractorObject'()} |
    {'bank_card_bin_range', 'BankCardBINRangeObject'()} |
    {'contract_template', 'ContractTemplateObject'()} |
    {'term_set_hierarchy', 'TermSetHierarchyObject'()} |
    {'payment_institution', 'PaymentInstitutionObject'()} |
    {'provider', 'ProviderObject'()} |
    {'terminal', 'TerminalObject'()} |
    {'inspector', 'InspectorObject'()} |
    {'system_account_set', 'SystemAccountSetObject'()} |
    {'external_account_set', 'ExternalAccountSetObject'()} |
    {'proxy', 'ProxyObject'()} |
    {'globals', 'GlobalsObject'()} |
    {'dummy', 'DummyObject'()} |
    {'dummy_link', 'DummyLinkObject'()} |
    {'party_prototype', 'PartyPrototypeObject'()}.

%%
%% services and functions
%%
-type service_name() :: none().

-type function_name() :: none().


-type struct_flavour() :: struct | exception | union.
-type field_num() :: pos_integer().
-type field_name() :: atom().
-type field_req() :: required | optional | undefined.

-type type_ref() :: {module(), atom()}.
-type field_type() ::
    bool | byte | i16 | i32 | i64 | string | double |
{enum, type_ref()} |
{struct, struct_flavour(), type_ref()} |
{list, field_type()} |
{set, field_type()} |
{map, field_type(), field_type()}.

-type struct_field_info() ::
    {field_num(), field_req(), field_type(), field_name(), any()}.
-type struct_info() ::
    {struct, struct_flavour(), [struct_field_info()]}.

-type enum_choice() ::
    'OnHoldExpiration'() |
    'RiskScore'() |
    'CategoryType'() |
    'PayoutMethod'() |
    'Residence'() |
    'BankCardPaymentSystem'() |
    'TerminalPaymentProvider'() |
    'DigitalWalletProvider'() |
    'MerchantCashFlowAccount'() |
    'ProviderCashFlowAccount'() |
    'SystemCashFlowAccount'() |
    'ExternalCashFlowAccount'() |
    'CashFlowConstant'() |
    'RoundingMethod'() |
    'PaymentInstitutionRealm'().

-type enum_field_info() ::
    {enum_choice(), integer()}.
-type enum_info() ::
    {enum, [enum_field_info()]}.

-spec typedefs() -> [typedef_name()].

typedefs() ->
    [
        'DataRevision',
        'ObjectID',
        'Metadata',
        'Amount',
        'AccountID',
        'InvoiceID',
        'InvoicePaymentID',
        'InvoicePaymentRefundID',
        'InvoicePaymentAdjustmentID',
        'InvoiceContext',
        'InvoicePaymentContext',
        'PaymentSessionID',
        'Fingerprint',
        'IPAddress',
        'InvoiceTemplateID',
        'PartyID',
        'PartyRevision',
        'PartyMetaNamespace',
        'PartyMetaData',
        'PartyMeta',
        'ShopID',
        'PayoutToolID',
        'ContractID',
        'ContractAdjustmentID',
        'CurrencySymbolicCode',
        'CalendarHolidaySet',
        'CustomerID',
        'CustomerBindingID',
        'RecurrentPaymentToolID',
        'Token',
        'DigitalWalletID',
        'CashFlowContext',
        'CashFlow',
        'FinalCashFlow',
        'ProviderAccountSet',
        'ProxyOptions',
        'Domain'
    ].

-spec enums() -> [enum_name()].

enums() ->
    [
        'OnHoldExpiration',
        'RiskScore',
        'CategoryType',
        'PayoutMethod',
        'Residence',
        'BankCardPaymentSystem',
        'TerminalPaymentProvider',
        'DigitalWalletProvider',
        'MerchantCashFlowAccount',
        'ProviderCashFlowAccount',
        'SystemCashFlowAccount',
        'ExternalCashFlowAccount',
        'CashFlowConstant',
        'RoundingMethod',
        'PaymentInstitutionRealm'
    ].

-spec structs() -> [struct_name()].

structs() ->
    [
        'ContactInfo',
        'OperationFailure',
        'OperationTimeout',
        'ExternalFailure',
        'Cash',
        'TransactionInfo',
        'Invoice',
        'InvoiceDetails',
        'InvoiceCart',
        'InvoiceLine',
        'InvoiceUnpaid',
        'InvoicePaid',
        'InvoiceCancelled',
        'InvoiceFulfilled',
        'InvoiceStatus',
        'InvoicePayment',
        'InvoicePaymentPending',
        'InvoicePaymentProcessed',
        'InvoicePaymentCaptured',
        'InvoicePaymentCancelled',
        'InvoicePaymentRefunded',
        'InvoicePaymentFailed',
        'InvoiceTemplate',
        'InvoiceTemplateDetails',
        'InvoiceTemplateProduct',
        'InvoiceTemplateProductPrice',
        'InvoiceTemplateCostUnlimited',
        'InvoicePaymentStatus',
        'TargetInvoicePaymentStatus',
        'Payer',
        'PaymentResourcePayer',
        'CustomerPayer',
        'ClientInfo',
        'PaymentRoute',
        'InvoicePaymentAdjustment',
        'InvoicePaymentAdjustmentPending',
        'InvoicePaymentAdjustmentCaptured',
        'InvoicePaymentAdjustmentCancelled',
        'InvoicePaymentAdjustmentStatus',
        'InvoicePaymentFlow',
        'InvoicePaymentFlowInstant',
        'InvoicePaymentFlowHold',
        'InvoicePaymentRefund',
        'InvoicePaymentRefundStatus',
        'InvoicePaymentRefundPending',
        'InvoicePaymentRefundSucceeded',
        'InvoicePaymentRefundFailed',
        'Blocking',
        'Unblocked',
        'Blocked',
        'Suspension',
        'Active',
        'Suspended',
        'Party',
        'PartyContactInfo',
        'Shop',
        'ShopAccount',
        'ShopDetails',
        'ShopLocation',
        'ContractorRef',
        'Contractor',
        'RegisteredUser',
        'LegalEntity',
        'RussianLegalEntity',
        'InternationalLegalEntity',
        'RussianBankAccount',
        'InternationalBankAccount',
        'PayoutTool',
        'PayoutToolInfo',
        'Contract',
        'LegalAgreement',
        'ContractStatus',
        'ContractActive',
        'ContractTerminated',
        'ContractExpired',
        'CategoryRef',
        'Category',
        'ContractTemplateRef',
        'ContractTemplate',
        'Lifetime',
        'LifetimeInterval',
        'ContractTemplateSelector',
        'ContractTemplateDecision',
        'ContractAdjustment',
        'TermSet',
        'TimedTermSet',
        'TermSetHierarchy',
        'TermSetHierarchyRef',
        'PaymentsServiceTerms',
        'PaymentHoldsServiceTerms',
        'PaymentRefundsServiceTerms',
        'RecurrentPaytoolsServiceTerms',
        'PayoutsServiceTerms',
        'PayoutCompilationPolicy',
        'PayoutMethodRef',
        'PayoutMethodDefinition',
        'PayoutMethodSelector',
        'PayoutMethodDecision',
        'CurrencyRef',
        'Currency',
        'CurrencySelector',
        'CurrencyDecision',
        'CategorySelector',
        'CategoryDecision',
        'ScheduleRef',
        'Schedule',
        'ScheduleSelector',
        'ScheduleDecision',
        'CalendarRef',
        'Calendar',
        'CalendarHoliday',
        'CashRange',
        'CashBound',
        'CashLimitSelector',
        'CashLimitDecision',
        'PaymentMethod',
        'PaymentTool',
        'DisposablePaymentResource',
        'BankCard',
        'PaymentTerminal',
        'DigitalWallet',
        'BankCardBINRangeRef',
        'BankCardBINRange',
        'PaymentMethodRef',
        'PaymentMethodDefinition',
        'PaymentMethodSelector',
        'PaymentMethodDecision',
        'HoldLifetime',
        'HoldLifetimeSelector',
        'HoldLifetimeDecision',
        'CashFlowAccount',
        'CashFlowPosting',
        'FinalCashFlowPosting',
        'FinalCashFlowAccount',
        'CashVolume',
        'CashVolumeFixed',
        'CashVolumeShare',
        'CashVolumeProduct',
        'CashFlowSelector',
        'CashFlowDecision',
        'ProviderRef',
        'Provider',
        'PaymentsProvisionTerms',
        'PaymentHoldsProvisionTerms',
        'PaymentRefundsProvisionTerms',
        'RecurrentPaytoolsProvisionTerms',
        'CashValueSelector',
        'CashValueDecision',
        'ProviderAccount',
        'ProviderSelector',
        'ProviderDecision',
        'TerminalRef',
        'InspectorRef',
        'Inspector',
        'InspectorSelector',
        'InspectorDecision',
        'Terminal',
        'TerminalSelector',
        'TerminalDecision',
        'Predicate',
        'Condition',
        'PaymentToolCondition',
        'BankCardCondition',
        'BankCardConditionDefinition',
        'PaymentTerminalCondition',
        'PaymentTerminalConditionDefinition',
        'DigitalWalletCondition',
        'DigitalWalletConditionDefinition',
        'PartyCondition',
        'PartyConditionDefinition',
        'ProxyRef',
        'ProxyDefinition',
        'Proxy',
        'SystemAccountSetRef',
        'SystemAccountSet',
        'SystemAccount',
        'SystemAccountSetSelector',
        'SystemAccountSetDecision',
        'ExternalAccountSetRef',
        'ExternalAccountSet',
        'ExternalAccount',
        'ExternalAccountSetSelector',
        'ExternalAccountSetDecision',
        'PaymentInstitutionRef',
        'PaymentInstitution',
        'ContractPaymentInstitutionDefaults',
        'PartyPrototypeRef',
        'PartyPrototype',
        'ShopPrototype',
        'ContractPrototype',
        'PayoutToolPrototype',
        'GlobalsRef',
        'Globals',
        'Dummy',
        'DummyRef',
        'DummyObject',
        'DummyLink',
        'DummyLinkRef',
        'DummyLinkObject',
        'ContractTemplateObject',
        'TermSetHierarchyObject',
        'CategoryObject',
        'CurrencyObject',
        'ScheduleObject',
        'CalendarObject',
        'PaymentMethodObject',
        'PayoutMethodObject',
        'BankCardBINRangeObject',
        'ContractorObject',
        'ProviderObject',
        'TerminalObject',
        'InspectorObject',
        'PaymentInstitutionObject',
        'SystemAccountSetObject',
        'ExternalAccountSetObject',
        'ProxyObject',
        'PartyPrototypeObject',
        'GlobalsObject',
        'Reference',
        'DomainObject'
    ].

-spec services() -> [].

services() ->
    [].

-spec namespace() -> namespace().

namespace() ->
    'domain'.

-spec typedef_info(typedef_name()) -> field_type() | no_return().

typedef_info('DataRevision') ->
    i64;

typedef_info('ObjectID') ->
    i32;

typedef_info('Metadata') ->
    {struct, union, {dmsl_json_thrift, 'Value'}};

typedef_info('Amount') ->
    i64;

typedef_info('AccountID') ->
    i64;

typedef_info('InvoiceID') ->
    string;

typedef_info('InvoicePaymentID') ->
    string;

typedef_info('InvoicePaymentRefundID') ->
    string;

typedef_info('InvoicePaymentAdjustmentID') ->
    string;

typedef_info('InvoiceContext') ->
    {struct, struct, {dmsl_base_thrift, 'Content'}};

typedef_info('InvoicePaymentContext') ->
    {struct, struct, {dmsl_base_thrift, 'Content'}};

typedef_info('PaymentSessionID') ->
    string;

typedef_info('Fingerprint') ->
    string;

typedef_info('IPAddress') ->
    string;

typedef_info('InvoiceTemplateID') ->
    string;

typedef_info('PartyID') ->
    string;

typedef_info('PartyRevision') ->
    i64;

typedef_info('PartyMetaNamespace') ->
    string;

typedef_info('PartyMetaData') ->
    {struct, union, {dmsl_msgpack_thrift, 'Value'}};

typedef_info('PartyMeta') ->
    {map, string, {struct, union, {dmsl_msgpack_thrift, 'Value'}}};

typedef_info('ShopID') ->
    string;

typedef_info('PayoutToolID') ->
    string;

typedef_info('ContractID') ->
    string;

typedef_info('ContractAdjustmentID') ->
    string;

typedef_info('CurrencySymbolicCode') ->
    string;

typedef_info('CalendarHolidaySet') ->
    {map, i32, {set, {struct, struct, {dmsl_domain_thrift, 'CalendarHoliday'}}}};

typedef_info('CustomerID') ->
    string;

typedef_info('CustomerBindingID') ->
    string;

typedef_info('RecurrentPaymentToolID') ->
    string;

typedef_info('Token') ->
    string;

typedef_info('DigitalWalletID') ->
    string;

typedef_info('CashFlowContext') ->
    {map, {enum, {dmsl_domain_thrift, 'CashFlowConstant'}}, {struct, struct, {dmsl_domain_thrift, 'Cash'}}};

typedef_info('CashFlow') ->
    {list, {struct, struct, {dmsl_domain_thrift, 'CashFlowPosting'}}};

typedef_info('FinalCashFlow') ->
    {list, {struct, struct, {dmsl_domain_thrift, 'FinalCashFlowPosting'}}};

typedef_info('ProviderAccountSet') ->
    {map, {struct, struct, {dmsl_domain_thrift, 'CurrencyRef'}}, {struct, struct, {dmsl_domain_thrift, 'ProviderAccount'}}};

typedef_info('ProxyOptions') ->
    {map, string, string};

typedef_info('Domain') ->
    {map, {struct, union, {dmsl_domain_thrift, 'Reference'}}, {struct, union, {dmsl_domain_thrift, 'DomainObject'}}};

typedef_info(_) -> erlang:error(badarg).

-spec enum_info(enum_name()) -> enum_info() | no_return().

enum_info('OnHoldExpiration') ->
    {enum, [
        {'cancel', 0},
        {'capture', 1}
    ]};

enum_info('RiskScore') ->
    {enum, [
        {'low', 1},
        {'high', 100},
        {'fatal', 9999}
    ]};

enum_info('CategoryType') ->
    {enum, [
        {'test', 0},
        {'live', 1}
    ]};

enum_info('PayoutMethod') ->
    {enum, [
        {'russian_bank_account', 0},
        {'international_bank_account', 1}
    ]};

enum_info('Residence') ->
    {enum, [
        {'abh', 0},
        {'aus', 1},
        {'aut', 2},
        {'aze', 3},
        {'alb', 4},
        {'dza', 5},
        {'asm', 6},
        {'aia', 7},
        {'ago', 8},
        {'and', 9},
        {'ata', 10},
        {'atg', 11},
        {'arg', 12},
        {'arm', 13},
        {'abw', 14},
        {'afg', 15},
        {'bhs', 16},
        {'bgd', 17},
        {'brb', 18},
        {'bhr', 19},
        {'blr', 20},
        {'blz', 21},
        {'bel', 22},
        {'ben', 23},
        {'bmu', 24},
        {'bgr', 25},
        {'bol', 26},
        {'bes', 27},
        {'bih', 28},
        {'bwa', 29},
        {'bra', 30},
        {'iot', 31},
        {'brn', 32},
        {'bfa', 33},
        {'bdi', 34},
        {'btn', 35},
        {'vut', 36},
        {'hun', 37},
        {'ven', 38},
        {'vgb', 39},
        {'vir', 40},
        {'vnm', 41},
        {'gab', 42},
        {'hti', 43},
        {'guy', 44},
        {'gmb', 45},
        {'gha', 46},
        {'glp', 47},
        {'gtm', 48},
        {'gin', 49},
        {'gnb', 50},
        {'deu', 51},
        {'ggy', 52},
        {'gib', 53},
        {'hnd', 54},
        {'hkg', 55},
        {'grd', 56},
        {'grl', 57},
        {'grc', 58},
        {'geo', 59},
        {'gum', 60},
        {'dnk', 61},
        {'jey', 62},
        {'dji', 63},
        {'dma', 64},
        {'dom', 65},
        {'egy', 66},
        {'zmb', 67},
        {'esh', 68},
        {'zwe', 69},
        {'isr', 70},
        {'ind', 71},
        {'idn', 72},
        {'jor', 73},
        {'irq', 74},
        {'irn', 75},
        {'irl', 76},
        {'isl', 77},
        {'esp', 78},
        {'ita', 79},
        {'yem', 80},
        {'cpv', 81},
        {'kaz', 82},
        {'khm', 83},
        {'cmr', 84},
        {'can', 85},
        {'qat', 86},
        {'ken', 87},
        {'cyp', 88},
        {'kgz', 89},
        {'kir', 90},
        {'chn', 91},
        {'cck', 92},
        {'col', 93},
        {'com', 94},
        {'cog', 95},
        {'cod', 96},
        {'prk', 97},
        {'kor', 98},
        {'cri', 99},
        {'civ', 100},
        {'cub', 101},
        {'kwt', 102},
        {'cuw', 103},
        {'lao', 104},
        {'lva', 105},
        {'lso', 106},
        {'lbn', 107},
        {'lby', 108},
        {'lbr', 109},
        {'lie', 110},
        {'ltu', 111},
        {'lux', 112},
        {'mus', 113},
        {'mrt', 114},
        {'mdg', 115},
        {'myt', 116},
        {'mac', 117},
        {'mwi', 118},
        {'mys', 119},
        {'mli', 120},
        {'umi', 121},
        {'mdv', 122},
        {'mlt', 123},
        {'mar', 124},
        {'mtq', 125},
        {'mhl', 126},
        {'mex', 127},
        {'fsm', 128},
        {'moz', 129},
        {'mda', 130},
        {'mco', 131},
        {'mng', 132},
        {'msr', 133},
        {'mmr', 134},
        {'nam', 135},
        {'nru', 136},
        {'npl', 137},
        {'ner', 138},
        {'nga', 139},
        {'nld', 140},
        {'nic', 141},
        {'niu', 142},
        {'nzl', 143},
        {'ncl', 144},
        {'nor', 145},
        {'are', 146},
        {'omn', 147},
        {'bvt', 148},
        {'imn', 149},
        {'nfk', 150},
        {'cxr', 151},
        {'hmd', 152},
        {'cym', 153},
        {'cok', 154},
        {'tca', 155},
        {'pak', 156},
        {'plw', 157},
        {'pse', 158},
        {'pan', 159},
        {'vat', 160},
        {'png', 161},
        {'pry', 162},
        {'per', 163},
        {'pcn', 164},
        {'pol', 165},
        {'prt', 166},
        {'pri', 167},
        {'mkd', 168},
        {'reu', 169},
        {'rus', 170},
        {'rwa', 171},
        {'rou', 172},
        {'wsm', 173},
        {'smr', 174},
        {'stp', 175},
        {'sau', 176},
        {'swz', 177},
        {'shn', 178},
        {'mnp', 179},
        {'blm', 180},
        {'maf', 181},
        {'sen', 182},
        {'vct', 183},
        {'kna', 184},
        {'lca', 185},
        {'spm', 186},
        {'srb', 187},
        {'syc', 188},
        {'sgp', 189},
        {'sxm', 190},
        {'syr', 191},
        {'svk', 192},
        {'svn', 193},
        {'gbr', 194},
        {'usa', 195},
        {'slb', 196},
        {'som', 197},
        {'sdn', 198},
        {'sur', 199},
        {'sle', 200},
        {'tjk', 201},
        {'tha', 202},
        {'twn', 203},
        {'tza', 204},
        {'tls', 205},
        {'tgo', 206},
        {'tkl', 207},
        {'ton', 208},
        {'tto', 209},
        {'tuv', 210},
        {'tun', 211},
        {'tkm', 212},
        {'tur', 213},
        {'uga', 214},
        {'uzb', 215},
        {'ukr', 216},
        {'wlf', 217},
        {'ury', 218},
        {'fro', 219},
        {'fji', 220},
        {'phl', 221},
        {'fin', 222},
        {'flk', 223},
        {'fra', 224},
        {'guf', 225},
        {'pyf', 226},
        {'atf', 227},
        {'hrv', 228},
        {'caf', 229},
        {'tcd', 230},
        {'mne', 231},
        {'cze', 232},
        {'chl', 233},
        {'che', 234},
        {'swe', 235},
        {'sjm', 236},
        {'lka', 237},
        {'ecu', 238},
        {'gnq', 239},
        {'ala', 240},
        {'slv', 241},
        {'eri', 242},
        {'est', 243},
        {'eth', 244},
        {'zaf', 245},
        {'sgs', 246},
        {'ost', 247},
        {'ssd', 248},
        {'jam', 249},
        {'jpn', 250}
    ]};

enum_info('BankCardPaymentSystem') ->
    {enum, [
        {'visa', 0},
        {'mastercard', 1},
        {'visaelectron', 2},
        {'maestro', 3},
        {'forbrugsforeningen', 4},
        {'dankort', 5},
        {'amex', 6},
        {'dinersclub', 7},
        {'discover', 8},
        {'unionpay', 9},
        {'jcb', 10},
        {'nspkmir', 11}
    ]};

enum_info('TerminalPaymentProvider') ->
    {enum, [
        {'euroset', 0}
    ]};

enum_info('DigitalWalletProvider') ->
    {enum, [
        {'qiwi', 0}
    ]};

enum_info('MerchantCashFlowAccount') ->
    {enum, [
        {'settlement', 0},
        {'guarantee', 1}
    ]};

enum_info('ProviderCashFlowAccount') ->
    {enum, [
        {'settlement', 0}
    ]};

enum_info('SystemCashFlowAccount') ->
    {enum, [
        {'settlement', 0}
    ]};

enum_info('ExternalCashFlowAccount') ->
    {enum, [
        {'income', 0},
        {'outcome', 1}
    ]};

enum_info('CashFlowConstant') ->
    {enum, [
        {'operation_amount', 1}
    ]};

enum_info('RoundingMethod') ->
    {enum, [
        {'round_half_towards_zero', 0},
        {'round_half_away_from_zero', 1}
    ]};

enum_info('PaymentInstitutionRealm') ->
    {enum, [
        {'test', 0},
        {'live', 1}
    ]};

enum_info(_) -> erlang:error(badarg).

-spec struct_info(struct_name() | exception_name()) -> struct_info() | no_return().

struct_info('ContactInfo') ->
    {struct, struct, [
    {1, optional, string, 'phone_number', undefined},
    {2, optional, string, 'email', undefined}
]};

struct_info('OperationFailure') ->
    {struct, union, [
    {1, optional, {struct, struct, {dmsl_domain_thrift, 'OperationTimeout'}}, 'operation_timeout', undefined},
    {2, optional, {struct, struct, {dmsl_domain_thrift, 'ExternalFailure'}}, 'external_failure', undefined}
]};

struct_info('OperationTimeout') ->
    {struct, struct, []};

struct_info('ExternalFailure') ->
    {struct, struct, [
    {1, required, string, 'code', undefined},
    {2, optional, string, 'description', undefined}
]};

struct_info('Cash') ->
    {struct, struct, [
    {1, required, i64, 'amount', undefined},
    {2, required, {struct, struct, {dmsl_domain_thrift, 'CurrencyRef'}}, 'currency', undefined}
]};

struct_info('TransactionInfo') ->
    {struct, struct, [
    {1, required, string, 'id', undefined},
    {2, optional, string, 'timestamp', undefined},
    {3, required, {map, string, string}, 'extra', undefined}
]};

struct_info('Invoice') ->
    {struct, struct, [
    {1, required, string, 'id', undefined},
    {2, required, string, 'owner_id', undefined},
    {13, optional, i64, 'party_revision', undefined},
    {3, required, string, 'shop_id', undefined},
    {4, required, string, 'created_at', undefined},
    {6, required, {struct, union, {dmsl_domain_thrift, 'InvoiceStatus'}}, 'status', undefined},
    {7, required, {struct, struct, {dmsl_domain_thrift, 'InvoiceDetails'}}, 'details', undefined},
    {8, required, string, 'due', undefined},
    {10, required, {struct, struct, {dmsl_domain_thrift, 'Cash'}}, 'cost', undefined},
    {11, optional, {struct, struct, {dmsl_base_thrift, 'Content'}}, 'context', undefined},
    {12, optional, string, 'template_id', undefined}
]};

struct_info('InvoiceDetails') ->
    {struct, struct, [
    {1, required, string, 'product', undefined},
    {2, optional, string, 'description', undefined},
    {3, optional, {struct, struct, {dmsl_domain_thrift, 'InvoiceCart'}}, 'cart', undefined}
]};

struct_info('InvoiceCart') ->
    {struct, struct, [
    {1, required, {list, {struct, struct, {dmsl_domain_thrift, 'InvoiceLine'}}}, 'lines', undefined}
]};

struct_info('InvoiceLine') ->
    {struct, struct, [
    {1, required, string, 'product', undefined},
    {2, required, i32, 'quantity', undefined},
    {3, required, {struct, struct, {dmsl_domain_thrift, 'Cash'}}, 'price', undefined},
    {4, required, {map, string, {struct, union, {dmsl_msgpack_thrift, 'Value'}}}, 'metadata', undefined}
]};

struct_info('InvoiceUnpaid') ->
    {struct, struct, []};

struct_info('InvoicePaid') ->
    {struct, struct, []};

struct_info('InvoiceCancelled') ->
    {struct, struct, [
    {1, required, string, 'details', undefined}
]};

struct_info('InvoiceFulfilled') ->
    {struct, struct, [
    {1, required, string, 'details', undefined}
]};

struct_info('InvoiceStatus') ->
    {struct, union, [
    {1, optional, {struct, struct, {dmsl_domain_thrift, 'InvoiceUnpaid'}}, 'unpaid', undefined},
    {2, optional, {struct, struct, {dmsl_domain_thrift, 'InvoicePaid'}}, 'paid', undefined},
    {3, optional, {struct, struct, {dmsl_domain_thrift, 'InvoiceCancelled'}}, 'cancelled', undefined},
    {4, optional, {struct, struct, {dmsl_domain_thrift, 'InvoiceFulfilled'}}, 'fulfilled', undefined}
]};

struct_info('InvoicePayment') ->
    {struct, struct, [
    {1, required, string, 'id', undefined},
    {2, required, string, 'created_at', undefined},
    {10, required, i64, 'domain_revision', undefined},
    {15, optional, i64, 'party_revision', undefined},
    {3, required, {struct, union, {dmsl_domain_thrift, 'InvoicePaymentStatus'}}, 'status', undefined},
    {14, required, {struct, union, {dmsl_domain_thrift, 'Payer'}}, 'payer', undefined},
    {8, required, {struct, struct, {dmsl_domain_thrift, 'Cash'}}, 'cost', undefined},
    {13, required, {struct, union, {dmsl_domain_thrift, 'InvoicePaymentFlow'}}, 'flow', undefined},
    {6, optional, {struct, struct, {dmsl_base_thrift, 'Content'}}, 'context', undefined}
]};

struct_info('InvoicePaymentPending') ->
    {struct, struct, []};

struct_info('InvoicePaymentProcessed') ->
    {struct, struct, []};

struct_info('InvoicePaymentCaptured') ->
    {struct, struct, [
    {1, optional, string, 'reason', undefined}
]};

struct_info('InvoicePaymentCancelled') ->
    {struct, struct, [
    {1, optional, string, 'reason', undefined}
]};

struct_info('InvoicePaymentRefunded') ->
    {struct, struct, []};

struct_info('InvoicePaymentFailed') ->
    {struct, struct, [
    {1, required, {struct, union, {dmsl_domain_thrift, 'OperationFailure'}}, 'failure', undefined}
]};

struct_info('InvoiceTemplate') ->
    {struct, struct, [
    {1, required, string, 'id', undefined},
    {2, required, string, 'owner_id', undefined},
    {3, required, string, 'shop_id', undefined},
    {5, required, {struct, struct, {dmsl_domain_thrift, 'LifetimeInterval'}}, 'invoice_lifetime', undefined},
    {9, required, string, 'product', undefined},
    {10, optional, string, 'description', undefined},
    {8, required, {struct, union, {dmsl_domain_thrift, 'InvoiceTemplateDetails'}}, 'details', undefined},
    {7, optional, {struct, struct, {dmsl_base_thrift, 'Content'}}, 'context', undefined}
]};

struct_info('InvoiceTemplateDetails') ->
    {struct, union, [
    {1, optional, {struct, struct, {dmsl_domain_thrift, 'InvoiceCart'}}, 'cart', undefined},
    {2, optional, {struct, struct, {dmsl_domain_thrift, 'InvoiceTemplateProduct'}}, 'product', undefined}
]};

struct_info('InvoiceTemplateProduct') ->
    {struct, struct, [
    {1, required, string, 'product', undefined},
    {2, required, {struct, union, {dmsl_domain_thrift, 'InvoiceTemplateProductPrice'}}, 'price', undefined},
    {3, required, {map, string, {struct, union, {dmsl_msgpack_thrift, 'Value'}}}, 'metadata', undefined}
]};

struct_info('InvoiceTemplateProductPrice') ->
    {struct, union, [
    {1, optional, {struct, struct, {dmsl_domain_thrift, 'Cash'}}, 'fixed', undefined},
    {2, optional, {struct, struct, {dmsl_domain_thrift, 'CashRange'}}, 'range', undefined},
    {3, optional, {struct, struct, {dmsl_domain_thrift, 'InvoiceTemplateCostUnlimited'}}, 'unlim', undefined}
]};

struct_info('InvoiceTemplateCostUnlimited') ->
    {struct, struct, []};

struct_info('InvoicePaymentStatus') ->
    {struct, union, [
    {1, optional, {struct, struct, {dmsl_domain_thrift, 'InvoicePaymentPending'}}, 'pending', undefined},
    {4, optional, {struct, struct, {dmsl_domain_thrift, 'InvoicePaymentProcessed'}}, 'processed', undefined},
    {2, optional, {struct, struct, {dmsl_domain_thrift, 'InvoicePaymentCaptured'}}, 'captured', undefined},
    {5, optional, {struct, struct, {dmsl_domain_thrift, 'InvoicePaymentCancelled'}}, 'cancelled', undefined},
    {6, optional, {struct, struct, {dmsl_domain_thrift, 'InvoicePaymentRefunded'}}, 'refunded', undefined},
    {3, optional, {struct, struct, {dmsl_domain_thrift, 'InvoicePaymentFailed'}}, 'failed', undefined}
]};

struct_info('TargetInvoicePaymentStatus') ->
    {struct, union, [
    {1, optional, {struct, struct, {dmsl_domain_thrift, 'InvoicePaymentProcessed'}}, 'processed', undefined},
    {2, optional, {struct, struct, {dmsl_domain_thrift, 'InvoicePaymentCaptured'}}, 'captured', undefined},
    {3, optional, {struct, struct, {dmsl_domain_thrift, 'InvoicePaymentCancelled'}}, 'cancelled', undefined},
    {4, optional, {struct, struct, {dmsl_domain_thrift, 'InvoicePaymentRefunded'}}, 'refunded', undefined}
]};

struct_info('Payer') ->
    {struct, union, [
    {1, optional, {struct, struct, {dmsl_domain_thrift, 'PaymentResourcePayer'}}, 'payment_resource', undefined},
    {2, optional, {struct, struct, {dmsl_domain_thrift, 'CustomerPayer'}}, 'customer', undefined}
]};

struct_info('PaymentResourcePayer') ->
    {struct, struct, [
    {1, required, {struct, struct, {dmsl_domain_thrift, 'DisposablePaymentResource'}}, 'resource', undefined},
    {2, required, {struct, struct, {dmsl_domain_thrift, 'ContactInfo'}}, 'contact_info', undefined}
]};

struct_info('CustomerPayer') ->
    {struct, struct, [
    {1, required, string, 'customer_id', undefined},
    {2, required, string, 'customer_binding_id', undefined},
    {3, required, string, 'rec_payment_tool_id', undefined},
    {4, required, {struct, union, {dmsl_domain_thrift, 'PaymentTool'}}, 'payment_tool', undefined},
    {5, required, {struct, struct, {dmsl_domain_thrift, 'ContactInfo'}}, 'contact_info', undefined}
]};

struct_info('ClientInfo') ->
    {struct, struct, [
    {1, optional, string, 'ip_address', undefined},
    {2, optional, string, 'fingerprint', undefined}
]};

struct_info('PaymentRoute') ->
    {struct, struct, [
    {1, required, {struct, struct, {dmsl_domain_thrift, 'ProviderRef'}}, 'provider', undefined},
    {2, required, {struct, struct, {dmsl_domain_thrift, 'TerminalRef'}}, 'terminal', undefined}
]};

struct_info('InvoicePaymentAdjustment') ->
    {struct, struct, [
    {1, required, string, 'id', undefined},
    {2, required, {struct, union, {dmsl_domain_thrift, 'InvoicePaymentAdjustmentStatus'}}, 'status', undefined},
    {3, required, string, 'created_at', undefined},
    {4, required, i64, 'domain_revision', undefined},
    {5, required, string, 'reason', undefined},
    {6, required, {list, {struct, struct, {dmsl_domain_thrift, 'FinalCashFlowPosting'}}}, 'new_cash_flow', undefined},
    {7, required, {list, {struct, struct, {dmsl_domain_thrift, 'FinalCashFlowPosting'}}}, 'old_cash_flow_inverse', undefined}
]};

struct_info('InvoicePaymentAdjustmentPending') ->
    {struct, struct, []};

struct_info('InvoicePaymentAdjustmentCaptured') ->
    {struct, struct, [
    {1, required, string, 'at', undefined}
]};

struct_info('InvoicePaymentAdjustmentCancelled') ->
    {struct, struct, [
    {1, required, string, 'at', undefined}
]};

struct_info('InvoicePaymentAdjustmentStatus') ->
    {struct, union, [
    {1, optional, {struct, struct, {dmsl_domain_thrift, 'InvoicePaymentAdjustmentPending'}}, 'pending', undefined},
    {2, optional, {struct, struct, {dmsl_domain_thrift, 'InvoicePaymentAdjustmentCaptured'}}, 'captured', undefined},
    {3, optional, {struct, struct, {dmsl_domain_thrift, 'InvoicePaymentAdjustmentCancelled'}}, 'cancelled', undefined}
]};

struct_info('InvoicePaymentFlow') ->
    {struct, union, [
    {1, optional, {struct, struct, {dmsl_domain_thrift, 'InvoicePaymentFlowInstant'}}, 'instant', undefined},
    {2, optional, {struct, struct, {dmsl_domain_thrift, 'InvoicePaymentFlowHold'}}, 'hold', undefined}
]};

struct_info('InvoicePaymentFlowInstant') ->
    {struct, struct, []};

struct_info('InvoicePaymentFlowHold') ->
    {struct, struct, [
    {1, required, {enum, {dmsl_domain_thrift, 'OnHoldExpiration'}}, 'on_hold_expiration', undefined},
    {2, required, string, 'held_until', undefined}
]};

struct_info('InvoicePaymentRefund') ->
    {struct, struct, [
    {1, required, string, 'id', undefined},
    {2, required, {struct, union, {dmsl_domain_thrift, 'InvoicePaymentRefundStatus'}}, 'status', undefined},
    {3, required, string, 'created_at', undefined},
    {4, required, i64, 'domain_revision', undefined},
    {5, optional, string, 'reason', undefined}
]};

struct_info('InvoicePaymentRefundStatus') ->
    {struct, union, [
    {1, optional, {struct, struct, {dmsl_domain_thrift, 'InvoicePaymentRefundPending'}}, 'pending', undefined},
    {2, optional, {struct, struct, {dmsl_domain_thrift, 'InvoicePaymentRefundSucceeded'}}, 'succeeded', undefined},
    {3, optional, {struct, struct, {dmsl_domain_thrift, 'InvoicePaymentRefundFailed'}}, 'failed', undefined}
]};

struct_info('InvoicePaymentRefundPending') ->
    {struct, struct, []};

struct_info('InvoicePaymentRefundSucceeded') ->
    {struct, struct, []};

struct_info('InvoicePaymentRefundFailed') ->
    {struct, struct, [
    {1, required, {struct, union, {dmsl_domain_thrift, 'OperationFailure'}}, 'failure', undefined}
]};

struct_info('Blocking') ->
    {struct, union, [
    {1, optional, {struct, struct, {dmsl_domain_thrift, 'Unblocked'}}, 'unblocked', undefined},
    {2, optional, {struct, struct, {dmsl_domain_thrift, 'Blocked'}}, 'blocked', undefined}
]};

struct_info('Unblocked') ->
    {struct, struct, [
    {1, required, string, 'reason', undefined},
    {2, required, string, 'since', undefined}
]};

struct_info('Blocked') ->
    {struct, struct, [
    {1, required, string, 'reason', undefined},
    {2, required, string, 'since', undefined}
]};

struct_info('Suspension') ->
    {struct, union, [
    {1, optional, {struct, struct, {dmsl_domain_thrift, 'Active'}}, 'active', undefined},
    {2, optional, {struct, struct, {dmsl_domain_thrift, 'Suspended'}}, 'suspended', undefined}
]};

struct_info('Active') ->
    {struct, struct, [
    {1, required, string, 'since', undefined}
]};

struct_info('Suspended') ->
    {struct, struct, [
    {1, required, string, 'since', undefined}
]};

struct_info('Party') ->
    {struct, struct, [
    {1, required, string, 'id', undefined},
    {7, required, {struct, struct, {dmsl_domain_thrift, 'PartyContactInfo'}}, 'contact_info', undefined},
    {8, required, string, 'created_at', undefined},
    {2, required, {struct, union, {dmsl_domain_thrift, 'Blocking'}}, 'blocking', undefined},
    {3, required, {struct, union, {dmsl_domain_thrift, 'Suspension'}}, 'suspension', undefined},
    {4, required, {map, string, {struct, struct, {dmsl_domain_thrift, 'Contract'}}}, 'contracts', undefined},
    {5, required, {map, string, {struct, struct, {dmsl_domain_thrift, 'Shop'}}}, 'shops', undefined},
    {6, required, i64, 'revision', undefined}
]};

struct_info('PartyContactInfo') ->
    {struct, struct, [
    {1, required, string, 'email', undefined}
]};

struct_info('Shop') ->
    {struct, struct, [
    {1, required, string, 'id', undefined},
    {11, required, string, 'created_at', undefined},
    {2, required, {struct, union, {dmsl_domain_thrift, 'Blocking'}}, 'blocking', undefined},
    {3, required, {struct, union, {dmsl_domain_thrift, 'Suspension'}}, 'suspension', undefined},
    {4, required, {struct, struct, {dmsl_domain_thrift, 'ShopDetails'}}, 'details', undefined},
    {10, required, {struct, union, {dmsl_domain_thrift, 'ShopLocation'}}, 'location', undefined},
    {5, required, {struct, struct, {dmsl_domain_thrift, 'CategoryRef'}}, 'category', undefined},
    {6, optional, {struct, struct, {dmsl_domain_thrift, 'ShopAccount'}}, 'account', undefined},
    {7, required, string, 'contract_id', undefined},
    {8, optional, string, 'payout_tool_id', undefined},
    {12, optional, {struct, struct, {dmsl_domain_thrift, 'ScheduleRef'}}, 'payout_schedule', undefined}
]};

struct_info('ShopAccount') ->
    {struct, struct, [
    {1, required, {struct, struct, {dmsl_domain_thrift, 'CurrencyRef'}}, 'currency', undefined},
    {2, required, i64, 'settlement', undefined},
    {3, required, i64, 'guarantee', undefined},
    {4, required, i64, 'payout', undefined}
]};

struct_info('ShopDetails') ->
    {struct, struct, [
    {1, required, string, 'name', undefined},
    {2, optional, string, 'description', undefined}
]};

struct_info('ShopLocation') ->
    {struct, union, [
    {1, optional, string, 'url', undefined}
]};

struct_info('ContractorRef') ->
    {struct, struct, [
    {1, required, i32, 'id', undefined}
]};

struct_info('Contractor') ->
    {struct, union, [
    {1, optional, {struct, union, {dmsl_domain_thrift, 'LegalEntity'}}, 'legal_entity', undefined},
    {2, optional, {struct, struct, {dmsl_domain_thrift, 'RegisteredUser'}}, 'registered_user', undefined}
]};

struct_info('RegisteredUser') ->
    {struct, struct, [
    {1, required, string, 'email', undefined}
]};

struct_info('LegalEntity') ->
    {struct, union, [
    {1, optional, {struct, struct, {dmsl_domain_thrift, 'RussianLegalEntity'}}, 'russian_legal_entity', undefined},
    {2, optional, {struct, struct, {dmsl_domain_thrift, 'InternationalLegalEntity'}}, 'international_legal_entity', undefined}
]};

struct_info('RussianLegalEntity') ->
    {struct, struct, [
    {1, required, string, 'registered_name', undefined},
    {2, required, string, 'registered_number', undefined},
    {3, required, string, 'inn', undefined},
    {4, required, string, 'actual_address', undefined},
    {5, required, string, 'post_address', undefined},
    {6, required, string, 'representative_position', undefined},
    {7, required, string, 'representative_full_name', undefined},
    {8, required, string, 'representative_document', undefined},
    {9, required, {struct, struct, {dmsl_domain_thrift, 'RussianBankAccount'}}, 'russian_bank_account', undefined}
]};

struct_info('InternationalLegalEntity') ->
    {struct, struct, [
    {1, required, string, 'legal_name', undefined},
    {2, optional, string, 'trading_name', undefined},
    {3, required, string, 'registered_address', undefined},
    {4, optional, string, 'actual_address', undefined},
    {5, optional, string, 'registered_number', undefined}
]};

struct_info('RussianBankAccount') ->
    {struct, struct, [
    {1, required, string, 'account', undefined},
    {2, required, string, 'bank_name', undefined},
    {3, required, string, 'bank_post_account', undefined},
    {4, required, string, 'bank_bik', undefined}
]};

struct_info('InternationalBankAccount') ->
    {struct, struct, [
    {1, required, string, 'account_holder', undefined},
    {2, required, string, 'bank_name', undefined},
    {3, required, string, 'bank_address', undefined},
    {4, required, string, 'iban', undefined},
    {5, required, string, 'bic', undefined},
    {6, optional, string, 'local_bank_code', undefined}
]};

struct_info('PayoutTool') ->
    {struct, struct, [
    {1, required, string, 'id', undefined},
    {4, required, string, 'created_at', undefined},
    {2, required, {struct, struct, {dmsl_domain_thrift, 'CurrencyRef'}}, 'currency', undefined},
    {3, required, {struct, union, {dmsl_domain_thrift, 'PayoutToolInfo'}}, 'payout_tool_info', undefined}
]};

struct_info('PayoutToolInfo') ->
    {struct, union, [
    {1, optional, {struct, struct, {dmsl_domain_thrift, 'RussianBankAccount'}}, 'russian_bank_account', undefined},
    {2, optional, {struct, struct, {dmsl_domain_thrift, 'InternationalBankAccount'}}, 'international_bank_account', undefined}
]};

struct_info('Contract') ->
    {struct, struct, [
    {1, required, string, 'id', undefined},
    {3, optional, {struct, union, {dmsl_domain_thrift, 'Contractor'}}, 'contractor', undefined},
    {12, optional, {struct, struct, {dmsl_domain_thrift, 'PaymentInstitutionRef'}}, 'payment_institution', undefined},
    {11, required, string, 'created_at', undefined},
    {4, optional, string, 'valid_since', undefined},
    {5, optional, string, 'valid_until', undefined},
    {6, required, {struct, union, {dmsl_domain_thrift, 'ContractStatus'}}, 'status', undefined},
    {7, required, {struct, struct, {dmsl_domain_thrift, 'TermSetHierarchyRef'}}, 'terms', undefined},
    {8, required, {list, {struct, struct, {dmsl_domain_thrift, 'ContractAdjustment'}}}, 'adjustments', undefined},
    {9, required, {list, {struct, struct, {dmsl_domain_thrift, 'PayoutTool'}}}, 'payout_tools', undefined},
    {10, optional, {struct, struct, {dmsl_domain_thrift, 'LegalAgreement'}}, 'legal_agreement', undefined}
]};

struct_info('LegalAgreement') ->
    {struct, struct, [
    {1, required, string, 'signed_at', undefined},
    {2, required, string, 'legal_agreement_id', undefined}
]};

struct_info('ContractStatus') ->
    {struct, union, [
    {1, optional, {struct, struct, {dmsl_domain_thrift, 'ContractActive'}}, 'active', undefined},
    {2, optional, {struct, struct, {dmsl_domain_thrift, 'ContractTerminated'}}, 'terminated', undefined},
    {3, optional, {struct, struct, {dmsl_domain_thrift, 'ContractExpired'}}, 'expired', undefined}
]};

struct_info('ContractActive') ->
    {struct, struct, []};

struct_info('ContractTerminated') ->
    {struct, struct, [
    {1, required, string, 'terminated_at', undefined}
]};

struct_info('ContractExpired') ->
    {struct, struct, []};

struct_info('CategoryRef') ->
    {struct, struct, [
    {1, required, i32, 'id', undefined}
]};

struct_info('Category') ->
    {struct, struct, [
    {1, required, string, 'name', undefined},
    {2, required, string, 'description', undefined},
    {3, optional, {enum, {dmsl_domain_thrift, 'CategoryType'}}, 'type', 'test'}
]};

struct_info('ContractTemplateRef') ->
    {struct, struct, [
    {1, required, i32, 'id', undefined}
]};

struct_info('ContractTemplate') ->
    {struct, struct, [
    {4, optional, string, 'name', undefined},
    {5, optional, string, 'description', undefined},
    {1, optional, {struct, union, {dmsl_domain_thrift, 'Lifetime'}}, 'valid_since', undefined},
    {2, optional, {struct, union, {dmsl_domain_thrift, 'Lifetime'}}, 'valid_until', undefined},
    {3, required, {struct, struct, {dmsl_domain_thrift, 'TermSetHierarchyRef'}}, 'terms', undefined}
]};

struct_info('Lifetime') ->
    {struct, union, [
    {1, optional, string, 'timestamp', undefined},
    {2, optional, {struct, struct, {dmsl_domain_thrift, 'LifetimeInterval'}}, 'interval', undefined}
]};

struct_info('LifetimeInterval') ->
    {struct, struct, [
    {1, optional, i16, 'years', undefined},
    {2, optional, i16, 'months', undefined},
    {3, optional, i16, 'days', undefined}
]};

struct_info('ContractTemplateSelector') ->
    {struct, union, [
    {1, optional, {list, {struct, struct, {dmsl_domain_thrift, 'ContractTemplateDecision'}}}, 'decisions', undefined},
    {2, optional, {struct, struct, {dmsl_domain_thrift, 'ContractTemplateRef'}}, 'value', undefined}
]};

struct_info('ContractTemplateDecision') ->
    {struct, struct, [
    {1, required, {struct, union, {dmsl_domain_thrift, 'Predicate'}}, 'if_', undefined},
    {2, required, {struct, union, {dmsl_domain_thrift, 'ContractTemplateSelector'}}, 'then_', undefined}
]};

struct_info('ContractAdjustment') ->
    {struct, struct, [
    {1, required, string, 'id', undefined},
    {5, required, string, 'created_at', undefined},
    {2, optional, string, 'valid_since', undefined},
    {3, optional, string, 'valid_until', undefined},
    {4, required, {struct, struct, {dmsl_domain_thrift, 'TermSetHierarchyRef'}}, 'terms', undefined}
]};

struct_info('TermSet') ->
    {struct, struct, [
    {1, optional, {struct, struct, {dmsl_domain_thrift, 'PaymentsServiceTerms'}}, 'payments', undefined},
    {2, optional, {struct, struct, {dmsl_domain_thrift, 'RecurrentPaytoolsServiceTerms'}}, 'recurrent_paytools', undefined},
    {3, optional, {struct, struct, {dmsl_domain_thrift, 'PayoutsServiceTerms'}}, 'payouts', undefined}
]};

struct_info('TimedTermSet') ->
    {struct, struct, [
    {1, required, {struct, struct, {dmsl_base_thrift, 'TimestampInterval'}}, 'action_time', undefined},
    {2, required, {struct, struct, {dmsl_domain_thrift, 'TermSet'}}, 'terms', undefined}
]};

struct_info('TermSetHierarchy') ->
    {struct, struct, [
    {3, optional, string, 'name', undefined},
    {4, optional, string, 'description', undefined},
    {1, optional, {struct, struct, {dmsl_domain_thrift, 'TermSetHierarchyRef'}}, 'parent_terms', undefined},
    {2, required, {list, {struct, struct, {dmsl_domain_thrift, 'TimedTermSet'}}}, 'term_sets', undefined}
]};

struct_info('TermSetHierarchyRef') ->
    {struct, struct, [
    {1, required, i32, 'id', undefined}
]};

struct_info('PaymentsServiceTerms') ->
    {struct, struct, [
    {1, optional, {struct, union, {dmsl_domain_thrift, 'CurrencySelector'}}, 'currencies', undefined},
    {2, optional, {struct, union, {dmsl_domain_thrift, 'CategorySelector'}}, 'categories', undefined},
    {4, optional, {struct, union, {dmsl_domain_thrift, 'PaymentMethodSelector'}}, 'payment_methods', undefined},
    {5, optional, {struct, union, {dmsl_domain_thrift, 'CashLimitSelector'}}, 'cash_limit', undefined},
    {6, optional, {struct, union, {dmsl_domain_thrift, 'CashFlowSelector'}}, 'fees', undefined},
    {9, optional, {struct, struct, {dmsl_domain_thrift, 'PaymentHoldsServiceTerms'}}, 'holds', undefined},
    {8, optional, {struct, struct, {dmsl_domain_thrift, 'PaymentRefundsServiceTerms'}}, 'refunds', undefined}
]};

struct_info('PaymentHoldsServiceTerms') ->
    {struct, struct, [
    {1, optional, {struct, union, {dmsl_domain_thrift, 'PaymentMethodSelector'}}, 'payment_methods', undefined},
    {2, optional, {struct, union, {dmsl_domain_thrift, 'HoldLifetimeSelector'}}, 'lifetime', undefined}
]};

struct_info('PaymentRefundsServiceTerms') ->
    {struct, struct, [
    {1, optional, {struct, union, {dmsl_domain_thrift, 'PaymentMethodSelector'}}, 'payment_methods', undefined},
    {2, optional, {struct, union, {dmsl_domain_thrift, 'CashFlowSelector'}}, 'fees', undefined}
]};

struct_info('RecurrentPaytoolsServiceTerms') ->
    {struct, struct, [
    {1, optional, {struct, union, {dmsl_domain_thrift, 'PaymentMethodSelector'}}, 'payment_methods', undefined}
]};

struct_info('PayoutsServiceTerms') ->
    {struct, struct, [
    {4, optional, {struct, union, {dmsl_domain_thrift, 'ScheduleSelector'}}, 'payout_schedules', undefined},
    {1, optional, {struct, union, {dmsl_domain_thrift, 'PayoutMethodSelector'}}, 'payout_methods', undefined},
    {2, optional, {struct, union, {dmsl_domain_thrift, 'CashLimitSelector'}}, 'cash_limit', undefined},
    {3, optional, {struct, union, {dmsl_domain_thrift, 'CashFlowSelector'}}, 'fees', undefined},
    {5, optional, {struct, struct, {dmsl_domain_thrift, 'PayoutCompilationPolicy'}}, 'policy', undefined}
]};

struct_info('PayoutCompilationPolicy') ->
    {struct, struct, [
    {1, required, {struct, struct, {dmsl_base_thrift, 'TimeSpan'}}, 'assets_freeze_for', undefined}
]};

struct_info('PayoutMethodRef') ->
    {struct, struct, [
    {1, required, {enum, {dmsl_domain_thrift, 'PayoutMethod'}}, 'id', undefined}
]};

struct_info('PayoutMethodDefinition') ->
    {struct, struct, [
    {1, required, string, 'name', undefined},
    {2, required, string, 'description', undefined}
]};

struct_info('PayoutMethodSelector') ->
    {struct, union, [
    {1, optional, {list, {struct, struct, {dmsl_domain_thrift, 'PayoutMethodDecision'}}}, 'decisions', undefined},
    {2, optional, {set, {struct, struct, {dmsl_domain_thrift, 'PayoutMethodRef'}}}, 'value', undefined}
]};

struct_info('PayoutMethodDecision') ->
    {struct, struct, [
    {1, required, {struct, union, {dmsl_domain_thrift, 'Predicate'}}, 'if_', undefined},
    {2, required, {struct, union, {dmsl_domain_thrift, 'PayoutMethodSelector'}}, 'then_', undefined}
]};

struct_info('CurrencyRef') ->
    {struct, struct, [
    {1, required, string, 'symbolic_code', undefined}
]};

struct_info('Currency') ->
    {struct, struct, [
    {1, required, string, 'name', undefined},
    {2, required, string, 'symbolic_code', undefined},
    {3, required, i16, 'numeric_code', undefined},
    {4, required, i16, 'exponent', undefined}
]};

struct_info('CurrencySelector') ->
    {struct, union, [
    {1, optional, {list, {struct, struct, {dmsl_domain_thrift, 'CurrencyDecision'}}}, 'decisions', undefined},
    {2, optional, {set, {struct, struct, {dmsl_domain_thrift, 'CurrencyRef'}}}, 'value', undefined}
]};

struct_info('CurrencyDecision') ->
    {struct, struct, [
    {1, required, {struct, union, {dmsl_domain_thrift, 'Predicate'}}, 'if_', undefined},
    {2, required, {struct, union, {dmsl_domain_thrift, 'CurrencySelector'}}, 'then_', undefined}
]};

struct_info('CategorySelector') ->
    {struct, union, [
    {1, optional, {list, {struct, struct, {dmsl_domain_thrift, 'CategoryDecision'}}}, 'decisions', undefined},
    {2, optional, {set, {struct, struct, {dmsl_domain_thrift, 'CategoryRef'}}}, 'value', undefined}
]};

struct_info('CategoryDecision') ->
    {struct, struct, [
    {1, required, {struct, union, {dmsl_domain_thrift, 'Predicate'}}, 'if_', undefined},
    {2, required, {struct, union, {dmsl_domain_thrift, 'CategorySelector'}}, 'then_', undefined}
]};

struct_info('ScheduleRef') ->
    {struct, struct, [
    {1, required, i32, 'id', undefined}
]};

struct_info('Schedule') ->
    {struct, struct, [
    {1, required, string, 'name', undefined},
    {2, optional, string, 'description', undefined},
    {3, required, {struct, struct, {dmsl_base_thrift, 'Schedule'}}, 'schedule', undefined}
]};

struct_info('ScheduleSelector') ->
    {struct, union, [
    {1, optional, {list, {struct, struct, {dmsl_domain_thrift, 'ScheduleDecision'}}}, 'decisions', undefined},
    {2, optional, {set, {struct, struct, {dmsl_domain_thrift, 'ScheduleRef'}}}, 'value', undefined}
]};

struct_info('ScheduleDecision') ->
    {struct, struct, [
    {1, required, {struct, union, {dmsl_domain_thrift, 'Predicate'}}, 'if_', undefined},
    {2, required, {struct, union, {dmsl_domain_thrift, 'ScheduleSelector'}}, 'then_', undefined}
]};

struct_info('CalendarRef') ->
    {struct, struct, [
    {1, required, i32, 'id', undefined}
]};

struct_info('Calendar') ->
    {struct, struct, [
    {1, required, string, 'name', undefined},
    {2, optional, string, 'description', undefined},
    {3, required, string, 'timezone', undefined},
    {4, required, {map, i32, {set, {struct, struct, {dmsl_domain_thrift, 'CalendarHoliday'}}}}, 'holidays', undefined}
]};

struct_info('CalendarHoliday') ->
    {struct, struct, [
    {1, required, string, 'name', undefined},
    {2, optional, string, 'description', undefined},
    {3, required, byte, 'day', undefined},
    {4, required, {enum, {dmsl_base_thrift, 'Month'}}, 'month', undefined}
]};

struct_info('CashRange') ->
    {struct, struct, [
    {1, required, {struct, union, {dmsl_domain_thrift, 'CashBound'}}, 'upper', undefined},
    {2, required, {struct, union, {dmsl_domain_thrift, 'CashBound'}}, 'lower', undefined}
]};

struct_info('CashBound') ->
    {struct, union, [
    {1, optional, {struct, struct, {dmsl_domain_thrift, 'Cash'}}, 'inclusive', undefined},
    {2, optional, {struct, struct, {dmsl_domain_thrift, 'Cash'}}, 'exclusive', undefined}
]};

struct_info('CashLimitSelector') ->
    {struct, union, [
    {1, optional, {list, {struct, struct, {dmsl_domain_thrift, 'CashLimitDecision'}}}, 'decisions', undefined},
    {2, optional, {struct, struct, {dmsl_domain_thrift, 'CashRange'}}, 'value', undefined}
]};

struct_info('CashLimitDecision') ->
    {struct, struct, [
    {1, required, {struct, union, {dmsl_domain_thrift, 'Predicate'}}, 'if_', undefined},
    {2, required, {struct, union, {dmsl_domain_thrift, 'CashLimitSelector'}}, 'then_', undefined}
]};

struct_info('PaymentMethod') ->
    {struct, union, [
    {1, optional, {enum, {dmsl_domain_thrift, 'BankCardPaymentSystem'}}, 'bank_card', undefined},
    {2, optional, {enum, {dmsl_domain_thrift, 'TerminalPaymentProvider'}}, 'payment_terminal', undefined},
    {3, optional, {enum, {dmsl_domain_thrift, 'DigitalWalletProvider'}}, 'digital_wallet', undefined}
]};

struct_info('PaymentTool') ->
    {struct, union, [
    {1, optional, {struct, struct, {dmsl_domain_thrift, 'BankCard'}}, 'bank_card', undefined},
    {2, optional, {struct, struct, {dmsl_domain_thrift, 'PaymentTerminal'}}, 'payment_terminal', undefined},
    {3, optional, {struct, struct, {dmsl_domain_thrift, 'DigitalWallet'}}, 'digital_wallet', undefined}
]};

struct_info('DisposablePaymentResource') ->
    {struct, struct, [
    {1, required, {struct, union, {dmsl_domain_thrift, 'PaymentTool'}}, 'payment_tool', undefined},
    {2, optional, string, 'payment_session_id', undefined},
    {3, required, {struct, struct, {dmsl_domain_thrift, 'ClientInfo'}}, 'client_info', undefined}
]};

struct_info('BankCard') ->
    {struct, struct, [
    {1, required, string, 'token', undefined},
    {2, required, {enum, {dmsl_domain_thrift, 'BankCardPaymentSystem'}}, 'payment_system', undefined},
    {3, required, string, 'bin', undefined},
    {4, required, string, 'masked_pan', undefined}
]};

struct_info('PaymentTerminal') ->
    {struct, struct, [
    {1, required, {enum, {dmsl_domain_thrift, 'TerminalPaymentProvider'}}, 'terminal_type', undefined}
]};

struct_info('DigitalWallet') ->
    {struct, struct, [
    {1, required, {enum, {dmsl_domain_thrift, 'DigitalWalletProvider'}}, 'provider', undefined},
    {2, required, string, 'id', undefined}
]};

struct_info('BankCardBINRangeRef') ->
    {struct, struct, [
    {1, required, i32, 'id', undefined}
]};

struct_info('BankCardBINRange') ->
    {struct, struct, [
    {1, required, string, 'name', undefined},
    {2, required, string, 'description', undefined},
    {3, required, {set, string}, 'bins', undefined}
]};

struct_info('PaymentMethodRef') ->
    {struct, struct, [
    {1, required, {struct, union, {dmsl_domain_thrift, 'PaymentMethod'}}, 'id', undefined}
]};

struct_info('PaymentMethodDefinition') ->
    {struct, struct, [
    {1, required, string, 'name', undefined},
    {2, required, string, 'description', undefined}
]};

struct_info('PaymentMethodSelector') ->
    {struct, union, [
    {1, optional, {list, {struct, struct, {dmsl_domain_thrift, 'PaymentMethodDecision'}}}, 'decisions', undefined},
    {2, optional, {set, {struct, struct, {dmsl_domain_thrift, 'PaymentMethodRef'}}}, 'value', undefined}
]};

struct_info('PaymentMethodDecision') ->
    {struct, struct, [
    {1, required, {struct, union, {dmsl_domain_thrift, 'Predicate'}}, 'if_', undefined},
    {2, required, {struct, union, {dmsl_domain_thrift, 'PaymentMethodSelector'}}, 'then_', undefined}
]};

struct_info('HoldLifetime') ->
    {struct, struct, [
    {1, required, i32, 'seconds', undefined}
]};

struct_info('HoldLifetimeSelector') ->
    {struct, union, [
    {1, optional, {list, {struct, struct, {dmsl_domain_thrift, 'HoldLifetimeDecision'}}}, 'decisions', undefined},
    {2, optional, {struct, struct, {dmsl_domain_thrift, 'HoldLifetime'}}, 'value', undefined}
]};

struct_info('HoldLifetimeDecision') ->
    {struct, struct, [
    {1, required, {struct, union, {dmsl_domain_thrift, 'Predicate'}}, 'if_', undefined},
    {2, required, {struct, union, {dmsl_domain_thrift, 'HoldLifetimeSelector'}}, 'then_', undefined}
]};

struct_info('CashFlowAccount') ->
    {struct, union, [
    {1, optional, {enum, {dmsl_domain_thrift, 'MerchantCashFlowAccount'}}, 'merchant', undefined},
    {2, optional, {enum, {dmsl_domain_thrift, 'ProviderCashFlowAccount'}}, 'provider', undefined},
    {3, optional, {enum, {dmsl_domain_thrift, 'SystemCashFlowAccount'}}, 'system', undefined},
    {4, optional, {enum, {dmsl_domain_thrift, 'ExternalCashFlowAccount'}}, 'external', undefined}
]};

struct_info('CashFlowPosting') ->
    {struct, struct, [
    {1, required, {struct, union, {dmsl_domain_thrift, 'CashFlowAccount'}}, 'source', undefined},
    {2, required, {struct, union, {dmsl_domain_thrift, 'CashFlowAccount'}}, 'destination', undefined},
    {3, required, {struct, union, {dmsl_domain_thrift, 'CashVolume'}}, 'volume', undefined},
    {4, optional, string, 'details', undefined}
]};

struct_info('FinalCashFlowPosting') ->
    {struct, struct, [
    {1, required, {struct, struct, {dmsl_domain_thrift, 'FinalCashFlowAccount'}}, 'source', undefined},
    {2, required, {struct, struct, {dmsl_domain_thrift, 'FinalCashFlowAccount'}}, 'destination', undefined},
    {3, required, {struct, struct, {dmsl_domain_thrift, 'Cash'}}, 'volume', undefined},
    {4, optional, string, 'details', undefined}
]};

struct_info('FinalCashFlowAccount') ->
    {struct, struct, [
    {1, required, {struct, union, {dmsl_domain_thrift, 'CashFlowAccount'}}, 'account_type', undefined},
    {2, required, i64, 'account_id', undefined}
]};

struct_info('CashVolume') ->
    {struct, union, [
    {1, optional, {struct, struct, {dmsl_domain_thrift, 'CashVolumeFixed'}}, 'fixed', undefined},
    {2, optional, {struct, struct, {dmsl_domain_thrift, 'CashVolumeShare'}}, 'share', undefined},
    {3, optional, {struct, union, {dmsl_domain_thrift, 'CashVolumeProduct'}}, 'product', undefined}
]};

struct_info('CashVolumeFixed') ->
    {struct, struct, [
    {1, required, {struct, struct, {dmsl_domain_thrift, 'Cash'}}, 'cash', undefined}
]};

struct_info('CashVolumeShare') ->
    {struct, struct, [
    {1, required, {struct, struct, {dmsl_base_thrift, 'Rational'}}, 'parts', undefined},
    {2, required, {enum, {dmsl_domain_thrift, 'CashFlowConstant'}}, 'of', undefined},
    {3, optional, {enum, {dmsl_domain_thrift, 'RoundingMethod'}}, 'rounding_method', undefined}
]};

struct_info('CashVolumeProduct') ->
    {struct, union, [
    {1, optional, {set, {struct, union, {dmsl_domain_thrift, 'CashVolume'}}}, 'min_of', undefined},
    {2, optional, {set, {struct, union, {dmsl_domain_thrift, 'CashVolume'}}}, 'max_of', undefined}
]};

struct_info('CashFlowSelector') ->
    {struct, union, [
    {1, optional, {list, {struct, struct, {dmsl_domain_thrift, 'CashFlowDecision'}}}, 'decisions', undefined},
    {2, optional, {list, {struct, struct, {dmsl_domain_thrift, 'CashFlowPosting'}}}, 'value', undefined}
]};

struct_info('CashFlowDecision') ->
    {struct, struct, [
    {1, required, {struct, union, {dmsl_domain_thrift, 'Predicate'}}, 'if_', undefined},
    {2, required, {struct, union, {dmsl_domain_thrift, 'CashFlowSelector'}}, 'then_', undefined}
]};

struct_info('ProviderRef') ->
    {struct, struct, [
    {1, required, i32, 'id', undefined}
]};

struct_info('Provider') ->
    {struct, struct, [
    {1, required, string, 'name', undefined},
    {2, required, string, 'description', undefined},
    {3, required, {struct, struct, {dmsl_domain_thrift, 'Proxy'}}, 'proxy', undefined},
    {4, required, {struct, union, {dmsl_domain_thrift, 'TerminalSelector'}}, 'terminal', undefined},
    {5, required, string, 'abs_account', undefined},
    {6, optional, {struct, struct, {dmsl_domain_thrift, 'PaymentsProvisionTerms'}}, 'payment_terms', undefined},
    {8, optional, {struct, struct, {dmsl_domain_thrift, 'RecurrentPaytoolsProvisionTerms'}}, 'recurrent_paytool_terms', undefined},
    {7, optional, {map, {struct, struct, {dmsl_domain_thrift, 'CurrencyRef'}}, {struct, struct, {dmsl_domain_thrift, 'ProviderAccount'}}}, 'accounts', #{}}
]};

struct_info('PaymentsProvisionTerms') ->
    {struct, struct, [
    {1, required, {struct, union, {dmsl_domain_thrift, 'CurrencySelector'}}, 'currencies', undefined},
    {2, required, {struct, union, {dmsl_domain_thrift, 'CategorySelector'}}, 'categories', undefined},
    {3, required, {struct, union, {dmsl_domain_thrift, 'PaymentMethodSelector'}}, 'payment_methods', undefined},
    {6, required, {struct, union, {dmsl_domain_thrift, 'CashLimitSelector'}}, 'cash_limit', undefined},
    {4, required, {struct, union, {dmsl_domain_thrift, 'CashFlowSelector'}}, 'cash_flow', undefined},
    {5, optional, {struct, struct, {dmsl_domain_thrift, 'PaymentHoldsProvisionTerms'}}, 'holds', undefined},
    {7, optional, {struct, struct, {dmsl_domain_thrift, 'PaymentRefundsProvisionTerms'}}, 'refunds', undefined}
]};

struct_info('PaymentHoldsProvisionTerms') ->
    {struct, struct, [
    {1, required, {struct, union, {dmsl_domain_thrift, 'HoldLifetimeSelector'}}, 'lifetime', undefined}
]};

struct_info('PaymentRefundsProvisionTerms') ->
    {struct, struct, [
    {1, required, {struct, union, {dmsl_domain_thrift, 'CashFlowSelector'}}, 'cash_flow', undefined}
]};

struct_info('RecurrentPaytoolsProvisionTerms') ->
    {struct, struct, [
    {1, required, {struct, union, {dmsl_domain_thrift, 'CashValueSelector'}}, 'cash_value', undefined},
    {2, required, {struct, union, {dmsl_domain_thrift, 'CategorySelector'}}, 'categories', undefined},
    {3, required, {struct, union, {dmsl_domain_thrift, 'PaymentMethodSelector'}}, 'payment_methods', undefined}
]};

struct_info('CashValueSelector') ->
    {struct, union, [
    {1, optional, {list, {struct, struct, {dmsl_domain_thrift, 'CashValueDecision'}}}, 'decisions', undefined},
    {2, optional, {struct, struct, {dmsl_domain_thrift, 'Cash'}}, 'value', undefined}
]};

struct_info('CashValueDecision') ->
    {struct, struct, [
    {1, required, {struct, union, {dmsl_domain_thrift, 'Predicate'}}, 'if_', undefined},
    {2, required, {struct, union, {dmsl_domain_thrift, 'CashValueSelector'}}, 'then_', undefined}
]};

struct_info('ProviderAccount') ->
    {struct, struct, [
    {1, required, i64, 'settlement', undefined}
]};

struct_info('ProviderSelector') ->
    {struct, union, [
    {1, optional, {list, {struct, struct, {dmsl_domain_thrift, 'ProviderDecision'}}}, 'decisions', undefined},
    {2, optional, {set, {struct, struct, {dmsl_domain_thrift, 'ProviderRef'}}}, 'value', undefined}
]};

struct_info('ProviderDecision') ->
    {struct, struct, [
    {1, required, {struct, union, {dmsl_domain_thrift, 'Predicate'}}, 'if_', undefined},
    {2, required, {struct, union, {dmsl_domain_thrift, 'ProviderSelector'}}, 'then_', undefined}
]};

struct_info('TerminalRef') ->
    {struct, struct, [
    {1, required, i32, 'id', undefined}
]};

struct_info('InspectorRef') ->
    {struct, struct, [
    {1, required, i32, 'id', undefined}
]};

struct_info('Inspector') ->
    {struct, struct, [
    {1, required, string, 'name', undefined},
    {2, required, string, 'description', undefined},
    {3, required, {struct, struct, {dmsl_domain_thrift, 'Proxy'}}, 'proxy', undefined}
]};

struct_info('InspectorSelector') ->
    {struct, union, [
    {1, optional, {list, {struct, struct, {dmsl_domain_thrift, 'InspectorDecision'}}}, 'decisions', undefined},
    {2, optional, {struct, struct, {dmsl_domain_thrift, 'InspectorRef'}}, 'value', undefined}
]};

struct_info('InspectorDecision') ->
    {struct, struct, [
    {1, required, {struct, union, {dmsl_domain_thrift, 'Predicate'}}, 'if_', undefined},
    {2, required, {struct, union, {dmsl_domain_thrift, 'InspectorSelector'}}, 'then_', undefined}
]};

struct_info('Terminal') ->
    {struct, struct, [
    {1, required, string, 'name', undefined},
    {2, required, string, 'description', undefined},
    {9, optional, {map, string, string}, 'options', undefined},
    {10, required, {enum, {dmsl_domain_thrift, 'RiskScore'}}, 'risk_coverage', undefined},
    {12, optional, {struct, struct, {dmsl_domain_thrift, 'PaymentsProvisionTerms'}}, 'terms', undefined}
]};

struct_info('TerminalSelector') ->
    {struct, union, [
    {1, optional, {list, {struct, struct, {dmsl_domain_thrift, 'TerminalDecision'}}}, 'decisions', undefined},
    {2, optional, {set, {struct, struct, {dmsl_domain_thrift, 'TerminalRef'}}}, 'value', undefined}
]};

struct_info('TerminalDecision') ->
    {struct, struct, [
    {1, required, {struct, union, {dmsl_domain_thrift, 'Predicate'}}, 'if_', undefined},
    {2, required, {struct, union, {dmsl_domain_thrift, 'TerminalSelector'}}, 'then_', undefined}
]};

struct_info('Predicate') ->
    {struct, union, [
    {5, optional, bool, 'constant', undefined},
    {1, optional, {struct, union, {dmsl_domain_thrift, 'Condition'}}, 'condition', undefined},
    {2, optional, {struct, union, {dmsl_domain_thrift, 'Predicate'}}, 'is_not', undefined},
    {3, optional, {set, {struct, union, {dmsl_domain_thrift, 'Predicate'}}}, 'all_of', undefined},
    {4, optional, {set, {struct, union, {dmsl_domain_thrift, 'Predicate'}}}, 'any_of', undefined}
]};

struct_info('Condition') ->
    {struct, union, [
    {1, optional, {struct, struct, {dmsl_domain_thrift, 'CategoryRef'}}, 'category_is', undefined},
    {2, optional, {struct, struct, {dmsl_domain_thrift, 'CurrencyRef'}}, 'currency_is', undefined},
    {4, optional, {struct, struct, {dmsl_domain_thrift, 'CashRange'}}, 'cost_in', undefined},
    {3, optional, {struct, union, {dmsl_domain_thrift, 'PaymentToolCondition'}}, 'payment_tool', undefined},
    {5, optional, {struct, union, {dmsl_domain_thrift, 'ShopLocation'}}, 'shop_location_is', undefined},
    {6, optional, {struct, struct, {dmsl_domain_thrift, 'PartyCondition'}}, 'party', undefined},
    {7, optional, {struct, struct, {dmsl_domain_thrift, 'PayoutMethodRef'}}, 'payout_method_is', undefined}
]};

struct_info('PaymentToolCondition') ->
    {struct, union, [
    {1, optional, {struct, struct, {dmsl_domain_thrift, 'BankCardCondition'}}, 'bank_card', undefined},
    {2, optional, {struct, struct, {dmsl_domain_thrift, 'PaymentTerminalCondition'}}, 'payment_terminal', undefined},
    {3, optional, {struct, struct, {dmsl_domain_thrift, 'DigitalWalletCondition'}}, 'digital_wallet', undefined}
]};

struct_info('BankCardCondition') ->
    {struct, struct, [
    {1, optional, {enum, {dmsl_domain_thrift, 'BankCardPaymentSystem'}}, 'payment_system_is', undefined},
    {2, optional, {struct, struct, {dmsl_domain_thrift, 'BankCardBINRangeRef'}}, 'bin_in', undefined},
    {3, optional, {struct, union, {dmsl_domain_thrift, 'BankCardConditionDefinition'}}, 'definition', undefined}
]};

struct_info('BankCardConditionDefinition') ->
    {struct, union, [
    {1, optional, {enum, {dmsl_domain_thrift, 'BankCardPaymentSystem'}}, 'payment_system_is', undefined},
    {2, optional, {struct, struct, {dmsl_domain_thrift, 'BankCardBINRangeRef'}}, 'bin_in', undefined}
]};

struct_info('PaymentTerminalCondition') ->
    {struct, struct, [
    {1, optional, {struct, union, {dmsl_domain_thrift, 'PaymentTerminalConditionDefinition'}}, 'definition', undefined}
]};

struct_info('PaymentTerminalConditionDefinition') ->
    {struct, union, [
    {1, optional, {enum, {dmsl_domain_thrift, 'TerminalPaymentProvider'}}, 'provider_is', undefined}
]};

struct_info('DigitalWalletCondition') ->
    {struct, struct, [
    {1, optional, {struct, union, {dmsl_domain_thrift, 'DigitalWalletConditionDefinition'}}, 'definition', undefined}
]};

struct_info('DigitalWalletConditionDefinition') ->
    {struct, union, [
    {1, optional, {enum, {dmsl_domain_thrift, 'DigitalWalletProvider'}}, 'provider_is', undefined}
]};

struct_info('PartyCondition') ->
    {struct, struct, [
    {1, required, string, 'id', undefined},
    {2, optional, {struct, union, {dmsl_domain_thrift, 'PartyConditionDefinition'}}, 'definition', undefined}
]};

struct_info('PartyConditionDefinition') ->
    {struct, union, [
    {1, optional, string, 'shop_is', undefined}
]};

struct_info('ProxyRef') ->
    {struct, struct, [
    {1, required, i32, 'id', undefined}
]};

struct_info('ProxyDefinition') ->
    {struct, struct, [
    {1, required, string, 'name', undefined},
    {2, required, string, 'description', undefined},
    {3, required, string, 'url', undefined},
    {4, required, {map, string, string}, 'options', undefined}
]};

struct_info('Proxy') ->
    {struct, struct, [
    {1, required, {struct, struct, {dmsl_domain_thrift, 'ProxyRef'}}, 'ref', undefined},
    {2, required, {map, string, string}, 'additional', undefined}
]};

struct_info('SystemAccountSetRef') ->
    {struct, struct, [
    {1, required, i32, 'id', undefined}
]};

struct_info('SystemAccountSet') ->
    {struct, struct, [
    {1, required, string, 'name', undefined},
    {2, required, string, 'description', undefined},
    {3, required, {map, {struct, struct, {dmsl_domain_thrift, 'CurrencyRef'}}, {struct, struct, {dmsl_domain_thrift, 'SystemAccount'}}}, 'accounts', undefined}
]};

struct_info('SystemAccount') ->
    {struct, struct, [
    {1, required, i64, 'settlement', undefined}
]};

struct_info('SystemAccountSetSelector') ->
    {struct, union, [
    {1, optional, {list, {struct, struct, {dmsl_domain_thrift, 'SystemAccountSetDecision'}}}, 'decisions', undefined},
    {2, optional, {struct, struct, {dmsl_domain_thrift, 'SystemAccountSetRef'}}, 'value', undefined}
]};

struct_info('SystemAccountSetDecision') ->
    {struct, struct, [
    {1, required, {struct, union, {dmsl_domain_thrift, 'Predicate'}}, 'if_', undefined},
    {2, required, {struct, union, {dmsl_domain_thrift, 'SystemAccountSetSelector'}}, 'then_', undefined}
]};

struct_info('ExternalAccountSetRef') ->
    {struct, struct, [
    {1, required, i32, 'id', undefined}
]};

struct_info('ExternalAccountSet') ->
    {struct, struct, [
    {1, required, string, 'name', undefined},
    {2, required, string, 'description', undefined},
    {3, required, {map, {struct, struct, {dmsl_domain_thrift, 'CurrencyRef'}}, {struct, struct, {dmsl_domain_thrift, 'ExternalAccount'}}}, 'accounts', undefined}
]};

struct_info('ExternalAccount') ->
    {struct, struct, [
    {1, required, i64, 'income', undefined},
    {2, required, i64, 'outcome', undefined}
]};

struct_info('ExternalAccountSetSelector') ->
    {struct, union, [
    {1, optional, {list, {struct, struct, {dmsl_domain_thrift, 'ExternalAccountSetDecision'}}}, 'decisions', undefined},
    {2, optional, {struct, struct, {dmsl_domain_thrift, 'ExternalAccountSetRef'}}, 'value', undefined}
]};

struct_info('ExternalAccountSetDecision') ->
    {struct, struct, [
    {1, required, {struct, union, {dmsl_domain_thrift, 'Predicate'}}, 'if_', undefined},
    {2, required, {struct, union, {dmsl_domain_thrift, 'ExternalAccountSetSelector'}}, 'then_', undefined}
]};

struct_info('PaymentInstitutionRef') ->
    {struct, struct, [
    {1, required, i32, 'id', undefined}
]};

struct_info('PaymentInstitution') ->
    {struct, struct, [
    {1, required, string, 'name', undefined},
    {2, optional, string, 'description', undefined},
    {9, optional, {struct, struct, {dmsl_domain_thrift, 'CalendarRef'}}, 'calendar', undefined},
    {3, required, {struct, union, {dmsl_domain_thrift, 'SystemAccountSetSelector'}}, 'system_account_set', undefined},
    {4, required, {struct, union, {dmsl_domain_thrift, 'ContractTemplateSelector'}}, 'default_contract_template', undefined},
    {5, required, {struct, union, {dmsl_domain_thrift, 'ProviderSelector'}}, 'providers', undefined},
    {6, required, {struct, union, {dmsl_domain_thrift, 'InspectorSelector'}}, 'inspector', undefined},
    {7, required, {enum, {dmsl_domain_thrift, 'PaymentInstitutionRealm'}}, 'realm', undefined},
    {8, required, {set, {enum, {dmsl_domain_thrift, 'Residence'}}}, 'residences', undefined}
]};

struct_info('ContractPaymentInstitutionDefaults') ->
    {struct, struct, [
    {1, required, {struct, struct, {dmsl_domain_thrift, 'PaymentInstitutionRef'}}, 'test', undefined},
    {2, required, {struct, struct, {dmsl_domain_thrift, 'PaymentInstitutionRef'}}, 'live', undefined}
]};

struct_info('PartyPrototypeRef') ->
    {struct, struct, [
    {1, required, i32, 'id', undefined}
]};

struct_info('PartyPrototype') ->
    {struct, struct, [
    {1, required, {struct, struct, {dmsl_domain_thrift, 'ShopPrototype'}}, 'shop', undefined},
    {3, required, {struct, struct, {dmsl_domain_thrift, 'ContractPrototype'}}, 'contract', undefined}
]};

struct_info('ShopPrototype') ->
    {struct, struct, [
    {5, required, string, 'shop_id', undefined},
    {1, required, {struct, struct, {dmsl_domain_thrift, 'CategoryRef'}}, 'category', undefined},
    {2, required, {struct, struct, {dmsl_domain_thrift, 'CurrencyRef'}}, 'currency', undefined},
    {3, required, {struct, struct, {dmsl_domain_thrift, 'ShopDetails'}}, 'details', undefined},
    {4, required, {struct, union, {dmsl_domain_thrift, 'ShopLocation'}}, 'location', undefined}
]};

struct_info('ContractPrototype') ->
    {struct, struct, [
    {1, required, string, 'contract_id', undefined},
    {2, required, {struct, struct, {dmsl_domain_thrift, 'ContractTemplateRef'}}, 'test_contract_template', undefined},
    {3, required, {struct, struct, {dmsl_domain_thrift, 'PayoutToolPrototype'}}, 'payout_tool', undefined}
]};

struct_info('PayoutToolPrototype') ->
    {struct, struct, [
    {1, required, string, 'payout_tool_id', undefined},
    {2, required, {struct, union, {dmsl_domain_thrift, 'PayoutToolInfo'}}, 'payout_tool_info', undefined},
    {3, required, {struct, struct, {dmsl_domain_thrift, 'CurrencyRef'}}, 'payout_tool_currency', undefined}
]};

struct_info('GlobalsRef') ->
    {struct, struct, []};

struct_info('Globals') ->
    {struct, struct, [
    {4, required, {struct, union, {dmsl_domain_thrift, 'ExternalAccountSetSelector'}}, 'external_account_set', undefined},
    {8, optional, {set, {struct, struct, {dmsl_domain_thrift, 'PaymentInstitutionRef'}}}, 'payment_institutions', undefined},
    {42, optional, {struct, struct, {dmsl_domain_thrift, 'ContractPaymentInstitutionDefaults'}}, 'contract_payment_institution_defaults', undefined},
    {1, optional, {struct, struct, {dmsl_domain_thrift, 'PartyPrototypeRef'}}, 'party_prototype', undefined},
    {2, optional, {struct, union, {dmsl_domain_thrift, 'ProviderSelector'}}, 'providers', undefined},
    {3, optional, {struct, union, {dmsl_domain_thrift, 'SystemAccountSetSelector'}}, 'system_account_set', undefined},
    {5, optional, {struct, union, {dmsl_domain_thrift, 'InspectorSelector'}}, 'inspector', undefined},
    {6, optional, {struct, struct, {dmsl_domain_thrift, 'ContractTemplateRef'}}, 'default_contract_template', undefined},
    {7, optional, {struct, struct, {dmsl_domain_thrift, 'ProxyRef'}}, 'common_merchant_proxy', undefined}
]};

struct_info('Dummy') ->
    {struct, struct, []};

struct_info('DummyRef') ->
    {struct, struct, [
    {1, undefined, string, 'id', undefined}
]};

struct_info('DummyObject') ->
    {struct, struct, [
    {1, undefined, {struct, struct, {dmsl_domain_thrift, 'DummyRef'}}, 'ref', undefined},
    {2, undefined, {struct, struct, {dmsl_domain_thrift, 'Dummy'}}, 'data', undefined}
]};

struct_info('DummyLink') ->
    {struct, struct, [
    {1, undefined, {struct, struct, {dmsl_domain_thrift, 'DummyRef'}}, 'link', undefined}
]};

struct_info('DummyLinkRef') ->
    {struct, struct, [
    {1, undefined, string, 'id', undefined}
]};

struct_info('DummyLinkObject') ->
    {struct, struct, [
    {1, undefined, {struct, struct, {dmsl_domain_thrift, 'DummyLinkRef'}}, 'ref', undefined},
    {2, undefined, {struct, struct, {dmsl_domain_thrift, 'DummyLink'}}, 'data', undefined}
]};

struct_info('ContractTemplateObject') ->
    {struct, struct, [
    {1, required, {struct, struct, {dmsl_domain_thrift, 'ContractTemplateRef'}}, 'ref', undefined},
    {2, required, {struct, struct, {dmsl_domain_thrift, 'ContractTemplate'}}, 'data', undefined}
]};

struct_info('TermSetHierarchyObject') ->
    {struct, struct, [
    {1, required, {struct, struct, {dmsl_domain_thrift, 'TermSetHierarchyRef'}}, 'ref', undefined},
    {2, required, {struct, struct, {dmsl_domain_thrift, 'TermSetHierarchy'}}, 'data', undefined}
]};

struct_info('CategoryObject') ->
    {struct, struct, [
    {1, required, {struct, struct, {dmsl_domain_thrift, 'CategoryRef'}}, 'ref', undefined},
    {2, required, {struct, struct, {dmsl_domain_thrift, 'Category'}}, 'data', undefined}
]};

struct_info('CurrencyObject') ->
    {struct, struct, [
    {1, required, {struct, struct, {dmsl_domain_thrift, 'CurrencyRef'}}, 'ref', undefined},
    {2, required, {struct, struct, {dmsl_domain_thrift, 'Currency'}}, 'data', undefined}
]};

struct_info('ScheduleObject') ->
    {struct, struct, [
    {1, required, {struct, struct, {dmsl_domain_thrift, 'ScheduleRef'}}, 'ref', undefined},
    {2, required, {struct, struct, {dmsl_domain_thrift, 'Schedule'}}, 'data', undefined}
]};

struct_info('CalendarObject') ->
    {struct, struct, [
    {1, required, {struct, struct, {dmsl_domain_thrift, 'CalendarRef'}}, 'ref', undefined},
    {2, required, {struct, struct, {dmsl_domain_thrift, 'Calendar'}}, 'data', undefined}
]};

struct_info('PaymentMethodObject') ->
    {struct, struct, [
    {1, required, {struct, struct, {dmsl_domain_thrift, 'PaymentMethodRef'}}, 'ref', undefined},
    {2, required, {struct, struct, {dmsl_domain_thrift, 'PaymentMethodDefinition'}}, 'data', undefined}
]};

struct_info('PayoutMethodObject') ->
    {struct, struct, [
    {1, required, {struct, struct, {dmsl_domain_thrift, 'PayoutMethodRef'}}, 'ref', undefined},
    {2, required, {struct, struct, {dmsl_domain_thrift, 'PayoutMethodDefinition'}}, 'data', undefined}
]};

struct_info('BankCardBINRangeObject') ->
    {struct, struct, [
    {1, required, {struct, struct, {dmsl_domain_thrift, 'BankCardBINRangeRef'}}, 'ref', undefined},
    {2, required, {struct, struct, {dmsl_domain_thrift, 'BankCardBINRange'}}, 'data', undefined}
]};

struct_info('ContractorObject') ->
    {struct, struct, [
    {1, required, {struct, struct, {dmsl_domain_thrift, 'ContractorRef'}}, 'ref', undefined},
    {2, required, {struct, union, {dmsl_domain_thrift, 'Contractor'}}, 'data', undefined}
]};

struct_info('ProviderObject') ->
    {struct, struct, [
    {1, required, {struct, struct, {dmsl_domain_thrift, 'ProviderRef'}}, 'ref', undefined},
    {2, required, {struct, struct, {dmsl_domain_thrift, 'Provider'}}, 'data', undefined}
]};

struct_info('TerminalObject') ->
    {struct, struct, [
    {1, required, {struct, struct, {dmsl_domain_thrift, 'TerminalRef'}}, 'ref', undefined},
    {2, required, {struct, struct, {dmsl_domain_thrift, 'Terminal'}}, 'data', undefined}
]};

struct_info('InspectorObject') ->
    {struct, struct, [
    {1, required, {struct, struct, {dmsl_domain_thrift, 'InspectorRef'}}, 'ref', undefined},
    {2, required, {struct, struct, {dmsl_domain_thrift, 'Inspector'}}, 'data', undefined}
]};

struct_info('PaymentInstitutionObject') ->
    {struct, struct, [
    {1, required, {struct, struct, {dmsl_domain_thrift, 'PaymentInstitutionRef'}}, 'ref', undefined},
    {2, required, {struct, struct, {dmsl_domain_thrift, 'PaymentInstitution'}}, 'data', undefined}
]};

struct_info('SystemAccountSetObject') ->
    {struct, struct, [
    {1, required, {struct, struct, {dmsl_domain_thrift, 'SystemAccountSetRef'}}, 'ref', undefined},
    {2, required, {struct, struct, {dmsl_domain_thrift, 'SystemAccountSet'}}, 'data', undefined}
]};

struct_info('ExternalAccountSetObject') ->
    {struct, struct, [
    {1, required, {struct, struct, {dmsl_domain_thrift, 'ExternalAccountSetRef'}}, 'ref', undefined},
    {2, required, {struct, struct, {dmsl_domain_thrift, 'ExternalAccountSet'}}, 'data', undefined}
]};

struct_info('ProxyObject') ->
    {struct, struct, [
    {1, required, {struct, struct, {dmsl_domain_thrift, 'ProxyRef'}}, 'ref', undefined},
    {2, required, {struct, struct, {dmsl_domain_thrift, 'ProxyDefinition'}}, 'data', undefined}
]};

struct_info('PartyPrototypeObject') ->
    {struct, struct, [
    {1, required, {struct, struct, {dmsl_domain_thrift, 'PartyPrototypeRef'}}, 'ref', undefined},
    {2, required, {struct, struct, {dmsl_domain_thrift, 'PartyPrototype'}}, 'data', undefined}
]};

struct_info('GlobalsObject') ->
    {struct, struct, [
    {1, required, {struct, struct, {dmsl_domain_thrift, 'GlobalsRef'}}, 'ref', undefined},
    {2, required, {struct, struct, {dmsl_domain_thrift, 'Globals'}}, 'data', undefined}
]};

struct_info('Reference') ->
    {struct, union, [
    {1, optional, {struct, struct, {dmsl_domain_thrift, 'CategoryRef'}}, 'category', undefined},
    {2, optional, {struct, struct, {dmsl_domain_thrift, 'CurrencyRef'}}, 'currency', undefined},
    {19, optional, {struct, struct, {dmsl_domain_thrift, 'ScheduleRef'}}, 'schedule', undefined},
    {20, optional, {struct, struct, {dmsl_domain_thrift, 'CalendarRef'}}, 'calendar', undefined},
    {3, optional, {struct, struct, {dmsl_domain_thrift, 'PaymentMethodRef'}}, 'payment_method', undefined},
    {21, optional, {struct, struct, {dmsl_domain_thrift, 'PayoutMethodRef'}}, 'payout_method', undefined},
    {4, optional, {struct, struct, {dmsl_domain_thrift, 'ContractorRef'}}, 'contractor', undefined},
    {5, optional, {struct, struct, {dmsl_domain_thrift, 'BankCardBINRangeRef'}}, 'bank_card_bin_range', undefined},
    {6, optional, {struct, struct, {dmsl_domain_thrift, 'ContractTemplateRef'}}, 'contract_template', undefined},
    {17, optional, {struct, struct, {dmsl_domain_thrift, 'TermSetHierarchyRef'}}, 'term_set_hierarchy', undefined},
    {18, optional, {struct, struct, {dmsl_domain_thrift, 'PaymentInstitutionRef'}}, 'payment_institution', undefined},
    {7, optional, {struct, struct, {dmsl_domain_thrift, 'ProviderRef'}}, 'provider', undefined},
    {8, optional, {struct, struct, {dmsl_domain_thrift, 'TerminalRef'}}, 'terminal', undefined},
    {15, optional, {struct, struct, {dmsl_domain_thrift, 'InspectorRef'}}, 'inspector', undefined},
    {14, optional, {struct, struct, {dmsl_domain_thrift, 'SystemAccountSetRef'}}, 'system_account_set', undefined},
    {16, optional, {struct, struct, {dmsl_domain_thrift, 'ExternalAccountSetRef'}}, 'external_account_set', undefined},
    {9, optional, {struct, struct, {dmsl_domain_thrift, 'ProxyRef'}}, 'proxy', undefined},
    {11, optional, {struct, struct, {dmsl_domain_thrift, 'GlobalsRef'}}, 'globals', undefined},
    {12, optional, {struct, struct, {dmsl_domain_thrift, 'DummyRef'}}, 'dummy', undefined},
    {13, optional, {struct, struct, {dmsl_domain_thrift, 'DummyLinkRef'}}, 'dummy_link', undefined},
    {10, optional, {struct, struct, {dmsl_domain_thrift, 'PartyPrototypeRef'}}, 'party_prototype', undefined}
]};

struct_info('DomainObject') ->
    {struct, union, [
    {1, optional, {struct, struct, {dmsl_domain_thrift, 'CategoryObject'}}, 'category', undefined},
    {2, optional, {struct, struct, {dmsl_domain_thrift, 'CurrencyObject'}}, 'currency', undefined},
    {19, optional, {struct, struct, {dmsl_domain_thrift, 'ScheduleObject'}}, 'schedule', undefined},
    {20, optional, {struct, struct, {dmsl_domain_thrift, 'CalendarObject'}}, 'calendar', undefined},
    {3, optional, {struct, struct, {dmsl_domain_thrift, 'PaymentMethodObject'}}, 'payment_method', undefined},
    {21, optional, {struct, struct, {dmsl_domain_thrift, 'PayoutMethodObject'}}, 'payout_method', undefined},
    {4, optional, {struct, struct, {dmsl_domain_thrift, 'ContractorObject'}}, 'contractor', undefined},
    {5, optional, {struct, struct, {dmsl_domain_thrift, 'BankCardBINRangeObject'}}, 'bank_card_bin_range', undefined},
    {6, optional, {struct, struct, {dmsl_domain_thrift, 'ContractTemplateObject'}}, 'contract_template', undefined},
    {17, optional, {struct, struct, {dmsl_domain_thrift, 'TermSetHierarchyObject'}}, 'term_set_hierarchy', undefined},
    {18, optional, {struct, struct, {dmsl_domain_thrift, 'PaymentInstitutionObject'}}, 'payment_institution', undefined},
    {7, optional, {struct, struct, {dmsl_domain_thrift, 'ProviderObject'}}, 'provider', undefined},
    {8, optional, {struct, struct, {dmsl_domain_thrift, 'TerminalObject'}}, 'terminal', undefined},
    {15, optional, {struct, struct, {dmsl_domain_thrift, 'InspectorObject'}}, 'inspector', undefined},
    {14, optional, {struct, struct, {dmsl_domain_thrift, 'SystemAccountSetObject'}}, 'system_account_set', undefined},
    {16, optional, {struct, struct, {dmsl_domain_thrift, 'ExternalAccountSetObject'}}, 'external_account_set', undefined},
    {9, optional, {struct, struct, {dmsl_domain_thrift, 'ProxyObject'}}, 'proxy', undefined},
    {11, optional, {struct, struct, {dmsl_domain_thrift, 'GlobalsObject'}}, 'globals', undefined},
    {12, optional, {struct, struct, {dmsl_domain_thrift, 'DummyObject'}}, 'dummy', undefined},
    {13, optional, {struct, struct, {dmsl_domain_thrift, 'DummyLinkObject'}}, 'dummy_link', undefined},
    {10, optional, {struct, struct, {dmsl_domain_thrift, 'PartyPrototypeObject'}}, 'party_prototype', undefined}
]};

struct_info(_) -> erlang:error(badarg).

-spec record_name(struct_name() | exception_name()) -> atom() | no_return().

record_name('ContactInfo') ->
    'domain_ContactInfo';

record_name('OperationTimeout') ->
    'domain_OperationTimeout';

    record_name('ExternalFailure') ->
    'domain_ExternalFailure';

    record_name('Cash') ->
    'domain_Cash';

    record_name('TransactionInfo') ->
    'domain_TransactionInfo';

    record_name('Invoice') ->
    'domain_Invoice';

    record_name('InvoiceDetails') ->
    'domain_InvoiceDetails';

    record_name('InvoiceCart') ->
    'domain_InvoiceCart';

    record_name('InvoiceLine') ->
    'domain_InvoiceLine';

    record_name('InvoiceUnpaid') ->
    'domain_InvoiceUnpaid';

    record_name('InvoicePaid') ->
    'domain_InvoicePaid';

    record_name('InvoiceCancelled') ->
    'domain_InvoiceCancelled';

    record_name('InvoiceFulfilled') ->
    'domain_InvoiceFulfilled';

    record_name('InvoicePayment') ->
    'domain_InvoicePayment';

    record_name('InvoicePaymentPending') ->
    'domain_InvoicePaymentPending';

    record_name('InvoicePaymentProcessed') ->
    'domain_InvoicePaymentProcessed';

    record_name('InvoicePaymentCaptured') ->
    'domain_InvoicePaymentCaptured';

    record_name('InvoicePaymentCancelled') ->
    'domain_InvoicePaymentCancelled';

    record_name('InvoicePaymentRefunded') ->
    'domain_InvoicePaymentRefunded';

    record_name('InvoicePaymentFailed') ->
    'domain_InvoicePaymentFailed';

    record_name('InvoiceTemplate') ->
    'domain_InvoiceTemplate';

    record_name('InvoiceTemplateProduct') ->
    'domain_InvoiceTemplateProduct';

    record_name('InvoiceTemplateCostUnlimited') ->
    'domain_InvoiceTemplateCostUnlimited';

    record_name('PaymentResourcePayer') ->
    'domain_PaymentResourcePayer';

    record_name('CustomerPayer') ->
    'domain_CustomerPayer';

    record_name('ClientInfo') ->
    'domain_ClientInfo';

    record_name('PaymentRoute') ->
    'domain_PaymentRoute';

    record_name('InvoicePaymentAdjustment') ->
    'domain_InvoicePaymentAdjustment';

    record_name('InvoicePaymentAdjustmentPending') ->
    'domain_InvoicePaymentAdjustmentPending';

    record_name('InvoicePaymentAdjustmentCaptured') ->
    'domain_InvoicePaymentAdjustmentCaptured';

    record_name('InvoicePaymentAdjustmentCancelled') ->
    'domain_InvoicePaymentAdjustmentCancelled';

    record_name('InvoicePaymentFlowInstant') ->
    'domain_InvoicePaymentFlowInstant';

    record_name('InvoicePaymentFlowHold') ->
    'domain_InvoicePaymentFlowHold';

    record_name('InvoicePaymentRefund') ->
    'domain_InvoicePaymentRefund';

    record_name('InvoicePaymentRefundPending') ->
    'domain_InvoicePaymentRefundPending';

    record_name('InvoicePaymentRefundSucceeded') ->
    'domain_InvoicePaymentRefundSucceeded';

    record_name('InvoicePaymentRefundFailed') ->
    'domain_InvoicePaymentRefundFailed';

    record_name('Unblocked') ->
    'domain_Unblocked';

    record_name('Blocked') ->
    'domain_Blocked';

    record_name('Active') ->
    'domain_Active';

    record_name('Suspended') ->
    'domain_Suspended';

    record_name('Party') ->
    'domain_Party';

    record_name('PartyContactInfo') ->
    'domain_PartyContactInfo';

    record_name('Shop') ->
    'domain_Shop';

    record_name('ShopAccount') ->
    'domain_ShopAccount';

    record_name('ShopDetails') ->
    'domain_ShopDetails';

    record_name('ContractorRef') ->
    'domain_ContractorRef';

    record_name('RegisteredUser') ->
    'domain_RegisteredUser';

    record_name('RussianLegalEntity') ->
    'domain_RussianLegalEntity';

    record_name('InternationalLegalEntity') ->
    'domain_InternationalLegalEntity';

    record_name('RussianBankAccount') ->
    'domain_RussianBankAccount';

    record_name('InternationalBankAccount') ->
    'domain_InternationalBankAccount';

    record_name('PayoutTool') ->
    'domain_PayoutTool';

    record_name('Contract') ->
    'domain_Contract';

    record_name('LegalAgreement') ->
    'domain_LegalAgreement';

    record_name('ContractActive') ->
    'domain_ContractActive';

    record_name('ContractTerminated') ->
    'domain_ContractTerminated';

    record_name('ContractExpired') ->
    'domain_ContractExpired';

    record_name('CategoryRef') ->
    'domain_CategoryRef';

    record_name('Category') ->
    'domain_Category';

    record_name('ContractTemplateRef') ->
    'domain_ContractTemplateRef';

    record_name('ContractTemplate') ->
    'domain_ContractTemplate';

    record_name('LifetimeInterval') ->
    'domain_LifetimeInterval';

    record_name('ContractTemplateDecision') ->
    'domain_ContractTemplateDecision';

    record_name('ContractAdjustment') ->
    'domain_ContractAdjustment';

    record_name('TermSet') ->
    'domain_TermSet';

    record_name('TimedTermSet') ->
    'domain_TimedTermSet';

    record_name('TermSetHierarchy') ->
    'domain_TermSetHierarchy';

    record_name('TermSetHierarchyRef') ->
    'domain_TermSetHierarchyRef';

    record_name('PaymentsServiceTerms') ->
    'domain_PaymentsServiceTerms';

    record_name('PaymentHoldsServiceTerms') ->
    'domain_PaymentHoldsServiceTerms';

    record_name('PaymentRefundsServiceTerms') ->
    'domain_PaymentRefundsServiceTerms';

    record_name('RecurrentPaytoolsServiceTerms') ->
    'domain_RecurrentPaytoolsServiceTerms';

    record_name('PayoutsServiceTerms') ->
    'domain_PayoutsServiceTerms';

    record_name('PayoutCompilationPolicy') ->
    'domain_PayoutCompilationPolicy';

    record_name('PayoutMethodRef') ->
    'domain_PayoutMethodRef';

    record_name('PayoutMethodDefinition') ->
    'domain_PayoutMethodDefinition';

    record_name('PayoutMethodDecision') ->
    'domain_PayoutMethodDecision';

    record_name('CurrencyRef') ->
    'domain_CurrencyRef';

    record_name('Currency') ->
    'domain_Currency';

    record_name('CurrencyDecision') ->
    'domain_CurrencyDecision';

    record_name('CategoryDecision') ->
    'domain_CategoryDecision';

    record_name('ScheduleRef') ->
    'domain_ScheduleRef';

    record_name('Schedule') ->
    'domain_Schedule';

    record_name('ScheduleDecision') ->
    'domain_ScheduleDecision';

    record_name('CalendarRef') ->
    'domain_CalendarRef';

    record_name('Calendar') ->
    'domain_Calendar';

    record_name('CalendarHoliday') ->
    'domain_CalendarHoliday';

    record_name('CashRange') ->
    'domain_CashRange';

    record_name('CashLimitDecision') ->
    'domain_CashLimitDecision';

    record_name('DisposablePaymentResource') ->
    'domain_DisposablePaymentResource';

    record_name('BankCard') ->
    'domain_BankCard';

    record_name('PaymentTerminal') ->
    'domain_PaymentTerminal';

    record_name('DigitalWallet') ->
    'domain_DigitalWallet';

    record_name('BankCardBINRangeRef') ->
    'domain_BankCardBINRangeRef';

    record_name('BankCardBINRange') ->
    'domain_BankCardBINRange';

    record_name('PaymentMethodRef') ->
    'domain_PaymentMethodRef';

    record_name('PaymentMethodDefinition') ->
    'domain_PaymentMethodDefinition';

    record_name('PaymentMethodDecision') ->
    'domain_PaymentMethodDecision';

    record_name('HoldLifetime') ->
    'domain_HoldLifetime';

    record_name('HoldLifetimeDecision') ->
    'domain_HoldLifetimeDecision';

    record_name('CashFlowPosting') ->
    'domain_CashFlowPosting';

    record_name('FinalCashFlowPosting') ->
    'domain_FinalCashFlowPosting';

    record_name('FinalCashFlowAccount') ->
    'domain_FinalCashFlowAccount';

    record_name('CashVolumeFixed') ->
    'domain_CashVolumeFixed';

    record_name('CashVolumeShare') ->
    'domain_CashVolumeShare';

    record_name('CashFlowDecision') ->
    'domain_CashFlowDecision';

    record_name('ProviderRef') ->
    'domain_ProviderRef';

    record_name('Provider') ->
    'domain_Provider';

    record_name('PaymentsProvisionTerms') ->
    'domain_PaymentsProvisionTerms';

    record_name('PaymentHoldsProvisionTerms') ->
    'domain_PaymentHoldsProvisionTerms';

    record_name('PaymentRefundsProvisionTerms') ->
    'domain_PaymentRefundsProvisionTerms';

    record_name('RecurrentPaytoolsProvisionTerms') ->
    'domain_RecurrentPaytoolsProvisionTerms';

    record_name('CashValueDecision') ->
    'domain_CashValueDecision';

    record_name('ProviderAccount') ->
    'domain_ProviderAccount';

    record_name('ProviderDecision') ->
    'domain_ProviderDecision';

    record_name('TerminalRef') ->
    'domain_TerminalRef';

    record_name('InspectorRef') ->
    'domain_InspectorRef';

    record_name('Inspector') ->
    'domain_Inspector';

    record_name('InspectorDecision') ->
    'domain_InspectorDecision';

    record_name('Terminal') ->
    'domain_Terminal';

    record_name('TerminalDecision') ->
    'domain_TerminalDecision';

    record_name('BankCardCondition') ->
    'domain_BankCardCondition';

    record_name('PaymentTerminalCondition') ->
    'domain_PaymentTerminalCondition';

    record_name('DigitalWalletCondition') ->
    'domain_DigitalWalletCondition';

    record_name('PartyCondition') ->
    'domain_PartyCondition';

    record_name('ProxyRef') ->
    'domain_ProxyRef';

    record_name('ProxyDefinition') ->
    'domain_ProxyDefinition';

    record_name('Proxy') ->
    'domain_Proxy';

    record_name('SystemAccountSetRef') ->
    'domain_SystemAccountSetRef';

    record_name('SystemAccountSet') ->
    'domain_SystemAccountSet';

    record_name('SystemAccount') ->
    'domain_SystemAccount';

    record_name('SystemAccountSetDecision') ->
    'domain_SystemAccountSetDecision';

    record_name('ExternalAccountSetRef') ->
    'domain_ExternalAccountSetRef';

    record_name('ExternalAccountSet') ->
    'domain_ExternalAccountSet';

    record_name('ExternalAccount') ->
    'domain_ExternalAccount';

    record_name('ExternalAccountSetDecision') ->
    'domain_ExternalAccountSetDecision';

    record_name('PaymentInstitutionRef') ->
    'domain_PaymentInstitutionRef';

    record_name('PaymentInstitution') ->
    'domain_PaymentInstitution';

    record_name('ContractPaymentInstitutionDefaults') ->
    'domain_ContractPaymentInstitutionDefaults';

    record_name('PartyPrototypeRef') ->
    'domain_PartyPrototypeRef';

    record_name('PartyPrototype') ->
    'domain_PartyPrototype';

    record_name('ShopPrototype') ->
    'domain_ShopPrototype';

    record_name('ContractPrototype') ->
    'domain_ContractPrototype';

    record_name('PayoutToolPrototype') ->
    'domain_PayoutToolPrototype';

    record_name('GlobalsRef') ->
    'domain_GlobalsRef';

    record_name('Globals') ->
    'domain_Globals';

    record_name('Dummy') ->
    'domain_Dummy';

    record_name('DummyRef') ->
    'domain_DummyRef';

    record_name('DummyObject') ->
    'domain_DummyObject';

    record_name('DummyLink') ->
    'domain_DummyLink';

    record_name('DummyLinkRef') ->
    'domain_DummyLinkRef';

    record_name('DummyLinkObject') ->
    'domain_DummyLinkObject';

    record_name('ContractTemplateObject') ->
    'domain_ContractTemplateObject';

    record_name('TermSetHierarchyObject') ->
    'domain_TermSetHierarchyObject';

    record_name('CategoryObject') ->
    'domain_CategoryObject';

    record_name('CurrencyObject') ->
    'domain_CurrencyObject';

    record_name('ScheduleObject') ->
    'domain_ScheduleObject';

    record_name('CalendarObject') ->
    'domain_CalendarObject';

    record_name('PaymentMethodObject') ->
    'domain_PaymentMethodObject';

    record_name('PayoutMethodObject') ->
    'domain_PayoutMethodObject';

    record_name('BankCardBINRangeObject') ->
    'domain_BankCardBINRangeObject';

    record_name('ContractorObject') ->
    'domain_ContractorObject';

    record_name('ProviderObject') ->
    'domain_ProviderObject';

    record_name('TerminalObject') ->
    'domain_TerminalObject';

    record_name('InspectorObject') ->
    'domain_InspectorObject';

    record_name('PaymentInstitutionObject') ->
    'domain_PaymentInstitutionObject';

    record_name('SystemAccountSetObject') ->
    'domain_SystemAccountSetObject';

    record_name('ExternalAccountSetObject') ->
    'domain_ExternalAccountSetObject';

    record_name('ProxyObject') ->
    'domain_ProxyObject';

    record_name('PartyPrototypeObject') ->
    'domain_PartyPrototypeObject';

    record_name('GlobalsObject') ->
    'domain_GlobalsObject';

    record_name(_) -> error(badarg).
    
    -spec functions(_) -> no_return().

functions(_) -> error(badarg).

-spec function_info(_,_,_) -> no_return().

function_info(_Service, _Function, _InfoType) -> erlang:error(badarg).
