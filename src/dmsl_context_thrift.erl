%%
%% Autogenerated by Thrift Compiler (1.0.0-dev)
%%
%% DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
%%

-module(dmsl_context_thrift).

-include("dmsl_context_thrift.hrl").

-export([namespace/0]).
-export([enums/0]).
-export([typedefs/0]).
-export([structs/0]).
-export([services/0]).
-export([typedef_info/1]).
-export([enum_info/1]).
-export([struct_info/1]).
-export([record_name/1]).
-export([functions/1]).
-export([function_info/3]).

-export_type([namespace/0]).
-export_type([typedef_name/0]).
-export_type([enum_name/0]).
-export_type([struct_name/0]).
-export_type([exception_name/0]).
-export_type([service_name/0]).
-export_type([function_name/0]).

-export_type([enum_info/0]).
-export_type([struct_info/0]).

-export_type([
    'Namespace'/0,
    'Context'/0,
    'ContextSet'/0,
    'ObjectID'/0
]).
-export_type([
    'Change'/0
]).
-export_type([
    'ObjectNotFound'/0,
    'Forbidden'/0
]).

-type namespace() :: 'ctx'.

%%
%% typedefs
%%
-type typedef_name() ::
    'Namespace' |
    'Context' |
    'ContextSet' |
    'ObjectID'.

-type 'Namespace'() :: binary().
-type 'Context'() :: dmsl_msgpack_thrift:'Value'().
-type 'ContextSet'() :: #{'Namespace'() => 'Context'()}.
-type 'ObjectID'() :: binary().

%%
%% enums
%%
-type enum_name() :: none().

%%
%% structs, unions and exceptions
%%
-type struct_name() ::
    'Change'.

-type exception_name() ::
    'ObjectNotFound' |
    'Forbidden'.

%% union 'Change'
-type 'Change'() ::
    {'put', 'ContextSet'()} |
    {'deleted', 'Namespace'()}.

%% exception 'ObjectNotFound'
-type 'ObjectNotFound'() :: #'ctx_ObjectNotFound'{}.

%% exception 'Forbidden'
-type 'Forbidden'() :: #'ctx_Forbidden'{}.

%%
%% services and functions
%%
-type service_name() ::
    'Contexts'.

-type function_name() ::
    'Contexts_service_functions'().

-type 'Contexts_service_functions'() ::
    'Get' |
    'Put' |
    'Delete'.

-export_type(['Contexts_service_functions'/0]).


-type struct_flavour() :: struct | exception | union.
-type field_num() :: pos_integer().
-type field_name() :: atom().
-type field_req() :: required | optional | undefined.

-type type_ref() :: {module(), atom()}.
-type field_type() ::
    bool | byte | i16 | i32 | i64 | string | double |
{enum, type_ref()} |
{struct, struct_flavour(), type_ref()} |
{list, field_type()} |
{set, field_type()} |
{map, field_type(), field_type()}.

-type struct_field_info() ::
    {field_num(), field_req(), field_type(), field_name(), any()}.
-type struct_info() ::
    {struct, struct_flavour(), [struct_field_info()]}.

-type enum_choice() :: none().

-type enum_field_info() ::
    {enum_choice(), integer()}.
-type enum_info() ::
    {enum, [enum_field_info()]}.

-spec typedefs() -> [typedef_name()].

typedefs() ->
    [
        'Namespace',
        'Context',
        'ContextSet',
        'ObjectID'
    ].

-spec enums() -> [].

enums() ->
    [].

-spec structs() -> [struct_name()].

structs() ->
    [
        'Change'
    ].

-spec services() -> [service_name()].

services() ->
    [
        'Contexts'
    ].

-spec namespace() -> namespace().

namespace() ->
    'ctx'.

-spec typedef_info(typedef_name()) -> field_type() | no_return().

typedef_info('Namespace') ->
    string;

typedef_info('Context') ->
    {struct, union, {dmsl_msgpack_thrift, 'Value'}};

typedef_info('ContextSet') ->
    {map, string, {struct, union, {dmsl_msgpack_thrift, 'Value'}}};

typedef_info('ObjectID') ->
    string;

typedef_info(_) -> erlang:error(badarg).

-spec enum_info(_) -> no_return().

enum_info(_) -> erlang:error(badarg).

-spec struct_info(struct_name() | exception_name()) -> struct_info() | no_return().

struct_info('Change') ->
    {struct, union, [
    {1, optional, {map, string, {struct, union, {dmsl_msgpack_thrift, 'Value'}}}, 'put', undefined},
    {2, optional, string, 'deleted', undefined}
]};

struct_info('ObjectNotFound') ->
    {struct, exception, []};

struct_info('Forbidden') ->
    {struct, exception, []};

struct_info(_) -> erlang:error(badarg).

-spec record_name(struct_name() | exception_name()) -> atom() | no_return().

record_name('ObjectNotFound') ->
    'ctx_ObjectNotFound';

record_name('Forbidden') ->
    'ctx_Forbidden';

    record_name(_) -> error(badarg).
    
    -spec functions(service_name()) -> [function_name()] | no_return().

functions('Contexts') ->
    [
        'Get',
        'Put',
        'Delete'
    ];

functions(_) -> error(badarg).

-spec function_info(service_name(), function_name(), params_type | reply_type | exceptions) ->
    struct_info() | no_return().

function_info('Contexts', 'Get', params_type) ->
    {struct, struct, [
    {1, undefined, string, 'id', undefined},
    {2, undefined, string, 'ns', undefined}
]};
function_info('Contexts', 'Get', reply_type) ->
        {struct, union, {dmsl_msgpack_thrift, 'Value'}};
    function_info('Contexts', 'Get', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_context_thrift, 'ObjectNotFound'}}, 'ex1', undefined}
    ]};
function_info('Contexts', 'Put', params_type) ->
    {struct, struct, [
    {1, undefined, string, 'id', undefined},
    {2, undefined, string, 'ns', undefined},
    {3, undefined, {struct, union, {dmsl_msgpack_thrift, 'Value'}}, 'context', undefined}
]};
function_info('Contexts', 'Put', reply_type) ->
        {struct, struct, []};
    function_info('Contexts', 'Put', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_context_thrift, 'ObjectNotFound'}}, 'ex1', undefined},
        {2, undefined, {struct, exception, {dmsl_context_thrift, 'Forbidden'}}, 'ex2', undefined}
    ]};
function_info('Contexts', 'Delete', params_type) ->
    {struct, struct, [
    {1, undefined, string, 'id', undefined},
    {2, undefined, string, 'ns', undefined}
]};
function_info('Contexts', 'Delete', reply_type) ->
        {struct, struct, []};
    function_info('Contexts', 'Delete', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_context_thrift, 'ObjectNotFound'}}, 'ex1', undefined},
        {2, undefined, {struct, exception, {dmsl_context_thrift, 'Forbidden'}}, 'ex2', undefined}
    ]};

function_info(_Service, _Function, _InfoType) -> erlang:error(badarg).
