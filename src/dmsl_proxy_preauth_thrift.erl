%%
%% Autogenerated by Thrift Compiler (1.0.0-dev)
%%
%% DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
%%

-module(dmsl_proxy_preauth_thrift).

-include("dmsl_proxy_preauth_thrift.hrl").

-export([namespace/0]).
-export([enums/0]).
-export([typedefs/0]).
-export([structs/0]).
-export([services/0]).
-export([typedef_info/1]).
-export([enum_info/1]).
-export([struct_info/1]).
-export([record_name/1]).
-export([functions/1]).
-export([function_info/3]).

-export_type([namespace/0]).
-export_type([typedef_name/0]).
-export_type([enum_name/0]).
-export_type([struct_name/0]).
-export_type([exception_name/0]).
-export_type([service_name/0]).
-export_type([function_name/0]).

-export_type([enum_info/0]).
-export_type([struct_info/0]).

-export_type([
    'Context'/0,
    'Session'/0,
    'PaymentInfo'/0,
    'Shop'/0,
    'Invoice'/0,
    'InvoicePayment'/0,
    'Binding'/0,
    'Intent'/0,
    'FinishIntent'/0,
    'FinishStatus'/0,
    'ProxyResult'/0,
    'CallbackResult'/0
]).

-type namespace() :: 'proxy_preauth'.

%%
%% typedefs
%%
-type typedef_name() :: none().


%%
%% enums
%%
-type enum_name() :: none().

%%
%% structs, unions and exceptions
%%
-type struct_name() ::
    'Context' |
    'Session' |
    'PaymentInfo' |
    'Shop' |
    'Invoice' |
    'InvoicePayment' |
    'Binding' |
    'Intent' |
    'FinishIntent' |
    'FinishStatus' |
    'ProxyResult' |
    'CallbackResult'.

-type exception_name() :: none().

%% struct 'Context'
-type 'Context'() :: #'proxy_preauth_Context'{}.

%% struct 'Session'
-type 'Session'() :: #'proxy_preauth_Session'{}.

%% struct 'PaymentInfo'
-type 'PaymentInfo'() :: #'proxy_preauth_PaymentInfo'{}.

%% struct 'Shop'
-type 'Shop'() :: #'proxy_preauth_Shop'{}.

%% struct 'Invoice'
-type 'Invoice'() :: #'proxy_preauth_Invoice'{}.

%% struct 'InvoicePayment'
-type 'InvoicePayment'() :: #'proxy_preauth_InvoicePayment'{}.

%% struct 'Binding'
-type 'Binding'() :: #'proxy_preauth_Binding'{}.

%% union 'Intent'
-type 'Intent'() ::
    {'finish', 'FinishIntent'()} |
    {'sleep', dmsl_proxy_thrift:'SleepIntent'()} |
    {'suspend', dmsl_proxy_thrift:'SuspendIntent'()}.

%% struct 'FinishIntent'
-type 'FinishIntent'() :: #'proxy_preauth_FinishIntent'{}.

%% union 'FinishStatus'
-type 'FinishStatus'() ::
    {'success', dmsl_preauth_thrift:'Status'()} |
    {'failure', dmsl_proxy_thrift:'Failure'()}.

%% struct 'ProxyResult'
-type 'ProxyResult'() :: #'proxy_preauth_ProxyResult'{}.

%% struct 'CallbackResult'
-type 'CallbackResult'() :: #'proxy_preauth_CallbackResult'{}.

%%
%% services and functions
%%
-type service_name() ::
    'PreauthProxy' |
    'PreauthProxyHost'.

-type function_name() ::
    'PreauthProxy_service_functions'() |
    'PreauthProxyHost_service_functions'().

-type 'PreauthProxy_service_functions'() ::
    'AuthPayment' |
    'HandleAuthCallback'.

-export_type(['PreauthProxy_service_functions'/0]).

-type 'PreauthProxyHost_service_functions'() ::
    'ProcessCallback'.

-export_type(['PreauthProxyHost_service_functions'/0]).


-type struct_flavour() :: struct | exception | union.
-type field_num() :: pos_integer().
-type field_name() :: atom().
-type field_req() :: required | optional | undefined.

-type type_ref() :: {module(), atom()}.
-type field_type() ::
    bool | byte | i16 | i32 | i64 | string | double |
{enum, type_ref()} |
{struct, struct_flavour(), type_ref()} |
{list, field_type()} |
{set, field_type()} |
{map, field_type(), field_type()}.

-type struct_field_info() ::
    {field_num(), field_req(), field_type(), field_name(), any()}.
-type struct_info() ::
    {struct, struct_flavour(), [struct_field_info()]}.

-type enum_choice() :: none().

-type enum_field_info() ::
    {enum_choice(), integer()}.
-type enum_info() ::
    {enum, [enum_field_info()]}.

-spec typedefs() -> [].

typedefs() ->
    [].

-spec enums() -> [].

enums() ->
    [].

-spec structs() -> [struct_name()].

structs() ->
    [
        'Context',
        'Session',
        'PaymentInfo',
        'Shop',
        'Invoice',
        'InvoicePayment',
        'Binding',
        'Intent',
        'FinishIntent',
        'FinishStatus',
        'ProxyResult',
        'CallbackResult'
    ].

-spec services() -> [service_name()].

services() ->
    [
        'PreauthProxy',
        'PreauthProxyHost'
    ].

-spec namespace() -> namespace().

namespace() ->
    'proxy_preauth'.

-spec typedef_info(_) -> no_return().

typedef_info(_) -> erlang:error(badarg).

-spec enum_info(_) -> no_return().

enum_info(_) -> erlang:error(badarg).

-spec struct_info(struct_name() | exception_name()) -> struct_info() | no_return().

struct_info('Context') ->
    {struct, struct, [
    {1, required, {struct, struct, {dmsl_proxy_preauth_thrift, 'Session'}}, 'session', undefined},
    {2, required, {struct, struct, {dmsl_proxy_preauth_thrift, 'PaymentInfo'}}, 'payment', undefined},
    {3, optional, {map, string, string}, 'options', #{}}
]};

struct_info('Session') ->
    {struct, struct, [
    {1, optional, string, 'state', undefined}
]};

struct_info('PaymentInfo') ->
    {struct, struct, [
    {1, required, {struct, struct, {dmsl_proxy_preauth_thrift, 'Shop'}}, 'shop', undefined},
    {2, required, {struct, struct, {dmsl_proxy_preauth_thrift, 'Invoice'}}, 'invoice', undefined},
    {3, required, {struct, struct, {dmsl_proxy_preauth_thrift, 'InvoicePayment'}}, 'payment', undefined}
]};

struct_info('Shop') ->
    {struct, struct, [
    {1, required, string, 'id', undefined},
    {2, required, {struct, struct, {dmsl_domain_thrift, 'Category'}}, 'category', undefined},
    {3, required, {struct, struct, {dmsl_domain_thrift, 'ShopDetails'}}, 'details', undefined}
]};

struct_info('Invoice') ->
    {struct, struct, [
    {1, required, string, 'id', undefined},
    {2, required, string, 'created_at', undefined},
    {3, required, string, 'product', undefined},
    {4, optional, string, 'description', undefined},
    {5, required, {struct, struct, {dmsl_domain_thrift, 'Cash'}}, 'cost', undefined}
]};

struct_info('InvoicePayment') ->
    {struct, struct, [
    {1, required, string, 'id', undefined},
    {2, required, string, 'created_at', undefined},
    {3, required, {struct, union, {dmsl_domain_thrift, 'Payer'}}, 'payer', undefined},
    {4, required, {struct, struct, {dmsl_domain_thrift, 'Cash'}}, 'cost', undefined}
]};

struct_info('Binding') ->
    {struct, struct, [
    {1, required, string, 'id', undefined},
    {2, optional, string, 'timestamp', undefined},
    {3, required, {map, string, string}, 'extra', #{}}
]};

struct_info('Intent') ->
    {struct, union, [
    {1, optional, {struct, struct, {dmsl_proxy_preauth_thrift, 'FinishIntent'}}, 'finish', undefined},
    {2, optional, {struct, struct, {dmsl_proxy_thrift, 'SleepIntent'}}, 'sleep', undefined},
    {3, optional, {struct, struct, {dmsl_proxy_thrift, 'SuspendIntent'}}, 'suspend', undefined}
]};

struct_info('FinishIntent') ->
    {struct, struct, [
    {1, required, {struct, union, {dmsl_proxy_preauth_thrift, 'FinishStatus'}}, 'status', undefined}
]};

struct_info('FinishStatus') ->
    {struct, union, [
    {1, optional, {struct, union, {dmsl_preauth_thrift, 'Status'}}, 'success', undefined},
    {2, optional, {struct, struct, {dmsl_proxy_thrift, 'Failure'}}, 'failure', undefined}
]};

struct_info('ProxyResult') ->
    {struct, struct, [
    {1, required, {struct, union, {dmsl_proxy_preauth_thrift, 'Intent'}}, 'intent', undefined},
    {2, optional, string, 'next_state', undefined},
    {3, optional, {struct, struct, {dmsl_proxy_preauth_thrift, 'Binding'}}, 'binding', undefined}
]};

struct_info('CallbackResult') ->
    {struct, struct, [
    {1, required, string, 'response', undefined},
    {2, required, {struct, struct, {dmsl_proxy_preauth_thrift, 'ProxyResult'}}, 'result', undefined}
]};

struct_info(_) -> erlang:error(badarg).

-spec record_name(struct_name() | exception_name()) -> atom() | no_return().

record_name('Context') ->
    'proxy_preauth_Context';

record_name('Session') ->
    'proxy_preauth_Session';

    record_name('PaymentInfo') ->
    'proxy_preauth_PaymentInfo';

    record_name('Shop') ->
    'proxy_preauth_Shop';

    record_name('Invoice') ->
    'proxy_preauth_Invoice';

    record_name('InvoicePayment') ->
    'proxy_preauth_InvoicePayment';

    record_name('Binding') ->
    'proxy_preauth_Binding';

    record_name('FinishIntent') ->
    'proxy_preauth_FinishIntent';

    record_name('ProxyResult') ->
    'proxy_preauth_ProxyResult';

    record_name('CallbackResult') ->
    'proxy_preauth_CallbackResult';

    record_name(_) -> error(badarg).
    
    -spec functions(service_name()) -> [function_name()] | no_return().

functions('PreauthProxy') ->
    [
        'AuthPayment',
        'HandleAuthCallback'
    ];

functions('PreauthProxyHost') ->
    [
        'ProcessCallback'
    ];

functions(_) -> error(badarg).

-spec function_info(service_name(), function_name(), params_type | reply_type | exceptions) ->
    struct_info() | no_return().

function_info('PreauthProxy', 'AuthPayment', params_type) ->
    {struct, struct, [
    {1, undefined, {struct, struct, {dmsl_proxy_preauth_thrift, 'Context'}}, 'context', undefined}
]};
function_info('PreauthProxy', 'AuthPayment', reply_type) ->
        {struct, struct, {dmsl_proxy_preauth_thrift, 'ProxyResult'}};
    function_info('PreauthProxy', 'AuthPayment', exceptions) ->
        {struct, struct, []};
function_info('PreauthProxy', 'HandleAuthCallback', params_type) ->
    {struct, struct, [
    {1, undefined, string, 'callback', undefined},
    {2, undefined, {struct, struct, {dmsl_proxy_preauth_thrift, 'Context'}}, 'context', undefined}
]};
function_info('PreauthProxy', 'HandleAuthCallback', reply_type) ->
        {struct, struct, {dmsl_proxy_preauth_thrift, 'CallbackResult'}};
    function_info('PreauthProxy', 'HandleAuthCallback', exceptions) ->
        {struct, struct, []};

function_info('PreauthProxyHost', 'ProcessCallback', params_type) ->
    {struct, struct, [
    {1, undefined, string, 'tag', undefined},
    {2, undefined, string, 'callback', undefined}
]};
function_info('PreauthProxyHost', 'ProcessCallback', reply_type) ->
        string;
    function_info('PreauthProxyHost', 'ProcessCallback', exceptions) ->
        {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_base_thrift, 'InvalidRequest'}}, 'ex1', undefined}
    ]};

function_info(_Service, _Function, _InfoType) -> erlang:error(badarg).
