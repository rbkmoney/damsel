%%
%% Autogenerated by Thrift Compiler (1.0.0-dev)
%%
%% DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
%%

-module(dmsl_withdrawals_processing_thrift).

-include("dmsl_withdrawals_processing_thrift.hrl").

-export([namespace/0]).
-export([enums/0]).
-export([typedefs/0]).
-export([structs/0]).
-export([services/0]).
-export([typedef_info/1]).
-export([enum_info/1]).
-export([struct_info/1]).
-export([record_name/1]).
-export([functions/1]).
-export([function_info/3]).

-export_type([namespace/0]).
-export_type([typedef_name/0]).
-export_type([enum_name/0]).
-export_type([struct_name/0]).
-export_type([exception_name/0]).
-export_type([service_name/0]).
-export_type([function_name/0]).

-export_type([enum_info/0]).
-export_type([struct_info/0]).

-export_type([
    'Timestamp'/0,
    'WithdrawalID'/0,
    'Withdrawal'/0,
    'Failure'/0,
    'EventID'/0,
    'SessionID'/0,
    'SinkEventID'/0,
    'SinkEvents'/0
]).
-export_type([
    'WithdrawalState'/0,
    'WithdrawalStatus'/0,
    'WithdrawalPending'/0,
    'WithdrawalSucceeded'/0,
    'WithdrawalFailed'/0,
    'Event'/0,
    'Change'/0,
    'SessionChange'/0,
    'SessionChangePayload'/0,
    'SessionStarted'/0,
    'SessionFinished'/0,
    'SessionResult'/0,
    'SessionSucceeded'/0,
    'SessionFailed'/0,
    'SessionAdapterStateChanged'/0,
    'SinkEvent'/0,
    'SinkEventRange'/0
]).
-export_type([
    'WithdrawalNotFound'/0,
    'SinkEventNotFound'/0,
    'NoLastEvent'/0
]).

-type namespace() :: 'wthproc'.

%%
%% typedefs
%%
-type typedef_name() ::
    'Timestamp' |
    'WithdrawalID' |
    'Withdrawal' |
    'Failure' |
    'EventID' |
    'SessionID' |
    'SinkEventID' |
    'SinkEvents'.

-type 'Timestamp'() :: dmsl_base_thrift:'Timestamp'().
-type 'WithdrawalID'() :: dmsl_base_thrift:'ID'().
-type 'Withdrawal'() :: dmsl_withdrawals_domain_thrift:'Withdrawal'().
-type 'Failure'() :: dmsl_domain_thrift:'Failure'().
-type 'EventID'() :: integer().
-type 'SessionID'() :: dmsl_base_thrift:'ID'().
-type 'SinkEventID'() :: integer().
-type 'SinkEvents'() :: ['SinkEvent'()].

%%
%% enums
%%
-type enum_name() :: none().

%%
%% structs, unions and exceptions
%%
-type struct_name() ::
    'WithdrawalState' |
    'WithdrawalStatus' |
    'WithdrawalPending' |
    'WithdrawalSucceeded' |
    'WithdrawalFailed' |
    'Event' |
    'Change' |
    'SessionChange' |
    'SessionChangePayload' |
    'SessionStarted' |
    'SessionFinished' |
    'SessionResult' |
    'SessionSucceeded' |
    'SessionFailed' |
    'SessionAdapterStateChanged' |
    'SinkEvent' |
    'SinkEventRange'.

-type exception_name() ::
    'WithdrawalNotFound' |
    'SinkEventNotFound' |
    'NoLastEvent'.

%% struct 'WithdrawalState'
-type 'WithdrawalState'() :: #'wthproc_WithdrawalState'{}.

%% union 'WithdrawalStatus'
-type 'WithdrawalStatus'() ::
    {'pending', 'WithdrawalPending'()} |
    {'succeeded', 'WithdrawalSucceeded'()} |
    {'failed', 'WithdrawalFailed'()}.

%% struct 'WithdrawalPending'
-type 'WithdrawalPending'() :: #'wthproc_WithdrawalPending'{}.

%% struct 'WithdrawalSucceeded'
-type 'WithdrawalSucceeded'() :: #'wthproc_WithdrawalSucceeded'{}.

%% struct 'WithdrawalFailed'
-type 'WithdrawalFailed'() :: #'wthproc_WithdrawalFailed'{}.

%% struct 'Event'
-type 'Event'() :: #'wthproc_Event'{}.

%% union 'Change'
-type 'Change'() ::
    {'status_changed', 'WithdrawalStatus'()} |
    {'session', 'SessionChange'()}.

%% struct 'SessionChange'
-type 'SessionChange'() :: #'wthproc_SessionChange'{}.

%% union 'SessionChangePayload'
-type 'SessionChangePayload'() ::
    {'session_started', 'SessionStarted'()} |
    {'session_finished', 'SessionFinished'()} |
    {'session_adapter_state_changed', 'SessionAdapterStateChanged'()}.

%% struct 'SessionStarted'
-type 'SessionStarted'() :: #'wthproc_SessionStarted'{}.

%% struct 'SessionFinished'
-type 'SessionFinished'() :: #'wthproc_SessionFinished'{}.

%% union 'SessionResult'
-type 'SessionResult'() ::
    {'succeeded', 'SessionSucceeded'()} |
    {'failed', 'SessionFailed'()}.

%% struct 'SessionSucceeded'
-type 'SessionSucceeded'() :: #'wthproc_SessionSucceeded'{}.

%% struct 'SessionFailed'
-type 'SessionFailed'() :: #'wthproc_SessionFailed'{}.

%% struct 'SessionAdapterStateChanged'
-type 'SessionAdapterStateChanged'() :: #'wthproc_SessionAdapterStateChanged'{}.

%% struct 'SinkEvent'
-type 'SinkEvent'() :: #'wthproc_SinkEvent'{}.

%% struct 'SinkEventRange'
-type 'SinkEventRange'() :: #'wthproc_SinkEventRange'{}.

%% exception 'WithdrawalNotFound'
-type 'WithdrawalNotFound'() :: #'wthproc_WithdrawalNotFound'{}.

%% exception 'SinkEventNotFound'
-type 'SinkEventNotFound'() :: #'wthproc_SinkEventNotFound'{}.

%% exception 'NoLastEvent'
-type 'NoLastEvent'() :: #'wthproc_NoLastEvent'{}.

%%
%% services and functions
%%
-type service_name() ::
    'Processing' |
    'EventSink'.

-type function_name() ::
    'Processing_service_functions'() |
    'EventSink_service_functions'().

-type 'Processing_service_functions'() ::
    'Start' |
    'Get'.

-export_type(['Processing_service_functions'/0]).

-type 'EventSink_service_functions'() ::
    'GetEvents' |
    'GetLastEventID'.

-export_type(['EventSink_service_functions'/0]).


-type struct_flavour() :: struct | exception | union.
-type field_num() :: pos_integer().
-type field_name() :: atom().
-type field_req() :: required | optional | undefined.

-type type_ref() :: {module(), atom()}.
-type field_type() ::
    bool | byte | i16 | i32 | i64 | string | double |
    {enum, type_ref()} |
    {struct, struct_flavour(), type_ref()} |
    {list, field_type()} |
    {set, field_type()} |
    {map, field_type(), field_type()}.

-type struct_field_info() ::
    {field_num(), field_req(), field_type(), field_name(), any()}.
-type struct_info() ::
    {struct, struct_flavour(), [struct_field_info()]}.

-type enum_choice() :: none().

-type enum_field_info() ::
    {enum_choice(), integer()}.
-type enum_info() ::
    {enum, [enum_field_info()]}.

-spec typedefs() -> [typedef_name()].

typedefs() ->
    [
        'Timestamp',
        'WithdrawalID',
        'Withdrawal',
        'Failure',
        'EventID',
        'SessionID',
        'SinkEventID',
        'SinkEvents'
    ].

-spec enums() -> [].

enums() ->
    [].

-spec structs() -> [struct_name()].

structs() ->
    [
        'WithdrawalState',
        'WithdrawalStatus',
        'WithdrawalPending',
        'WithdrawalSucceeded',
        'WithdrawalFailed',
        'Event',
        'Change',
        'SessionChange',
        'SessionChangePayload',
        'SessionStarted',
        'SessionFinished',
        'SessionResult',
        'SessionSucceeded',
        'SessionFailed',
        'SessionAdapterStateChanged',
        'SinkEvent',
        'SinkEventRange'
    ].

-spec services() -> [service_name()].

services() ->
    [
        'Processing',
        'EventSink'
    ].

-spec namespace() -> namespace().

namespace() ->
    'wthproc'.

-spec typedef_info(typedef_name()) -> field_type() | no_return().

typedef_info('Timestamp') ->
    string;

typedef_info('WithdrawalID') ->
    string;

typedef_info('Withdrawal') ->
    {struct, struct, {dmsl_withdrawals_domain_thrift, 'Withdrawal'}};

typedef_info('Failure') ->
    {struct, struct, {dmsl_domain_thrift, 'Failure'}};

typedef_info('EventID') ->
    i64;

typedef_info('SessionID') ->
    string;

typedef_info('SinkEventID') ->
    i64;

typedef_info('SinkEvents') ->
    {list, {struct, struct, {dmsl_withdrawals_processing_thrift, 'SinkEvent'}}};

typedef_info(_) -> erlang:error(badarg).

-spec enum_info(_) -> no_return().

enum_info(_) -> erlang:error(badarg).

-spec struct_info(struct_name() | exception_name()) -> struct_info() | no_return().

struct_info('WithdrawalState') ->
    {struct, struct, [
        {1, required, string, 'id', undefined},
        {2, required, {struct, struct, {dmsl_withdrawals_domain_thrift, 'Withdrawal'}}, 'withdrawal', undefined},
        {3, required, string, 'created_at', undefined},
        {4, optional, string, 'updated_at', undefined},
        {5, required, {struct, union, {dmsl_withdrawals_processing_thrift, 'WithdrawalStatus'}}, 'status', undefined}
    ]};

struct_info('WithdrawalStatus') ->
    {struct, union, [
        {1, optional, {struct, struct, {dmsl_withdrawals_processing_thrift, 'WithdrawalPending'}}, 'pending', undefined},
        {2, optional, {struct, struct, {dmsl_withdrawals_processing_thrift, 'WithdrawalSucceeded'}}, 'succeeded', undefined},
        {3, optional, {struct, struct, {dmsl_withdrawals_processing_thrift, 'WithdrawalFailed'}}, 'failed', undefined}
    ]};

struct_info('WithdrawalPending') ->
    {struct, struct, []};

struct_info('WithdrawalSucceeded') ->
    {struct, struct, []};

struct_info('WithdrawalFailed') ->
    {struct, struct, [
        {1, required, {struct, struct, {dmsl_domain_thrift, 'Failure'}}, 'failure', undefined}
    ]};

struct_info('Event') ->
    {struct, struct, [
        {1, required, i64, 'id', undefined},
        {2, required, string, 'occured_at', undefined},
        {3, required, {list, {struct, union, {dmsl_withdrawals_processing_thrift, 'Change'}}}, 'changes', undefined}
    ]};

struct_info('Change') ->
    {struct, union, [
        {1, optional, {struct, union, {dmsl_withdrawals_processing_thrift, 'WithdrawalStatus'}}, 'status_changed', undefined},
        {2, optional, {struct, struct, {dmsl_withdrawals_processing_thrift, 'SessionChange'}}, 'session', undefined}
    ]};

struct_info('SessionChange') ->
    {struct, struct, [
        {1, required, string, 'id', undefined},
        {2, required, {struct, union, {dmsl_withdrawals_processing_thrift, 'SessionChangePayload'}}, 'payload', undefined}
    ]};

struct_info('SessionChangePayload') ->
    {struct, union, [
        {1, optional, {struct, struct, {dmsl_withdrawals_processing_thrift, 'SessionStarted'}}, 'session_started', undefined},
        {2, optional, {struct, struct, {dmsl_withdrawals_processing_thrift, 'SessionFinished'}}, 'session_finished', undefined},
        {3, optional, {struct, struct, {dmsl_withdrawals_processing_thrift, 'SessionAdapterStateChanged'}}, 'session_adapter_state_changed', undefined}
    ]};

struct_info('SessionStarted') ->
    {struct, struct, []};

struct_info('SessionFinished') ->
    {struct, struct, [
        {1, required, {struct, union, {dmsl_withdrawals_processing_thrift, 'SessionResult'}}, 'result', undefined}
    ]};

struct_info('SessionResult') ->
    {struct, union, [
        {1, optional, {struct, struct, {dmsl_withdrawals_processing_thrift, 'SessionSucceeded'}}, 'succeeded', undefined},
        {2, optional, {struct, struct, {dmsl_withdrawals_processing_thrift, 'SessionFailed'}}, 'failed', undefined}
    ]};

struct_info('SessionSucceeded') ->
    {struct, struct, [
        {1, required, {struct, struct, {dmsl_domain_thrift, 'TransactionInfo'}}, 'trx_info', undefined}
    ]};

struct_info('SessionFailed') ->
    {struct, struct, [
        {1, required, {struct, struct, {dmsl_domain_thrift, 'Failure'}}, 'failure', undefined}
    ]};

struct_info('SessionAdapterStateChanged') ->
    {struct, struct, [
        {1, required, {struct, union, {dmsl_msgpack_thrift, 'Value'}}, 'state', undefined}
    ]};

struct_info('SinkEvent') ->
    {struct, struct, [
        {1, required, i64, 'id', undefined},
        {2, required, string, 'created_at', undefined},
        {3, required, string, 'source', undefined},
        {4, required, {struct, struct, {dmsl_withdrawals_processing_thrift, 'Event'}}, 'payload', undefined}
    ]};

struct_info('SinkEventRange') ->
    {struct, struct, [
        {1, optional, i64, 'after', undefined},
        {2, required, i32, 'limit', undefined}
    ]};

struct_info('WithdrawalNotFound') ->
    {struct, exception, []};

struct_info('SinkEventNotFound') ->
    {struct, exception, []};

struct_info('NoLastEvent') ->
    {struct, exception, []};

struct_info(_) -> erlang:error(badarg).

-spec record_name(struct_name() | exception_name()) -> atom() | no_return().

record_name('WithdrawalState') ->
    'wthproc_WithdrawalState';

record_name('WithdrawalPending') ->
    'wthproc_WithdrawalPending';

record_name('WithdrawalSucceeded') ->
    'wthproc_WithdrawalSucceeded';

record_name('WithdrawalFailed') ->
    'wthproc_WithdrawalFailed';

record_name('Event') ->
    'wthproc_Event';

record_name('SessionChange') ->
    'wthproc_SessionChange';

record_name('SessionStarted') ->
    'wthproc_SessionStarted';

record_name('SessionFinished') ->
    'wthproc_SessionFinished';

record_name('SessionSucceeded') ->
    'wthproc_SessionSucceeded';

record_name('SessionFailed') ->
    'wthproc_SessionFailed';

record_name('SessionAdapterStateChanged') ->
    'wthproc_SessionAdapterStateChanged';

record_name('SinkEvent') ->
    'wthproc_SinkEvent';

record_name('SinkEventRange') ->
    'wthproc_SinkEventRange';

record_name('WithdrawalNotFound') ->
    'wthproc_WithdrawalNotFound';

record_name('SinkEventNotFound') ->
    'wthproc_SinkEventNotFound';

record_name('NoLastEvent') ->
    'wthproc_NoLastEvent';

record_name(_) -> error(badarg).

-spec functions(service_name()) -> [function_name()] | no_return().

functions('Processing') ->
    [
        'Start',
        'Get'
    ];

functions('EventSink') ->
    [
        'GetEvents',
        'GetLastEventID'
    ];

functions(_) -> error(badarg).

-spec function_info(service_name(), function_name(), params_type | reply_type | exceptions) ->
    struct_info() | no_return().

function_info('Processing', 'Start', params_type) ->
    {struct, struct, [
        {1, undefined, {struct, struct, {dmsl_withdrawals_domain_thrift, 'Withdrawal'}}, 'withdrawal', undefined}
    ]};
function_info('Processing', 'Start', reply_type) ->
    {struct, struct, {dmsl_withdrawals_processing_thrift, 'WithdrawalState'}};
function_info('Processing', 'Start', exceptions) ->
    {struct, struct, []};
function_info('Processing', 'Get', params_type) ->
    {struct, struct, [
        {1, undefined, string, 'id', undefined}
    ]};
function_info('Processing', 'Get', reply_type) ->
    {struct, struct, {dmsl_withdrawals_processing_thrift, 'WithdrawalState'}};
function_info('Processing', 'Get', exceptions) ->
    {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_withdrawals_processing_thrift, 'WithdrawalNotFound'}}, 'ex1', undefined}
    ]};

function_info('EventSink', 'GetEvents', params_type) ->
    {struct, struct, [
        {1, undefined, {struct, struct, {dmsl_withdrawals_processing_thrift, 'SinkEventRange'}}, 'range', undefined}
    ]};
function_info('EventSink', 'GetEvents', reply_type) ->
    {list, {struct, struct, {dmsl_withdrawals_processing_thrift, 'SinkEvent'}}};
function_info('EventSink', 'GetEvents', exceptions) ->
    {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_withdrawals_processing_thrift, 'SinkEventNotFound'}}, 'ex1', undefined}
    ]};
function_info('EventSink', 'GetLastEventID', params_type) ->
    {struct, struct, []};
function_info('EventSink', 'GetLastEventID', reply_type) ->
    i64;
function_info('EventSink', 'GetLastEventID', exceptions) ->
    {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_withdrawals_processing_thrift, 'NoLastEvent'}}, 'ex1', undefined}
    ]};

function_info(_Service, _Function, _InfoType) -> erlang:error(badarg).
