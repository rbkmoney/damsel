%%
%% Autogenerated by Thrift Compiler (1.0.0-dev)
%%
%% DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
%%

-module(dmsl_reporting_thrift).

-include("dmsl_reporting_thrift.hrl").

-export([namespace/0]).
-export([enums/0]).
-export([typedefs/0]).
-export([structs/0]).
-export([services/0]).
-export([typedef_info/1]).
-export([enum_info/1]).
-export([struct_info/1]).
-export([record_name/1]).
-export([functions/1]).
-export([function_info/3]).

-export_type([namespace/0]).
-export_type([typedef_name/0]).
-export_type([enum_name/0]).
-export_type([struct_name/0]).
-export_type([exception_name/0]).
-export_type([service_name/0]).
-export_type([function_name/0]).

-export_type([enum_info/0]).
-export_type([struct_info/0]).

-export_type([
    'Timestamp'/0,
    'InvalidRequest'/0,
    'ReportID'/0,
    'FileID'/0,
    'PartyID'/0,
    'ShopID'/0,
    'URL'/0
]).
-export_type([
    'ReportStatus'/0,
    'ReportType'/0
]).
-export_type([
    'ReportTimeRange'/0,
    'ReportRequest'/0,
    'Report'/0,
    'FileMeta'/0,
    'Signature'/0
]).
-export_type([
    'DatasetTooBig'/0,
    'PartyNotFound'/0,
    'ShopNotFound'/0,
    'ReportNotFound'/0,
    'FileNotFound'/0
]).

-type namespace() :: 'reports'.

%%
%% typedefs
%%
-type typedef_name() ::
    'Timestamp' |
    'InvalidRequest' |
    'ReportID' |
    'FileID' |
    'PartyID' |
    'ShopID' |
    'URL'.

-type 'Timestamp'() :: dmsl_base_thrift:'Timestamp'().
-type 'InvalidRequest'() :: dmsl_base_thrift:'InvalidRequest'().
-type 'ReportID'() :: integer().
-type 'FileID'() :: dmsl_base_thrift:'ID'().
-type 'PartyID'() :: dmsl_domain_thrift:'PartyID'().
-type 'ShopID'() :: dmsl_domain_thrift:'ShopID'().
-type 'URL'() :: binary().

%%
%% enums
%%
-type enum_name() ::
    'ReportStatus' |
    'ReportType'.

%% enum 'ReportStatus'
-type 'ReportStatus'() ::
    'pending' |
    'created'.

%% enum 'ReportType'
-type 'ReportType'() ::
    'provision_of_service' |
    'payment_registry'.

%%
%% structs, unions and exceptions
%%
-type struct_name() ::
    'ReportTimeRange' |
    'ReportRequest' |
    'Report' |
    'FileMeta' |
    'Signature'.

-type exception_name() ::
    'DatasetTooBig' |
    'PartyNotFound' |
    'ShopNotFound' |
    'ReportNotFound' |
    'FileNotFound'.

%% struct 'ReportTimeRange'
-type 'ReportTimeRange'() :: #'reports_ReportTimeRange'{}.

%% struct 'ReportRequest'
-type 'ReportRequest'() :: #'reports_ReportRequest'{}.

%% struct 'Report'
-type 'Report'() :: #'reports_Report'{}.

%% struct 'FileMeta'
-type 'FileMeta'() :: #'reports_FileMeta'{}.

%% struct 'Signature'
-type 'Signature'() :: #'reports_Signature'{}.

%% exception 'DatasetTooBig'
-type 'DatasetTooBig'() :: #'reports_DatasetTooBig'{}.

%% exception 'PartyNotFound'
-type 'PartyNotFound'() :: #'reports_PartyNotFound'{}.

%% exception 'ShopNotFound'
-type 'ShopNotFound'() :: #'reports_ShopNotFound'{}.

%% exception 'ReportNotFound'
-type 'ReportNotFound'() :: #'reports_ReportNotFound'{}.

%% exception 'FileNotFound'
-type 'FileNotFound'() :: #'reports_FileNotFound'{}.

%%
%% services and functions
%%
-type service_name() ::
    'Reporting'.

-type function_name() ::
    'Reporting_service_functions'().

-type 'Reporting_service_functions'() ::
    'GetReports' |
    'GenerateReport' |
    'GetReport' |
    'cancelReport' |
    'GeneratePresignedUrl'.

-export_type(['Reporting_service_functions'/0]).


-type struct_flavour() :: struct | exception | union.
-type field_num() :: pos_integer().
-type field_name() :: atom().
-type field_req() :: required | optional | undefined.

-type type_ref() :: {module(), atom()}.
-type field_type() ::
    bool | byte | i16 | i32 | i64 | string | double |
    {enum, type_ref()} |
    {struct, struct_flavour(), type_ref()} |
    {list, field_type()} |
    {set, field_type()} |
    {map, field_type(), field_type()}.

-type struct_field_info() ::
    {field_num(), field_req(), field_type(), field_name(), any()}.
-type struct_info() ::
    {struct, struct_flavour(), [struct_field_info()]}.

-type enum_choice() ::
    'ReportStatus'() |
    'ReportType'().

-type enum_field_info() ::
    {enum_choice(), integer()}.
-type enum_info() ::
    {enum, [enum_field_info()]}.

-spec typedefs() -> [typedef_name()].

typedefs() ->
    [
        'Timestamp',
        'InvalidRequest',
        'ReportID',
        'FileID',
        'PartyID',
        'ShopID',
        'URL'
    ].

-spec enums() -> [enum_name()].

enums() ->
    [
        'ReportStatus',
        'ReportType'
    ].

-spec structs() -> [struct_name()].

structs() ->
    [
        'ReportTimeRange',
        'ReportRequest',
        'Report',
        'FileMeta',
        'Signature'
    ].

-spec services() -> [service_name()].

services() ->
    [
        'Reporting'
    ].

-spec namespace() -> namespace().

namespace() ->
    'reports'.

-spec typedef_info(typedef_name()) -> field_type() | no_return().

typedef_info('Timestamp') ->
    string;

typedef_info('InvalidRequest') ->
    {struct, exception, {dmsl_base_thrift, 'InvalidRequest'}};

typedef_info('ReportID') ->
    i64;

typedef_info('FileID') ->
    string;

typedef_info('PartyID') ->
    string;

typedef_info('ShopID') ->
    string;

typedef_info('URL') ->
    string;

typedef_info(_) -> erlang:error(badarg).

-spec enum_info(enum_name()) -> enum_info() | no_return().

enum_info('ReportStatus') ->
    {enum, [
        {'pending', 0},
        {'created', 1}
    ]};

enum_info('ReportType') ->
    {enum, [
        {'provision_of_service', 0},
        {'payment_registry', 1}
    ]};

enum_info(_) -> erlang:error(badarg).

-spec struct_info(struct_name() | exception_name()) -> struct_info() | no_return().

struct_info('ReportTimeRange') ->
    {struct, struct, [
        {1, required, string, 'from_time', undefined},
        {2, required, string, 'to_time', undefined}
    ]};

struct_info('ReportRequest') ->
    {struct, struct, [
        {1, required, string, 'party_id', undefined},
        {2, required, string, 'shop_id', undefined},
        {3, required, {struct, struct, {dmsl_reporting_thrift, 'ReportTimeRange'}}, 'time_range', undefined}
    ]};

struct_info('Report') ->
    {struct, struct, [
        {1, required, i64, 'report_id', undefined},
        {2, required, {struct, struct, {dmsl_reporting_thrift, 'ReportTimeRange'}}, 'time_range', undefined},
        {3, required, string, 'created_at', undefined},
        {4, required, {enum, {dmsl_reporting_thrift, 'ReportType'}}, 'report_type', undefined},
        {5, required, {enum, {dmsl_reporting_thrift, 'ReportStatus'}}, 'status', undefined},
        {6, optional, {list, {struct, struct, {dmsl_reporting_thrift, 'FileMeta'}}}, 'files', undefined}
    ]};

struct_info('FileMeta') ->
    {struct, struct, [
        {1, required, string, 'file_id', undefined},
        {2, required, string, 'filename', undefined},
        {3, required, {struct, struct, {dmsl_reporting_thrift, 'Signature'}}, 'signature', undefined}
    ]};

struct_info('Signature') ->
    {struct, struct, [
        {1, required, string, 'md5', undefined},
        {2, required, string, 'sha256', undefined}
    ]};

struct_info('DatasetTooBig') ->
    {struct, exception, [
        {1, undefined, i32, 'limit', undefined}
    ]};

struct_info('PartyNotFound') ->
    {struct, exception, []};

struct_info('ShopNotFound') ->
    {struct, exception, []};

struct_info('ReportNotFound') ->
    {struct, exception, []};

struct_info('FileNotFound') ->
    {struct, exception, []};

struct_info(_) -> erlang:error(badarg).

-spec record_name(struct_name() | exception_name()) -> atom() | no_return().

record_name('ReportTimeRange') ->
    'reports_ReportTimeRange';

record_name('ReportRequest') ->
    'reports_ReportRequest';

record_name('Report') ->
    'reports_Report';

record_name('FileMeta') ->
    'reports_FileMeta';

record_name('Signature') ->
    'reports_Signature';

record_name('DatasetTooBig') ->
    'reports_DatasetTooBig';

record_name('PartyNotFound') ->
    'reports_PartyNotFound';

record_name('ShopNotFound') ->
    'reports_ShopNotFound';

record_name('ReportNotFound') ->
    'reports_ReportNotFound';

record_name('FileNotFound') ->
    'reports_FileNotFound';

record_name(_) -> error(badarg).

-spec functions(service_name()) -> [function_name()] | no_return().

functions('Reporting') ->
    [
        'GetReports',
        'GenerateReport',
        'GetReport',
        'cancelReport',
        'GeneratePresignedUrl'
    ];

functions(_) -> error(badarg).

-spec function_info(service_name(), function_name(), params_type | reply_type | exceptions) ->
    struct_info() | no_return().

function_info('Reporting', 'GetReports', params_type) ->
    {struct, struct, [
        {1, undefined, {struct, struct, {dmsl_reporting_thrift, 'ReportRequest'}}, 'request', undefined},
        {2, undefined, {list, {enum, {dmsl_reporting_thrift, 'ReportType'}}}, 'report_types', undefined}
    ]};
function_info('Reporting', 'GetReports', reply_type) ->
    {list, {struct, struct, {dmsl_reporting_thrift, 'Report'}}};
function_info('Reporting', 'GetReports', exceptions) ->
    {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_reporting_thrift, 'DatasetTooBig'}}, 'ex1', undefined},
        {2, undefined, {struct, exception, {dmsl_base_thrift, 'InvalidRequest'}}, 'ex2', undefined}
    ]};
function_info('Reporting', 'GenerateReport', params_type) ->
    {struct, struct, [
        {1, undefined, {struct, struct, {dmsl_reporting_thrift, 'ReportRequest'}}, 'request', undefined},
        {2, undefined, {enum, {dmsl_reporting_thrift, 'ReportType'}}, 'report_type', undefined}
    ]};
function_info('Reporting', 'GenerateReport', reply_type) ->
    i64;
function_info('Reporting', 'GenerateReport', exceptions) ->
    {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_reporting_thrift, 'PartyNotFound'}}, 'ex1', undefined},
        {2, undefined, {struct, exception, {dmsl_reporting_thrift, 'ShopNotFound'}}, 'ex2', undefined},
        {3, undefined, {struct, exception, {dmsl_base_thrift, 'InvalidRequest'}}, 'ex3', undefined}
    ]};
function_info('Reporting', 'GetReport', params_type) ->
    {struct, struct, [
        {1, undefined, string, 'party_id', undefined},
        {2, undefined, string, 'shop_id', undefined},
        {3, undefined, i64, 'report_id', undefined}
    ]};
function_info('Reporting', 'GetReport', reply_type) ->
    {struct, struct, {dmsl_reporting_thrift, 'Report'}};
function_info('Reporting', 'GetReport', exceptions) ->
    {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_reporting_thrift, 'ReportNotFound'}}, 'ex1', undefined}
    ]};
function_info('Reporting', 'cancelReport', params_type) ->
    {struct, struct, [
        {1, undefined, string, 'party_id', undefined},
        {2, undefined, string, 'shop_id', undefined},
        {3, undefined, i64, 'report_id', undefined}
    ]};
function_info('Reporting', 'cancelReport', reply_type) ->
    {struct, struct, []};
function_info('Reporting', 'cancelReport', exceptions) ->
    {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_reporting_thrift, 'ReportNotFound'}}, 'ex1', undefined}
    ]};
function_info('Reporting', 'GeneratePresignedUrl', params_type) ->
    {struct, struct, [
        {1, undefined, string, 'file_id', undefined},
        {2, undefined, string, 'expires_at', undefined}
    ]};
function_info('Reporting', 'GeneratePresignedUrl', reply_type) ->
    string;
function_info('Reporting', 'GeneratePresignedUrl', exceptions) ->
    {struct, struct, [
        {1, undefined, {struct, exception, {dmsl_reporting_thrift, 'FileNotFound'}}, 'ex1', undefined},
        {2, undefined, {struct, exception, {dmsl_base_thrift, 'InvalidRequest'}}, 'ex2', undefined}
    ]};

function_info(_Service, _Function, _InfoType) -> erlang:error(badarg).
